{"version":3,"sources":["views/Components/Forms/Withdraw/Withdraw.js","views/Components/Forms/DenominationItem/DenominationItem.js"],"names":["initialFieldValues","amount","accNo","transType","balance","accountNo","userId","investmentLimit","mapActionToProps","createTransaction","transActions","fetchTransactionsByAccNo","updateAccount","accActions","connect","state","transList","transactions","list","withStyles","theme","root","margin","spacing","minWidth","formControl","smMargin","props","_useState","useState","_useState2","_slicedToArray","accountNumber","setAccountNumber","_useState3","_useState4","setAccountName","_useState5","_useState6","accBalance","setAccBalance","_useState7","_useState8","invLimit","setInvLimit","_useState9","_useState10","setDateCreated","addToast","useToasts","validate","fieldValues","arguments","length","undefined","values","temp","_objectSpread","errors","setErrors","Object","every","x","_useForm","useForm","setCurrentId","_useForm2","handleInputChange","resetForm","useEffect","getAccount","handleItem","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","_ref2","_callee2","response","content","_context2","fetch","window","headers","credentials","sent","json","name","dateCreated","t0","_jsx","_Fragment","children","className","_jsxs","autoComplete","noValidate","onSubmit","e","preventDefault","parseFloat","transaction","transId","toString","appearance","type","value","onChange","error","helperText","id","map","eachObject","DenominationItem","onClick","stateChange"],"mappings":"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","file":"static/js/13.e7da4513.chunk.js","sourcesContent":["import React, { lazy, useEffect, useState } from 'react'\r\nimport { CBadge, CButton, CButtonGroup, CCard, CCardBody, CCardFooter, CCardHeader, CCol, CProgress, CRow, CCallout } from '@coreui/react'\r\nimport { FormControl, Grid, TextField, withStyles, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\r\nimport CIcon from '@coreui/icons-react'\r\nimport './Withdraw.css';\r\nimport { connect } from \"react-redux\";\r\nimport DenominationItem from '../DenominationItem/DenominationItem'\r\nimport * as transActions from \"../../../../actions/Transactions/Transactions\";\r\nimport * as accActions from \"../../../../actions/Accounts/Accounts\";\r\nimport { useForm } from \"../useForm\";\r\nimport { ToastConsumer, useToasts } from \"react-toast-notifications\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n})\r\n\r\nconst initialFieldValues = {\r\n\r\n    amount: 0,\r\n    accNo: '',\r\n    transType: \"Withdraw\",\r\n    balance: 0,\r\n    accountNo: '',\r\n    userId: '',\r\n    investmentLimit: ''\r\n}\r\nconst Withdraw = (props) => {\r\n    const [accountNumber, setAccountNumber] = useState(\"\");\r\n    const [accountName, setAccountName] = useState(\"\");\r\n    const [accBalance, setAccBalance] = useState(0);\r\n    const [invLimit, setInvLimit] = useState(0);\r\n    const [dateCreated, setDateCreated] = useState(\"\");\r\n\r\n    //toast message\r\n    const { addToast } = useToasts();\r\n\r\n    //realtime validation for the whole form controls\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('amount' in fieldValues) {\r\n            temp.amount = fieldValues.amount ? \"\" : \"This field is required\"\r\n\r\n        }\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const [\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    ] = useForm(initialFieldValues, validate, props.setCurrentId);\r\n\r\n    const showToast = () => {\r\n        addToast(\"Withrawal Initiated\", { appearance: 'success' })\r\n        addToast(\"Withrawal Initiated\", { appearance: 'success' })\r\n        addToast(\"Withrawal Initiated\", { appearance: 'success' })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAccount();\r\n    }, [values])\r\n\r\n    // const {denominationsList} = this.props\r\n\r\n    const money = 0;\r\n    // const {denominationsList} = this.props\r\n    const denominationsList = [\r\n        {\r\n            id: 1,\r\n            value: 5000,\r\n        },\r\n        {\r\n            id: 2,\r\n            value: 10000,\r\n        },\r\n        {\r\n            id: 3,\r\n            value: 20000,\r\n        },\r\n        {\r\n            id: 4,\r\n            value: 50000,\r\n        },\r\n    ]\r\n\r\n    const handleItem = async () => {\r\n        // console.log(\"clicked\");\r\n    };\r\n\r\n    const getAccount = async () => {\r\n\r\n        try {\r\n            const response = await fetch('http://risokaslick-001-site1.ktempurl.com/api/Accounts/get-acc-by-uid/' + window.userId, {\r\n                // method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                credentials: 'include',\r\n\r\n            })\r\n            const content = await response.json();\r\n\r\n            setAccountNumber(content.accNo);\r\n            setAccBalance(content.balance);\r\n            setInvLimit(content.investmentLimit);\r\n            setAccountName(window.name);\r\n            setDateCreated(content.dateCreated);\r\n\r\n        } catch {\r\n\r\n        }\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n\r\n        if (validate()) {\r\n\r\n            const onSuccess = () => {\r\n                showToast();\r\n                resetForm();\r\n\r\n\r\n            }\r\n            values.amount = parseFloat(values.amount);\r\n            values.balance = parseFloat(accBalance) - parseFloat(values.amount);\r\n            values.accountNo = accountNumber;\r\n            values.accNo = accountNumber;\r\n            values.investmentLimit = invLimit;\r\n            values.userId = window.userId;\r\n            // console.log(values);\r\n\r\n            const transaction = {\r\n                transId: \"T-mm\",\r\n                accNo: values.accNo.toString(),\r\n                amount: parseFloat(values.amount),\r\n                transType: values.transType.toString(),\r\n                userId: values.userId.toString()\r\n            };\r\n\r\n            // console.log(transaction);\r\n            props.createTransaction(transaction);\r\n            props.updateAccount(values.userId, values, onSuccess)\r\n            // if (props.currentId == 0) {\r\n\r\n            //     //using toast notification\r\n\r\n            //     props.createCateg(values, onSuccess)\r\n            //     //addorEdit(values, onSuccess)\r\n\r\n            // }\r\n            // else {\r\n            //     //using windows alert notification\r\n            //     //props.updateDCandidate(props.currentId, values, () => {window.alert('updated')})\r\n            //     //using toast notification\r\n            //     props.updateCateg(props.currentId, values, onSuccess)\r\n\r\n\r\n\r\n            // }\r\n\r\n            // if (props.openPopup == true) {\r\n            //     props.setOpenPopup(false)\r\n            // }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"main-container\">\r\n                <div className=\"inner-container\">\r\n                    <div className=\"heading-container\">\r\n                        <div className=\"para-div\">\r\n                            <p className=\"s\">S</p>\r\n                        </div>\r\n                        <p className=\"name-para\">{window.name}</p>\r\n                    </div>\r\n                    <div className=\"money-container\">\r\n                        <p className=\"balance-name\">Your Balance</p>\r\n                        <div className=\"balance-holder\">\r\n                            <p className=\"amount\">{accBalance}</p>\r\n                        </div>\r\n                    </div>\r\n                    <p className=\"rupees\"></p>\r\n                    <p className=\"withdraw\">Withdraw</p>\r\n                    <form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                        <input type='number' className='input' name=\"amount\" value={values.amount} onChange={handleInputChange}\r\n                            {...(errors.amount && { error: true, helperText: errors.amount })} ></input>\r\n                        <button type=\"submit\" className=\"btn\"  >\r\n                            Withdraw\r\n                        </button>\r\n                    </form>\r\n                    <p className=\"choose\">CHOOSE Amount </p>\r\n\r\n                    <ul className=\"items-holder\">\r\n                        {denominationsList.map(eachObject => (\r\n                            <DenominationItem\r\n                                key={eachObject.id}\r\n                                value={eachObject.value}\r\n                                // stateChange={this.stateChange}\r\n                                onClick={handleItem()}\r\n                            />\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    transList: state.transactions.list\r\n\r\n})\r\n\r\n\r\n\r\nconst mapActionToProps = {\r\n    createTransaction: transActions.createTransaction,\r\n    fetchTransactionsByAccNo: transActions.fetchTransactionsByAccNo,\r\n    updateAccount: accActions.updateAccount\r\n\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(Withdraw));\r\n\r\n","// Write your code here\r\nimport './DenominationItem.css'\r\n\r\nconst DenominationItem = props => {\r\n  const {value, stateChange} = props\r\n  const changeState = () => {\r\n    stateChange(value)\r\n  }\r\n  return (\r\n    <li className=\"item-holder\">\r\n      <button type=\"button\" className=\"btn\" onClick={changeState}>\r\n        {value}\r\n      </button>\r\n    </li>\r\n  )\r\n}\r\nexport default DenominationItem"],"sourceRoot":""}