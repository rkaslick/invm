{"version":3,"sources":["views/Components/Forms/UserLevels/AddUserLevel/AddNewUserLevelForm.js"],"names":["initialFieldValues","level","description","mapActionToProps","createUserLevel","userLevelActions","updateUserLevel","fetchAllCategs","categActions","fetchAllUserLevel","connect","state","userLevelList","userLevel","list","withStyles","theme","root","margin","spacing","minWidth","formControl","smMargin","_ref","classes","props","_objectWithoutProperties","_excluded","addToast","useToasts","validate","fieldValues","arguments","length","undefined","values","temp","_objectSpread","errors","setErrors","Object","every","x","_useForm","useForm","setCurrentId","_useForm2","_slicedToArray","setValues","handleInputChange","resetForm","useEffect","currentId","find","id","_jsx","className","children","_jsxs","autoComplete","noValidate","onSubmit","e","preventDefault","onSuccess","appearance","openPopup","setOpenPopup","FormControl","error","InputLabel","Select","name","label","value","onChange","MenuItem","FormHelperText","TextField","helperText","type","variant","onClick","style","marginLeft"],"mappings":"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","file":"static/js/61.75b51e84.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { FormControl, Grid, TextField, withStyles, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\r\nimport { useForm } from \"../../useForm\";\r\nimport { connect } from \"react-redux\";\r\n//import * as actions from \"../../../../../actions/Staff/addStaff\";\r\nimport * as categActions from \"../../../../../actions/Category/categories\";\r\nimport * as userLevelActions from \"../../../../../actions/UserLevel/userLevel\";\r\n//import * as userLevelActions from \"../../../../../actions/UserLevel/userLevel\";\r\nimport { ToastConsumer, useToasts } from \"react-toast-notifications\";\r\nimport \"../../staffForm.css\";\r\nimport { RestoreSharp } from \"@material-ui/icons\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n})\r\n\r\nconst initialFieldValues = {\r\n\r\n    level: '',\r\n    description: '',\r\n    // phone: '',\r\n    // location: '',\r\n    // // email: '',\r\n    // // address: '',\r\n    // companyDataId: '',\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst AddNewUserLevelForm = ({ classes, ...props }) => {\r\n\r\n    //toast message\r\n    const { addToast } = useToasts()\r\n\r\n    //realtime validation for the whole form controls\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('level' in fieldValues) {\r\n            temp.level = fieldValues.level ? \"\" : \"This field is required\"\r\n            // addToast(\"User data saved succeffuly\", {appearance:'success'})\r\n            // console.log(\"Tast has beeen displayed\")\r\n        }\r\n\r\n\r\n        if ('description' in fieldValues) {\r\n            temp.description = fieldValues.description ? \"\" : \"This field is required\"\r\n        }\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const [\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    ] = useForm(initialFieldValues, validate, props.setCurrentId);\r\n\r\n    const showToast = () => {\r\n        addToast(\"User Level data saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"User Level data saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"User Level data saved succeffuly\", { appearance: 'success' })\r\n        props.fetchAllCategs();\r\n    }\r\n\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n\r\n        if (validate()) {\r\n\r\n            const onSuccess = () => {\r\n                showToast();\r\n                resetForm();\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            if (props.currentId == 0) {\r\n\r\n                //using toast notification\r\n\r\n                props.createUserLevel(values, onSuccess)\r\n                //addorEdit(values, onSuccess)\r\n\r\n            }\r\n            else {\r\n                //using windows alert notification\r\n                //props.updateDCandidate(props.currentId, values, () => {window.alert('updated')})\r\n                //using toast notification\r\n                props.updateUserLevel(props.currentId, values, onSuccess)\r\n\r\n\r\n\r\n            }\r\n\r\n            if (props.openPopup == true) {\r\n                props.setOpenPopup(false)\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (props.currentId != 0)\r\n            setValues({\r\n                ...props.userLevelList.find(x => x.id == props.currentId)\r\n            })\r\n        setErrors({})\r\n        props.fetchAllUserLevel();\r\n        // props.fetchAllUserLevel();\r\n\r\n\r\n\r\n    }, [props.currentId])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n        <section className=\"content\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    {/* left column */}\r\n                    <div className=\"col-md-12\">\r\n                        {/* jquery validation */}\r\n                        <div className=\"card card-primary\">\r\n                            <div className=\"card-header\">\r\n                                <h4 className=\"card-title\">Add User Levels <small> </small></h4>\r\n                            </div>\r\n                            {/* /.card-header */}\r\n                            {/* form start */}\r\n                            <form id=\"quickForm\" autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n\r\n                                {/* <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"standard-basic\"\r\n                                    type=\"text\"\r\n                                    name=\"level\"\r\n                                    label=\"User Level\"\r\n                                    value={values.level}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.level && { error: true, helperText: errors.level })}\r\n                                /> */}\r\n\r\n\r\n                                <FormControl className={classes.formControl}\r\n                                    {...(errors.level && { error: true })}\r\n                                >\r\n                                    <InputLabel >User Level</InputLabel>\r\n                                    <Select\r\n                                        className=\"form-ctr\"\r\n                                        name=\"level\"\r\n                                        label=\"User Level\"\r\n                                        value={values.level}\r\n                                        onChange={handleInputChange}\r\n                                    >\r\n                                        <MenuItem value=\"\">Select Level</MenuItem>\r\n                                        <MenuItem value=\"Admin\">Administrator</MenuItem>\r\n                                        <MenuItem value=\"Cashier\">Cashier</MenuItem>\r\n                                        <MenuItem value=\"Store Keeper\">Store Keeper</MenuItem>\r\n                                    </Select>\r\n                                    {errors.level && <FormHelperText>{errors.level}</FormHelperText>}\r\n                                </FormControl>\r\n                                <TextField className=\"form-ctr\" name=\"description\" label=\"Description\" value={values.description}\r\n                                    onChange={handleInputChange}\r\n\r\n\r\n                                    {... (errors.description && { error: true, helperText: errors.description })}\r\n                                />\r\n\r\n                                {/* <TextField className=\"form-ctr\" name=\"phone\" label=\"Categ Phone No\" value={values.phone}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {... (errors.phone && { error: true, helperText: errors.phone })}\r\n                                /> */}\r\n\r\n                                {/* <TextField\r\n                                    className=\"form-ctr\"\r\n                                    name=\"email\"\r\n                                    label=\"Email\" type=\"email\" value={values.email}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {...(errors.email && { error: true, helperText: errors.email })}\r\n                                /> */}\r\n\r\n                                {/* <TextField className=\"form-ctr\" name=\"location\" label=\"location\" value={values.location}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {... (errors.location && { error: true, helperText: errors.location })}\r\n                                />\r\n\r\n                               \r\n                             \r\n\r\n                             <FormControl className={classes.formControl}\r\n                                    {...(errors.userLevelId && { error: true })}\r\n                                >\r\n                                    <InputLabel >Company</InputLabel>\r\n                                    <Select\r\n                                        className=\"form-ctr\"\r\n                                        name=\"companyDataId\"\r\n                                        label=\"Company\"\r\n                                        value={values.companyDataId}\r\n                                        onChange={handleInputChange}\r\n\r\n                                    > */}\r\n                                {/* <MenuItem value=\"\">Select Company</MenuItem>\r\n                                        <MenuItem value=\"1\">{1}</MenuItem>\r\n                                        {/* {\r\n                                            props.userLevelList.map((record, index) => {\r\n                                                return (\r\n                                                    <MenuItem value={record.id}>{record.level}</MenuItem>\r\n\r\n                                                )\r\n                                            })\r\n                                        } */}\r\n                                {/* </Select>\r\n                                    {errors.companyDataId && <FormHelperText>{errors.companyDataId}</FormHelperText>}\r\n                                </FormControl>   */}\r\n\r\n\r\n\r\n\r\n                                {/* /.card-body */}\r\n                                <div className=\"card-footer\">\r\n                                    <div>\r\n                                        <button type=\"submit\" className=\"btn btn-primary\" >Save</button>\r\n                                        <button variant=\"contained\"\r\n                                            className=\"btn btn-secondary\"\r\n                                            onClick={resetForm} style={{ marginLeft: 3 }}>Reset</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </form>\r\n\r\n                        </div>\r\n                        {/* /.card */}\r\n                    </div>\r\n                    {/*/.col (left) */}\r\n                    {/* right column */}\r\n                    <div className=\"col-md-6\">\r\n                    </div>\r\n                    {/*/.col (right) */}\r\n                </div>\r\n                {/* /.row */}\r\n            </div>{/* /.container-fluid */}\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n    userLevelList: state.userLevel.list\r\n\r\n})\r\n\r\n\r\n\r\nconst mapActionToProps = {\r\n    createUserLevel: userLevelActions.createUserLevel,\r\n    updateUserLevel: userLevelActions.updateUserLevel,\r\n    fetchAllCategs: categActions.fetchAllCategory,\r\n    //fetchAllUserLevel: userLevelActions.fetchAllUserLevel,\r\n    //fetchAllAddStaff: actions.fetchAll,\r\n    fetchAllUserLevel: userLevelActions.fetchAllUserLevel,\r\n\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AddNewUserLevelForm));"],"sourceRoot":""}