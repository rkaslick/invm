{"version":3,"sources":["views/Components/Forms/Sales/CreditReciept.js","views/Components/CrPopup.js","views/Components/Forms/Sales/PayCredit/PayCredit.js"],"names":["mapActionToProps","fetchAllTaxes","TActions","connect","state","taxList","tax","list","withStyles","theme","root","fontSize","paper","margin","spacing","padding","grid","paddingLeft","_ref","classes","props","_objectWithoutProperties","_excluded","componentRef","useRef","useEffect","_jsx","_Fragment","children","_jsxs","className","ref","companyData","name","phone","address","paymentInfo","recieptNo","krapin","undefined","customerData","bal","paid","balance","payMode","ScriptTag","isHydrating","type","src","ReactToPrint","trigger","Controls","Button","text","variant","newButton","onClick","setOpenPopup","content","current","useStyles","makeStyles","dialogWrapper","position","top","DialogTitle","paddingRight","CrPopup","title","openCrPopup","setOpenCrPopup","Dialog","open","maxWidth","clasess","style","display","Typography","component","flexGrow","ActionButton","color","CloseIcon","DialogContent","dividers","initialFieldValues","customerId","amntPaid","userId","refNo","createStockIns","stockInActions","createStoreProduct","storeProductActions","updateStockIn","updateStoreProducts","fetchAllStores","storeActions","fetchAllUserLevel","userLevelActions","fetchAllSuppliers","supplierActions","updateStockInHand","productActions","fetchAllProducts","fetchAllStoreProduct","fetchAllStockIn","fetchByStoreIdNProductId","updateProducts","createCreditSale","creditSalesActions","createCreditSaleDetails","fetchAllTransactions","fetchAllCompanyData","companyDataActions","fetchAllCustomers","customerActions","updateCreditSaleTransaction","createCreditPay","payCreditActions","addStaffList","addStaff","storesList","stores","userLevelList","userLevel","suppliersList","suppliers","productsList","products","storeProductsList","storeProducts","stockInList","stockIns","storeIdNProductIdList","creditSalesList","creditSale","companyDataList","customersList","customers","payCreditList","creditPay","minWidth","formControl","smMargin","_useState","useState","_useState2","_slicedToArray","addToast","useToasts","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","_useState19","_useState20","_useState21","_useState22","confirmDialog","setConfirmDialog","_useState23","_useState24","errorDialog","setErrorDialog","_useState25","_useState26","_useState27","_useState28","_useState29","_useState30","_useState31","_useState32","_useState33","_useState34","_useState35","_useState36","_useState37","_useState38","_useState39","_useState40","tittle","setTittle","_useState41","_useState42","_useState43","_useState44","_useState45","_useState46","setCompanyData","_useState47","_useState48","setCustomerData","_useState49","_useState50","selectedCustomer","setSelectedCustomer","_useState51","_useState52","_useState53","_useState54","setBal","_useState55","_useState56","credSales","setCredSales","_useState57","_useState58","setPaymentInfo","validate","fieldValues","arguments","length","values","temp","_objectSpread","errors","setErrors","Object","every","x","_useForm","useForm","setCurrentId","_useForm2","setValues","handleInputChange","showToast","appearance","resetF","credSale","filter","tBl","reduce","currentItem","find","id","console","log","openInErrorDialog","autoComplete","noValidate","onSubmit","e","preventDefault","onSuccess","amountPaid","noOfTrans","i","parseFloat","transCode","amnt","toString","uuid","substring","toUpperCase","payInfo","creditInfo","amount","onConfirm","Autocomplete","sx","width","options","autoHighlight","getOptionLabel","option","onSelect","onChange","_event","newCustomer","renderInput","params","TextField","label","inputProps","value","error","helperText","FormControl","InputLabel","Select","MenuItem","FormHelperText","marginLeft","ConfirmDialog","ErrorDialog","CreditReciept"],"mappings":"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","file":"static/js/58.3e0f0cec.chunk.js","sourcesContent":["import { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\n// import PageHeader from \"../../../PageHeader\";\r\n\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport \"../style.css\";\r\nimport * as companyDataActions from \"../../../../actions/CompanyData/companyData\";\r\nimport ScriptTag from 'react-script-tag';\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport Controls from \"../../../Components/controls/Controls\";\r\nimport * as TActions from \"../../../../actions/Tax/tax\";\r\nimport { v4 as uuid } from 'uuid';\r\nconst styles = theme => ({\r\n    root: {\r\n        \"& .MuiTableCell-head\": {\r\n            fontSize: \"0.95rem\"\r\n        }\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(-8.9),\r\n        padding: theme.spacing(6)\r\n    },\r\n\r\n    grid: {\r\n        paddingLeft: theme.spacing(2)\r\n    }\r\n})\r\n\r\n\r\n\r\nconst CreditReciept = ({ classes, ...props }) => {\r\n    const componentRef = useRef();\r\n    // const [taxId, setTaxId] = useState(\"\");\r\n    let taxRate = \"\";\r\n    let totalVat = 0;\r\n    useEffect(() => {\r\n        // props.fetchAllCategory()\r\n        // props.fetchAllStores()\r\n        props.fetchAllTaxes();\r\n    }, [])\r\n\r\n\r\n    // const getTax = (id,price) => {\r\n    //     const tax = { ...props.taxList.find(x => x.taxId === id) };\r\n    //     // setTaxId(tax.taxId);\r\n    //     taxRate = tax.rate / 100;\r\n    //     let vat = price * taxRate;\r\n    //     totalVat = totalVat + vat;\r\n    //     console.log(tax.rate);\r\n\r\n\r\n    // }\r\n    // var totalTax  = (props.recordList.reduce((totalTax, currentItem) => totalTax = totalTax + currentItem.tax, 0));\r\n    return (\r\n        <>\r\n            <div >\r\n                <div\r\n                    className=\"ticket\"\r\n                    ref={componentRef}\r\n                >\r\n                    {/* <img src=\"./logo.png\" alt=\"Logo\" /> */}\r\n                    <p>Credit Payment</p>\r\n                    <p className=\"centered\"> {props.companyData[0].name}\r\n                        <br />Phone: {props.companyData[0].phone}\r\n                        <br />Address:{props.companyData[0].address}\r\n                        <br />Reciept No: {props.paymentInfo.recieptNo}\r\n                        <br /> PIN: {props.companyData[0].krapin}\r\n                        <br />{props.customerData != undefined ? \"Customer Name:\" + props.customerData.name : \"\"}\r\n                    \r\n                    </p>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"description\"> Prev Balance</th>\r\n                                <th className=\"description\">Paid</th>\r\n                                <th className=\"description\">Rem Balance</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          \r\n                                  \r\n                                        \r\n                                        <tr>\r\n                                            <td className=\"quantity\">{props.paymentInfo.bal}</td>\r\n                                            <td className=\"description\">{props.paymentInfo.paid}</td>\r\n                                            <td className=\"price\">\r\n                                                {props.paymentInfo.balance}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                                {/* {getTax(record.taxId,record.totalPrice)} */}\r\n                                                <td>Paid with</td>\r\n                                                <td>{props.paymentInfo.payMode}</td>\r\n\r\n                                                <td>\r\n                                                    {/* {\r\n                                                        // parseFloat(record.tax).toFixed(2)\r\n                                                    } */}\r\n                                                </td>\r\n                                            </tr>\r\n                                    \r\n                                        \r\n\r\n                                \r\n                               \r\n                            \r\n                            <br />\r\n                            <tr>\r\n                                <td className=\"Total\"></td>\r\n                                {/* <td className=\"description\">Deposit</td>\r\n                                <td className=\"price\">{props.trans.gDeposit}</td> */}\r\n                            </tr>\r\n\r\n                            \r\n                            {/* <tr>\r\n                                <td className=\"Total\">{props.trans.quantity}</td>\r\n                                <td className=\"description\">Total</td>\r\n                                <td className=\"price\">{props.trans.gTotal}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td></td>\r\n                                <td className=\"description\">Total VAT</td>\r\n                                <td className=\"price\">{parseFloat(totalTax).toFixed(2)}</td>\r\n                            </tr> */}\r\n\r\n\r\n                            {/* <tr>\r\n                                <td className=\"quantity\">1.00</td>\r\n                                <td className=\"description\">ARDUINO UNO R3</td>\r\n                                <td className=\"price\">$25.00</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"quantity\">2.00</td>\r\n                                <td className=\"description\">JAVASCRIPT BOOK</td>\r\n                                <td className=\"price\">$10.00</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"quantity\">1.00</td>\r\n                                <td className=\"description\">STICKER PACK</td>\r\n                                <td className=\"price\">$10.00</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"quantity\" />\r\n                                <td className=\"description\">TOTAL</td>\r\n                                <td className=\"price\">$55.00</td>\r\n                            </tr> */}\r\n                        </tbody>\r\n                    </table>\r\n                    <p className=\"centered\">Thanks for your purchase!\r\n                        <br /></p>\r\n                </div>\r\n\r\n                <ScriptTag isHydrating={true} type=\"text/javascript\" src=\"./print.js\" />\r\n                <ReactToPrint\r\n                    trigger={() => <Controls.Button\r\n                        text=\"Print\"\r\n                        variant=\"outlined\"\r\n                        //   startIcon={<AddIcon />}\r\n                        className={classes.newButton}\r\n                        onClick={() => { props.setOpenPopup(false); }}\r\n                    />\r\n                    }\r\n                    content={() => componentRef.current}\r\n\r\n                />\r\n            </div>\r\n\r\n        </>\r\n\r\n\r\n    );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n    // categoryList: state.category.list\r\n    taxList: state.tax.list\r\n\r\n})\r\n\r\nconst mapActionToProps = {\r\n    // fetchAllCategory: Cactions.fetchAllCategory,\r\n    // deleteCategory: Cactions.DeleteCategory,\r\n    fetchAllTaxes: TActions.fetchAllTaxes\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(CreditReciept));\r\n\r\n","import { Dialog, DialogContent, DialogTitle, makeStyles, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport Controls from \"./controls/Controls\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    dialogWrapper: {\r\n        padding: theme.spacing(2),\r\n        position: 'absolute',\r\n        top: theme.spacing(5),\r\n    },\r\n\r\n    DialogTitle:{\r\n        paddingRight:'0px'\r\n    }\r\n}))\r\nexport default function CrPopup(props) {\r\n    const { title, children, openCrPopup, setOpenCrPopup } = props;\r\n    const classes = useStyles();\r\n    return (\r\n        <Dialog open={openCrPopup} maxWidth=\"md\" clasess={{ paper: classes.dialogWrapper }}>\r\n            <DialogTitle className = {classes.DialogTitle}>\r\n                <div style={{ display: 'flex' }}>\r\n                    <Typography variant=\"h6\" component=\"div\" style={{ flexGrow: 1 }}>\r\n                        {title}\r\n                    </Typography>\r\n                   <Controls.ActionButton \r\n                   color=\"secondary\"\r\n                   onClick ={() => {setOpenCrPopup(false)}}\r\n                   >\r\n                       \r\n                       <CloseIcon />\r\n                   </Controls.ActionButton>\r\n                </div>\r\n            </DialogTitle>\r\n\r\n            <DialogContent dividers>\r\n                {children}\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { FormControl, Grid, TextField, withStyles, InputLabel, Select, MenuItem, Button, FormHelperText, Checkbox, FormControlLabel, FormGroup, ButtonGroup, } from \"@material-ui/core\";\r\nimport { useForm } from \"../../useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../../../actions/Staff/addStaff\";\r\nimport * as storeActions from \"../../../../../actions/Store/stores\";\r\nimport * as userLevelActions from \"../../../../../actions/UserLevel/userLevel\";\r\nimport * as supplierActions from \"../../../../../actions/Suppliers/suppliers\";\r\nimport * as productActions from \"../../../../../actions/Products/products\";\r\nimport * as storeProductActions from \"../../../../../actions/StoreProducts/storeProducts\";\r\nimport * as creditSalesActions from \"../../../../../actions/CreditSale/creditSale\";\r\nimport * as stockInActions from \"../../../../../actions/StockIn/stockIn\";\r\nimport { ToastConsumer, useToasts } from \"react-toast-notifications\";\r\nimport \"../../staffForm.css\";\r\nimport { string } from \"prop-types\";\r\nimport { RestoreSharp } from \"@material-ui/icons\";\r\nimport { createSelector, createStructuredSelector } from 'reselect';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { parse, parseJSON } from \"date-fns\";\r\nimport ConfirmDialog from \"../../../controls/ConfirmDialog\";\r\nimport ErrorDialog from \"../../../controls/errorDialog\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { reset } from \"enzyme/build/configuration\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport CreditReciept from \"../CreditReciept\";\r\nimport CrPopup from \"../../../CrPopup\";\r\nimport * as companyDataActions from \"../../../../../actions/CompanyData/companyData\";\r\nimport * as customerActions from \"../../../../../actions/Customers/customers\";\r\nimport * as payCreditActions from \"../../../../../actions/CreditPayments/creditPay\";\r\n\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n})\r\n\r\nconst initialFieldValues = {\r\n\r\n    payMode: '',\r\n    customerId: '',\r\n    balance: 0,\r\n    paid: 0,\r\n    amntPaid: 0,\r\n    userId: 0,\r\n    refNo:''\r\n}\r\n\r\n// //selectors\r\n// const storeList = state => state.stores.list;\r\n// const addStaff = state => state.addStaff.list;\r\n\r\n// //selectore function\r\n// export const selectStores = createSelector(\r\n//     storeList,\r\n// );\r\n// export const selectStaff = createSelector(\r\n//     addStaff,\r\n// );\r\n\r\n\r\n\r\n\r\nconst PayCredit = ({ classes, ...props }) => {\r\n\r\n    const componentDidMount = () => {\r\n        setTCode(uuid());\r\n    }\r\n    //const [addorEdit] = props;\r\n    const [openCrPopup, setOpenCrPopup] = useState(false)\r\n\r\n    //toast message\r\n    const { addToast } = useToasts();\r\n    const [currentProductId, setCurrentProductId] = useState(0);\r\n    const [currentId, setCurrentId] = useState(0);\r\n    const [productId, setProductId] = useState(0);\r\n    const [value, setValue] = useState({});\r\n    const [selectedSupplier, setSelectedSupplier] = useState(null);\r\n    const [sId, setSId] = useState(0);\r\n    const [sHand, setSHand] = useState(0);\r\n    const [quant, setQuant] = useState(0);\r\n    const [stock, setStock] = useState(0);\r\n    const [confirmDialog, setConfirmDialog] = useState(false);\r\n    const [errorDialog, setErrorDialog] = useState(false);\r\n    const [uPrice, setUPrice] = useState(0);\r\n    const [tPrice, setTPrice] = useState(0);\r\n    const [products, setProducts] = useState([]);\r\n    const [totalDep, setTotalDep] = useState(0);\r\n    const [total, setTotal] = useState(0);\r\n    const [transDetails, settransDetails] = useState([]);\r\n    const [tCode, setTCode] = useState(0);\r\n    const [tittle, setTittle] = useState(\"\");\r\n    const [recordList, setRecordList] = useState([]);\r\n    const [trans, setTrans] = useState([]);\r\n    const [companyData, setCompanyData] = useState([]);\r\n    const [customerData, setCustomerData] = useState([]);\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n    const [customerId, setCustomerId] = useState(0);\r\n    const [bal, setBal] = useState(0);\r\n    const [credSales, setCredSales] = useState([]);\r\n    const [paymentInfo, setPaymentInfo] = useState([]);\r\n\r\n\r\n    //realtime validation for the whole form controls\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n\r\n\r\n        if ('customerId' in fieldValues) {\r\n            temp.customerId = fieldValues.customerId ? \"\" : \"This field is required\";\r\n\r\n        }\r\n        if ('balance' in fieldValues) {\r\n            temp.balance = fieldValues.balance ? \"\" : \"This field is required\";\r\n\r\n        }\r\n        if ('amntPaid' in fieldValues) {\r\n            temp.amntPaid = fieldValues.amntPaid ? \"\" : \"This field is required\";\r\n\r\n        }\r\n        if ('payMode' in fieldValues) {\r\n            temp.payMode = fieldValues.payMode ? \"\" : \"This field is required\";\r\n\r\n        }\r\n\r\n       \r\n\r\n\r\n\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    const [\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    ] = useForm(initialFieldValues, validate, props.setCurrentId);\r\n\r\n    const showToast = () => {\r\n        addToast(\"Transaction is Successful\", { appearance: 'success' })\r\n        addToast(\"Transaction is Successful\", { appearance: 'success' })\r\n        addToast(\"Transaction is Successful\", { appearance: 'success' })\r\n\r\n\r\n    }\r\n\r\n    const handleFormChange = (e) => {\r\n        e.preventDefault();\r\n\r\n\r\n\r\n        if (validate()) {\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n    const resetF = () => {\r\n        setValues({\r\n            ...initialFieldValues\r\n        })\r\n        setBal(0);\r\n        setSelectedCustomer(null);\r\n        setErrors({})\r\n    }\r\n\r\n\r\n    // const setId = () => {\r\n    //     setCurrentId(record.productId)\r\n    // }\r\n\r\n    const getUnitPrice = e => {\r\n        const target = e.target;\r\n        setUPrice(target.value);\r\n        //console.log(setUPrice);\r\n\r\n    }\r\n\r\n    const getQuantity = e => {\r\n        const target = e.target;\r\n        setQuant(target.value);\r\n        console.log(uPrice);\r\n\r\n\r\n    }\r\n\r\n    const calculateTotalPrice = () => {\r\n\r\n        var totalP = parseFloat(uPrice) * parseFloat(quant)\r\n        // setQuant(fieldValues.quantity)\r\n        //  setSHand(fieldValues.stockInHand);\r\n        console.log(totalP);\r\n\r\n\r\n    }\r\n\r\n    // const getStoreId = s => {\r\n\r\n    //     setSId(s);\r\n    // }\r\n\r\n    const clearField = () => {\r\n        setValue(props.productsList.clearField);\r\n\r\n        console.log(\"open = true\")\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (validate()) {\r\n            const onSuccess = () => {\r\n                showToast();\r\n                resetF();\r\n                // clearField();\r\n\r\n            }\r\n    //    console.log(values.refNo);\r\n            if(values.payMode === 'Bank' || values.payMode === 'Mpesa' ){\r\n               if(values.refNo){\r\n                const amountPaid = values.amntPaid;\r\n                //1. get no of transactions\r\n                console.log(values.amntPaid);\r\n                let noOfTrans = credSales.length;\r\n                for (let i = 0; i < noOfTrans; i++) {\r\n                    console.log(credSales[i].balance);\r\n                    if (credSales[i].balance < parseFloat(values.amntPaid)) {\r\n                        values.paid = parseFloat(credSales[i].balance);\r\n                        values.balance = values.paid - credSales[i].balance;\r\n                        values.amntPaid = values.amntPaid - values.paid;\r\n                        console.log(values.balance);\r\n                        console.log(credSales[i].transCode + \" balance is  less than amount paid \" + values.amntPaid);\r\n                        props.updateCreditSaleTransaction(credSales[i].transCode, { paid: parseFloat(values.paid), balance: parseFloat(values.balance), amnt: parseFloat(values.paid), payMode: values.payMode.toString() });\r\n                    } else if (credSales[i].balance === parseFloat(values.amntPaid)) {\r\n                        values.paid = parseFloat(credSales[i].balance);\r\n                        values.balance = parseFloat(values.paid - credSales[i].balance);\r\n                        values.amntPaid = parseFloat(values.amntPaid - values.paid);\r\n                        console.log(values.balance);\r\n                        console.log(credSales[i].transCode + \" balance is equal amount paid \" + values.amntPaid);\r\n                        props.updateCreditSaleTransaction(credSales[i].transCode, { paid: parseFloat(values.paid), balance: parseFloat(values.balance), amnt: parseFloat(values.paid), payMode: values.payMode.toString() });\r\n    \r\n                    } else if (credSales[i].balance > parseFloat(values.amntPaid) && parseFloat(values.amntPaid) !== 0) {\r\n                        values.paid = parseFloat(values.amntPaid);\r\n                        values.balance = parseFloat(credSales[i].balance - values.paid);\r\n                        values.amntPaid = parseFloat(values.amntPaid - values.paid);\r\n                        console.log(values.balance);\r\n                        // console.log(credSales[i].transCode + \" balance is the greater than amount paid \" + values.amntPaid);\r\n                        console.log(values.paid, values.balance, values.paid, values.payMode.toString());\r\n                        props.updateCreditSaleTransaction(credSales[i].transCode, { paid: parseFloat(values.paid), balance: parseFloat(values.balance), amnt: parseFloat(values.paid), payMode: values.payMode.toString() });\r\n                    }\r\n    \r\n                }\r\n                const recieptNo = \"CP-\" + uuid().substring(0, 8).toUpperCase();\r\n                const payInfo = {\r\n                    recieptNo: recieptNo, bal: parseFloat(bal), paid: parseFloat(values.paid), balance: parseFloat(values.balance), amnt: parseFloat(values.paid), payMode: values.payMode.toString()\r\n                }\r\n                const creditInfo={\r\n                    id: recieptNo, amount: parseFloat(amountPaid), refNo: values.refNo, payMode: values.payMode, customerId:selectedCustomer\r\n                }\r\n                props.createCreditPay(creditInfo);\r\n                setPaymentInfo(payInfo);\r\n                onSuccess();\r\n                setOpenCrPopup(true);\r\n    \r\n                resetF();\r\n                // console.log(payInfo);\r\n                // props.updateCreditSaleTransaction(values.transCode, values, onSuccess);\r\n               }else{\r\n                setTittle(\"Please enter a refference Number\");\r\n                openInErrorDialog();\r\n                setErrorDialog({\r\n                    onConfirm: () => { }\r\n                })\r\n               }\r\n            }else if(values.payMode === 'Cash'){\r\n                const amountPaid = values.amntPaid;\r\n                //1. get no of transactions\r\n                // console.log(values.amntPaid);\r\n                let noOfTrans = credSales.length;\r\n                for (let i = 0; i < noOfTrans; i++) {\r\n                    // console.log(credSales[i].balance);\r\n                    if (credSales[i].balance < parseFloat(values.amntPaid)) {\r\n                        values.paid = parseFloat(credSales[i].balance);\r\n                        values.balance = values.paid - credSales[i].balance;\r\n                        values.amntPaid = values.amntPaid - values.paid;\r\n                        // console.log(values.balance);\r\n                        // console.log(credSales[i].transCode + \" balance is  less than amount paid \" + values.amntPaid);\r\n                        props.updateCreditSaleTransaction(credSales[i].transCode, { paid: parseFloat(values.paid), balance: parseFloat(values.balance), amnt: parseFloat(values.paid), payMode: values.payMode.toString() });\r\n                    } else if (credSales[i].balance === parseFloat(values.amntPaid)) {\r\n                        values.paid = parseFloat(credSales[i].balance);\r\n                        values.balance = parseFloat(values.paid - credSales[i].balance);\r\n                        values.amntPaid = parseFloat(values.amntPaid - values.paid);\r\n                        // console.log(values.balance);\r\n                        // console.log(credSales[i].transCode + \" balance is equal amount paid \" + values.amntPaid);\r\n                        props.updateCreditSaleTransaction(credSales[i].transCode, { paid: parseFloat(values.paid), balance: parseFloat(values.balance), amnt: parseFloat(values.paid), payMode: values.payMode.toString() });\r\n    \r\n                    } else if (credSales[i].balance > parseFloat(values.amntPaid) && parseFloat(values.amntPaid) !== 0) {\r\n                        values.paid = parseFloat(values.amntPaid);\r\n                        values.balance = parseFloat(credSales[i].balance - values.paid);\r\n                        values.amntPaid = parseFloat(values.amntPaid - values.paid);\r\n                        // console.log(values.balance);\r\n                        // console.log(credSales[i].transCode + \" balance is the greater than amount paid \" + values.amntPaid);\r\n                        // console.log(values.paid, values.balance, values.paid, values.payMode.toString());\r\n                        props.updateCreditSaleTransaction(credSales[i].transCode, { paid: parseFloat(values.paid), balance: parseFloat(values.balance), amnt: parseFloat(values.paid), payMode: values.payMode.toString() });\r\n                    }\r\n    \r\n                }\r\n                const recieptNo = \"CP-\" + uuid().substring(0, 8).toUpperCase();\r\n                const payInfo = {\r\n                    recieptNo: recieptNo, bal: parseFloat(bal), paid: parseFloat(values.paid), balance: parseFloat(values.balance), amnt: parseFloat(values.paid), payMode: values.payMode.toString()\r\n                }\r\n                // console.log(values.refNo + \" \"+  values.payMode  + \" \"+ selectedCustomer);\r\n                const creditInfo={\r\n                    id: recieptNo, amount: parseFloat(amountPaid), payMode: values.payMode, customerId:selectedCustomer\r\n                }\r\n                props.createCreditPay(creditInfo);\r\n                // console.log(values.refNo + \" \"+  values.payMode);\r\n                setPaymentInfo(payInfo);\r\n                onSuccess();\r\n                setOpenCrPopup(true);\r\n                resetF();\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (selectedCustomer > 0) {\r\n            // setValues({\r\n            //     //...props.addStaffList.find(x => x.id == props.currentId),\r\n            //     ...props.creditSalesList.filter(x => x.customerId == selectedCustomer && x.balance >0),\r\n\r\n\r\n            // })\r\n            let credSale = []\r\n            credSale = props.creditSalesList.filter(x => x.customerId == selectedCustomer && x.balance > 0);\r\n            // console.log(credSale);\r\n            setCredSales(credSale);\r\n            let tBl = (props.creditSalesList.reduce((tBl, currentItem) => tBl = tBl + currentItem.balance, 0))\r\n            setBal(tBl);\r\n            values.customerId = credSale.customerId;\r\n            values.userId = credSale.userId;\r\n            // console.log(values);\r\n            setCustomerData(props.customersList.find(x => x.id == selectedCustomer));\r\n            console.log(props.customersList.find(x => x.id == selectedCustomer))\r\n        }\r\n\r\n\r\n\r\n        setErrors({})\r\n\r\n        props.fetchAllCompanyData();\r\n        props.fetchAllCustomers();\r\n        props.fetchAllProducts();\r\n        props.fetchAllStockIn();\r\n        props.fetchAllTransactions();\r\n        setCompanyData(props.companyDataList);\r\n\r\n    }, [selectedCustomer])\r\n\r\n    const onDelete = id => {\r\n        props.deleteStockIn(id, showToast)\r\n        setConfirmDialog(false)\r\n\r\n    }\r\n\r\n    const openInDialog = () => {\r\n        setConfirmDialog(true);\r\n    }\r\n    const openInErrorDialog = () => {\r\n        setErrorDialog(true)\r\n    }\r\n\r\n    const getCId = e => {\r\n        const target = e.target;\r\n        setCustomerId(target.value);\r\n        console.log(customerId);\r\n    }\r\n\r\n\r\n\r\n\r\n    const openInPopup = () => {\r\n        //setRecordList(record);\r\n        setOpenCrPopup(true);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n\r\n            <section className=\"content\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        {/* left column */}\r\n                        <div className=\"col-md-12\">\r\n                            {/* jquery validation */}\r\n                            <div className=\"card card-primary\">\r\n                                <div className=\"card-header\">\r\n                                    <h4 className=\"card-title\">Pay Credit<small> </small></h4>\r\n                                </div>\r\n                                {/* /.card-header */}\r\n                                {/* form start */}\r\n                                <form id=\"quickForm\" autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n\r\n\r\n\r\n                                    <Autocomplete\r\n                                        //id=\"country-select-demo\"\r\n                                        className=\"form-ctr\"\r\n                                        sx={{ width: 30 }}\r\n\r\n                                        options={props.customersList}\r\n\r\n                                        autoHighlight\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        onSelect={handleInputChange}\r\n                                        //getOptionSelected ={}\r\n\r\n                                        onChange={(_event, newCustomer) => {\r\n\r\n                                            setSelectedCustomer(newCustomer.id);\r\n\r\n                                        }}\r\n\r\n\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                style={{ width: '10%' }}\r\n                                                {...params}\r\n                                                label=\"Choose a Customer\"\r\n                                                name=\"customerId\"\r\n                                                inputProps={{\r\n                                                    ...params.inputProps,\r\n                                                    autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                }}\r\n                                                variant=\"outlined\"\r\n                                                className=\"form-ctr\"\r\n                                                id=\"input-with-icon-textfield\"\r\n                                                value={values.customerId = selectedCustomer}\r\n                                                onChange={handleInputChange}\r\n                                                {...(errors.customerId && { error: true, helperText: errors.customerId })}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n\r\n\r\n\r\n\r\n\r\n                                    <TextField className=\"form-ctr\" label=\"Balance\" name=\"balance\" value={values.balance = bal}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n\r\n                                        {... (errors.balance && { error: true, helperText: errors.balance })}\r\n                                    />\r\n                                    <TextField className=\"form-ctr\" label=\"Amount To Pay\" name=\"amntPaid\" value={values.amntPaid}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n\r\n                                        {... (errors.amntPaid && { error: true, helperText: errors.amntPaid })}\r\n                                    />\r\n                                    <FormControl className={classes.formControl}\r\n                                        {...(errors.payMode && { error: true })}\r\n                                    >\r\n                                        <InputLabel >Payment Mode</InputLabel>\r\n                                        <Select\r\n                                            className=\"form-ctr\"\r\n                                            label=\"Select Payment Mode\"\r\n                                            name=\"payMode\"\r\n                                            value={values.payMode}\r\n                                            onChange={handleInputChange}\r\n                                            variant=\"outlined\"\r\n\r\n\r\n                                        >\r\n                                            {/* <MenuItem value=\"\">Select Category</MenuItem>\r\n                                            {\r\n                                                // props.categoryList.map((record, index) => {\r\n                                                //     return (\r\n                                                //         <MenuItem value={record.id}>{record.name}</MenuItem>\r\n\r\n                                                //     )\r\n                                                // })\r\n\r\n                                            } */}\r\n                                            <MenuItem value={\"Mpesa\"}>Mpesa</MenuItem>\r\n                                            <MenuItem value={\"Cash\"}>Cash</MenuItem>\r\n                                            <MenuItem value={\"Bank\"}>Bank</MenuItem>\r\n                                        </Select>\r\n                                        {errors.payMode && <FormHelperText>{errors.payMode}</FormHelperText>}\r\n                                    </FormControl>\r\n\r\n                                    <TextField className=\"form-ctr\" label=\"RefrenceNo/MpesaRecieptNo\" name=\"refNo\" value={values.refNo}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n                                        {... (errors.refNo&& { error: true, helperText: errors.refNo})}\r\n                                    />\r\n\r\n\r\n\r\n                                    <br />\r\n                                    <br />\r\n                                    {/* /.card-body */}\r\n                                    <div className=\"card-footer\">\r\n                                        <div>\r\n                                            <button variant=\"contained\" type=\"submit\" className=\"btn btn-primary\"  >Pay</button>\r\n                                            <button variant=\"contained\"\r\n                                                className=\"btn btn-secondary\"\r\n                                                onClick={resetF} style={{ marginLeft: 3 }}>Reset</button>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </form>\r\n\r\n\r\n\r\n                            </div>\r\n                            {/* /.card */}\r\n                        </div>\r\n                        {/*/.col (left) */}\r\n                        {/* right column */}\r\n                        <div className=\"col-md-6\">\r\n                        </div>\r\n                        {/*/.col (right) */}\r\n                    </div>\r\n                    {/* /.row */}\r\n                </div>{/* /.container-fluid */}\r\n            </section>\r\n\r\n            <ConfirmDialog\r\n                title=\"Are you sure you want to remove this product from the cart?\"\r\n                // subTitle=\"This operation can't be reversed\"\r\n                confirmDialog={confirmDialog}\r\n                setConfirmDialog={setConfirmDialog}\r\n            />\r\n\r\n            <ErrorDialog\r\n                title={tittle}\r\n                // subTitle=\"This operation can't be reversed\"\r\n                errorDialog={errorDialog}\r\n                setErrorDialog={setErrorDialog}\r\n            />\r\n\r\n            <CrPopup\r\n                title=\"Reciept\"\r\n                openCrPopup={openCrPopup}\r\n                setOpenCrPopup={setOpenCrPopup}\r\n            >\r\n                <CreditReciept\r\n                    {...({ customerData, companyData, paymentInfo, setOpenCrPopup })}\r\n                //addorEdit={addorEdit}\r\n                />\r\n            </CrPopup>\r\n        </>\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    addStaffList: state.addStaff.list,\r\n    storesList: state.stores.list,\r\n    userLevelList: state.userLevel.list,\r\n    suppliersList: state.suppliers.list,\r\n    productsList: state.products.list,\r\n    storeProductsList: state.storeProducts.list,\r\n    stockInList: state.stockIns.list,\r\n    storeIdNProductIdList: state.storeProducts.list,\r\n    creditSalesList: state.creditSale.list,\r\n    companyDataList: state.companyData.list,\r\n    customersList: state.customers.list,\r\n    payCreditList: state.creditPay.list\r\n})\r\n\r\n\r\n\r\nconst mapActionToProps = {\r\n    createStockIns: stockInActions.createStockIn,\r\n    createStoreProduct: storeProductActions.createStoreProduct,\r\n    updateStockIn: stockInActions.updateStockIn,\r\n    updateStoreProducts: storeProductActions.updateStoreProducts,\r\n    fetchAllStores: storeActions.fetchAllStore,\r\n    fetchAllUserLevel: userLevelActions.fetchAllUserLevel,\r\n    fetchAllSuppliers: supplierActions.fetchAllSupplier,\r\n    updateStockInHand: productActions.updateStockInHand,\r\n    fetchAllProducts: productActions.fetchAllProduct,\r\n    fetchAllStoreProduct: storeProductActions.fetchAllStoreProducts,\r\n    fetchAllStockIn: stockInActions.fetchAllStockIn,\r\n    fetchByStoreIdNProductId: storeProductActions.fetchByStoreIdNProductId,\r\n    updateProducts: productActions.updateProduct,\r\n    createCreditSale: creditSalesActions.createCreditSaleTransaction,\r\n    createCreditSaleDetails: creditSalesActions.createCreditSaleTransactionDetail,\r\n    fetchAllTransactions: creditSalesActions.fetchAllTransactions,\r\n    fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n    fetchAllCustomers: customerActions.fetchAllCustomer,\r\n    updateCreditSaleTransaction: creditSalesActions.updateCreditSaleTransaction,\r\n    createCreditPay: payCreditActions.createCreditPay,\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PayCredit));\r\n\r\n"],"sourceRoot":""}