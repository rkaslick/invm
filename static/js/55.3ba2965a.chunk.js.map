{"version":3,"sources":["views/Components/Forms/Expenses/AddExpenses/AddNewExpensesForm.js"],"names":["initialFieldValues","name","description","amount","mapActionToProps","createExpenses","EActions","fetchAllExpenses","DeleteExpenses","updateExpenses","fetchAllExpenseTypes","ETActions","connect","state","expensesList","expenses","list","expenseTypeList","expenseTypes","withStyles","theme","root","margin","spacing","minWidth","formControl","smMargin","_ref","classes","props","_objectWithoutProperties","_excluded","addToast","useToasts","validate","fieldValues","arguments","length","undefined","values","temp","_objectSpread","errors","setErrors","Object","every","x","_useForm","useForm","setCurrentId","_useForm2","_slicedToArray","setValues","handleInputChange","resetForm","useEffect","currentId","find","id","_jsx","className","children","_jsxs","autoComplete","noValidate","onSubmit","e","preventDefault","onSuccess","appearance","parseFloat","openPopup","setOpenPopup","FormControl","error","InputLabel","Select","label","value","onChange","MenuItem","map","record","index","FormHelperText","TextField","helperText","type","variant","onClick","style","marginLeft"],"mappings":"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","file":"static/js/55.3ba2965a.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { FormControl, Grid, TextField, withStyles, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\r\nimport { useForm } from \"../../useForm\";\r\nimport { connect } from \"react-redux\";\r\n//import * as actions from \"../../../../../actions/Staff/addStaff\";\r\nimport * as EActions from \"../../../../../actions/Expenses/expenses\";\r\nimport * as ETActions from \"../../../../../actions/ExpenseTypes/expenseTypes\";\r\n//import * as userLevelActions from \"../../../../../actions/UserLevel/userLevel\";\r\nimport { ToastConsumer, useToasts } from \"react-toast-notifications\";\r\nimport \"../../staffForm.css\";\r\nimport { RestoreSharp } from \"@material-ui/icons\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n})\r\n\r\nconst initialFieldValues = {\r\n\r\n    name: '',\r\n    description: '',\r\n    amount: '',\r\n    // phone: '',\r\n    // location: '',\r\n    // // email: '',\r\n    // // address: '',\r\n    // companyDataId: '',\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst AddNewExpensesForm = ({ classes, ...props }) => {\r\n\r\n    //toast message\r\n    const { addToast } = useToasts()\r\n\r\n    //realtime validation for the whole form controls\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('name' in fieldValues) {\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required\"\r\n            // addToast(\"User data saved succeffuly\", {appearance:'success'})\r\n            // console.log(\"Tast has beeen displayed\")\r\n        }\r\n\r\n\r\n        if ('description' in fieldValues) {\r\n            temp.description = fieldValues.description ? \"\" : \"This field is required\"\r\n        }\r\n        if ('amount' in fieldValues) {\r\n            temp.amount = fieldValues.amount ? \"\" : \"This field is required\"\r\n        }\r\n\r\n\r\n\r\n        // if ('location' in fieldValues) {\r\n        //     temp.location = fieldValues.location ? \"\" : \"This field is required\"\r\n        // }\r\n\r\n\r\n        // if ('email' in fieldValues) {\r\n        //     if (temp.email != \" \") {\r\n        //         temp.email = (/^&|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid\"\r\n        //     }\r\n        // }\r\n        // if ('phone' in fieldValues) {\r\n        //     temp.phone = fieldValues.phone ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('companyDataId' in fieldValues) {\r\n        //     temp.companyDataId = fieldValues.companyDataId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('userLevelId' in fieldValues) {\r\n        //     temp.userLevelId = fieldValues.userLevelId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('storeId' in fieldValues) {\r\n        //     temp.storeId = fieldValues.storeId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('uName' in fieldValues) {\r\n        //     temp.uName = fieldValues.uName ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('password' in fieldValues) {\r\n        //     temp.password = fieldValues.password ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('cPswd' in fieldValues) {\r\n        //     temp.cPswd = fieldValues.cPswd ? \"\" : \"This field is required\"\r\n\r\n        // }\r\n\r\n\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const [\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    ] = useForm(initialFieldValues, validate, props.setCurrentId);\r\n\r\n    const showToast = () => {\r\n        addToast(\"Expenses  saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"Expenses  saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"Expenses  saved succeffuly\", { appearance: 'success' })\r\n        props.fetchAllExpenses();\r\n    }\r\n\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n\r\n        if (validate()) {\r\n\r\n            const onSuccess = () => {\r\n                showToast();\r\n                resetForm();\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            if (props.currentId == 0) {\r\n\r\n                //using toast notification\r\n\r\n                props.createExpenses({name:values.name, description:values.description,amount:parseFloat(values.amount)}, onSuccess)\r\n                //addorEdit(values, onSuccess)\r\n\r\n            }\r\n            else {\r\n                //using windows alert notification\r\n                //props.updateDCandidate(props.currentId, values, () => {window.alert('updated')})\r\n                //using toast notification\r\n                props.updateExpenses(props.currentId, {name:values.name, description:values.description,amount:parseFloat(values.amount)}, onSuccess)\r\n\r\n\r\n\r\n            }\r\n\r\n            if (props.openPopup == true) {\r\n                props.setOpenPopup(false)\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (props.currentId != 0)\r\n            setValues({\r\n                ...props.expensesList.find(x => x.id == props.currentId)\r\n            })\r\n        setErrors({})\r\n        props.fetchAllExpenses();\r\n        props.fetchAllExpenseTypes();\r\n        // props.fetchAllUserLevel();\r\n\r\n\r\n\r\n    }, [props.currentId])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n        <section className=\"content\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    {/* left column */}\r\n                    <div className=\"col-md-12\">\r\n                        {/* jquery validation */}\r\n                        <div className=\"card card-primary\">\r\n                            <div className=\"card-header\">\r\n                                <h4 className=\"card-title\">Add Expenses <small> </small></h4>\r\n                            </div>\r\n                            {/* /.card-header */}\r\n                            {/* form start */}\r\n                            <form id=\"quickForm\" autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n                                <FormControl className={classes.formControl}\r\n                                    {...(errors.name && { error: true })}\r\n                                >\r\n                                    <InputLabel >Expense</InputLabel>\r\n                                    <Select\r\n                                        className=\"form-ctr\"\r\n                                        name=\"name\"\r\n                                        label=\"Expense\"\r\n                                        value={values.name}\r\n                                        onChange={handleInputChange}\r\n\r\n                                    >\r\n                                        <MenuItem value=\"\">Select Expense</MenuItem>\r\n                                        {\r\n                                            props. expenseTypeList.map((record, index) => {\r\n                                                return (\r\n                                                    <MenuItem value={record.name}>{record.name}</MenuItem>\r\n\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Select>\r\n                                    {errors.name && <FormHelperText>{errors.name}</FormHelperText>}\r\n                                </FormControl>\r\n\r\n                                <TextField className=\"form-ctr\" name=\"description\" label=\"Description\" value={values.description}\r\n                                    onChange={handleInputChange}\r\n\r\n\r\n                                    {... (errors.description && { error: true, helperText: errors.description })}\r\n                                />\r\n\r\n                                <TextField className=\"form-ctr\" name=\"amount\" label=\"Amount\" value={values.amount}\r\n                                    onChange={handleInputChange}\r\n\r\n\r\n                                    {... (errors.amount && { error: true, helperText: errors.amount })}\r\n                                />\r\n\r\n\r\n                                {/* <TextField className=\"form-ctr\" name=\"phone\" label=\"Categ Phone No\" value={values.phone}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {... (errors.phone && { error: true, helperText: errors.phone })}\r\n                                /> */}\r\n\r\n                                {/* <TextField\r\n                                    className=\"form-ctr\"\r\n                                    name=\"email\"\r\n                                    label=\"Email\" type=\"email\" value={values.email}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {...(errors.email && { error: true, helperText: errors.email })}\r\n                                /> */}\r\n\r\n                                {/* <TextField className=\"form-ctr\" name=\"location\" label=\"location\" value={values.location}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {... (errors.location && { error: true, helperText: errors.location })}\r\n                                />\r\n\r\n                               \r\n                             \r\n\r\n                             <FormControl className={classes.formControl}\r\n                                    {...(errors.userLevelId && { error: true })}\r\n                                >\r\n                                    <InputLabel >Company</InputLabel>\r\n                                    <Select\r\n                                        className=\"form-ctr\"\r\n                                        name=\"companyDataId\"\r\n                                        label=\"Company\"\r\n                                        value={values.companyDataId}\r\n                                        onChange={handleInputChange}\r\n\r\n                                    > */}\r\n                                {/* <MenuItem value=\"\">Select Company</MenuItem>\r\n                                        <MenuItem value=\"1\">{1}</MenuItem>\r\n                                        {/* {\r\n                                            props.userLevelList.map((record, index) => {\r\n                                                return (\r\n                                                    <MenuItem value={record.id}>{record.level}</MenuItem>\r\n\r\n                                                )\r\n                                            })\r\n                                        } */}\r\n                                {/* </Select>\r\n                                    {errors.companyDataId && <FormHelperText>{errors.companyDataId}</FormHelperText>}\r\n                                </FormControl>   */}\r\n\r\n\r\n\r\n\r\n                                {/* /.card-body */}\r\n                                <div className=\"card-footer\">\r\n                                    <div>\r\n                                        <button type=\"submit\" className=\"btn btn-primary\" >Save</button>\r\n                                        <button variant=\"contained\"\r\n                                            className=\"btn btn-secondary\"\r\n                                            onClick={resetForm} style={{ marginLeft: 3 }}>Reset</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </form>\r\n\r\n                        </div>\r\n                        {/* /.card */}\r\n                    </div>\r\n                    {/*/.col (left) */}\r\n                    {/* right column */}\r\n                    <div className=\"col-md-6\">\r\n                    </div>\r\n                    {/*/.col (right) */}\r\n                </div>\r\n                {/* /.row */}\r\n            </div>{/* /.container-fluid */}\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n    expensesList: state.expenses.list,\r\n    expenseTypeList: state.expenseTypes.list,\r\n})\r\n\r\n\r\n\r\nconst mapActionToProps = {\r\n    createExpenses: EActions.createExpenses,\r\n    fetchAllExpenses: EActions.fetchAllExpenses,\r\n    DeleteExpenses: EActions.DeleteExpenses,\r\n    updateExpenses: EActions.updateExpenses,\r\n    fetchAllExpenseTypes: ETActions.fetchAllExpenseTypes,\r\n\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AddNewExpensesForm));"],"sourceRoot":""}