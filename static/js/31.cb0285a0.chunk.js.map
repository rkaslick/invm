{"version":3,"sources":["views/Components/Forms/StockIn/StockIn/addStockIn.js","../node_modules/@material-ui/core/esm/ButtonGroup/ButtonGroup.js","../node_modules/@material-ui/icons/PeopleOutlineTwoTone.js","../node_modules/@material-ui/icons/Delete.js","views/Components/Forms/StockIn/StockIn/AddStockInForm.js"],"names":["mapActionToProps","fetchAllStockIn","stockInActions","deleteStockIn","fetchAllProducts","productActions","fetchAllStoreProducts","storeProductActions","fetchAllSuppliers","supplierActions","connect","state","stockInList","stockIns","list","productsList","products","storeProductsList","storeProducts","suppliersList","suppliers","withStyles","theme","root","fontSize","paper","margin","spacing","padding","grid","paddingLeft","_ref","classes","props","_objectWithoutProperties","_excluded","addToast","useToasts","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","confirmDialog","setConfirmDialog","_useState5","_useState6","currentId","setCurrentId","useEffect","showToast","appearance","getSupplierName","supplierId","supplier","_objectSpread","find","x","id","console","log","name","_useState7","key","direction","_useState8","sortConfig","setSortConfig","handleSort","sortedList","sort","a","b","localeCompare","_jsxs","_Fragment","children","_jsx","PageHeader","title","icon","PeopleOutlineTwoToneIcon","Paper","className","elevation","AddStockInForm","onClick","map","record","index","dateIn","productId","quantity","ButtonGroup","variant","Button","DeleteIcon","color","onConfirm","parseInt","ConfirmDialog","subTitle","styles","React","ref","_props$color","_props$component","component","Component","_props$disabled","disabled","_props$disableElevati","disableElevation","_props$disableFocusRi","disableFocusRipple","_props$disableRipple","disableRipple","_props$fullWidth","fullWidth","_props$orientation","orientation","_props$size","size","_props$variant","other","buttonClassName","clsx","grouped","concat","capitalize","_extends","role","contained","vertical","child","display","borderRadius","shape","boxShadow","shadows","width","flexDirection","minWidth","groupedHorizontal","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","groupedVertical","groupedText","groupedTextHorizontal","borderRight","palette","type","groupedTextVertical","borderBottom","groupedTextPrimary","borderColor","alpha","primary","main","groupedTextSecondary","secondary","groupedOutlined","groupedOutlinedHorizontal","marginLeft","borderRightColor","groupedOutlinedVertical","marginTop","borderBottomColor","groupedOutlinedPrimary","groupedOutlinedSecondary","groupedContained","groupedContainedHorizontal","grey","action","groupedContainedVertical","groupedContainedPrimary","dark","groupedContainedSecondary","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","_default","createElement","Fragment","cx","cy","r","opacity","d","initialFieldValues","buyingPrice","sellingPrice","customPrice","reorderLevel","stockInHand","mainstorePrice","category","description","userId","window","toString","storeId","createStockIns","createStoreProduct","updateStockIn","updateStoreProducts","fetchAllStores","storeActions","fetchAllUserLevel","userLevelActions","updateStockInHand","fetchAllStoreProduct","fetchByStoreIdNProductId","updateProducts","addStaffList","addStaff","storesList","stores","userLevelList","userLevel","storeIdNProductIdList","formControl","smMargin","setCurrentProductId","setProductId","setValue","selectedSupplier","setSelectedSupplier","_useState9","_useState10","_useState11","_useState12","setSHand","_useState13","_useState14","setQuant","_useState15","_useState16","stock","_useState17","_useState18","selectedProduct","setSelectedProduct","_useState19","_useState20","fProducts","setFProducts","validate","fieldValues","arguments","length","undefined","values","temp","errors","setErrors","every","_useForm","useForm","_useForm2","setValues","handleInputChange","resetForm","getCId","autoComplete","noValidate","onSubmit","e","preventDefault","onSuccess","clearField","currentProductId","openPopup","setOpenPopup","Grid","container","item","xs","FormControl","error","InputLabel","Select","label","onChange","MenuItem","FormHelperText","Autocomplete","sx","options","autoHighlight","getOptionLabel","option","_event","newSupplier","renderInput","params","TextField","style","inputProps","helperText","onSelect","newProduct","_toConsumableArray","filter","InputLabelProps","startAdornment","InputAdornment","position","AccountCircle","on"],"mappings":"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","file":"static/js/31.cb0285a0.chunk.js","sourcesContent":["import { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n//import * as actions from \"../../../../../actions/Staff/addStaff\";\r\n\r\nimport * as productActions from \"../../../../../actions/Products/products\";\r\nimport * as storeProductActions from \"../../../../../actions/StoreProducts/storeProducts\";\r\nimport * as supplierActions from \"../../../../../actions/Suppliers/suppliers\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\nimport * as stockInActions from \"../../../../../actions/StockIn/stockIn\";\r\nimport AddStockInForm from \"./AddStockInForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../../PageHeader\";\r\n//import AddSuppliersIcon from '@material-ui/icons/add';\r\n//import AddShoppingCartTwoToneIcon from '@material-ui/icons/';\r\nimport ConfirmDialog from \"../../../controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        \"& .MuiTableCell-head\": {\r\n            fontSize: \"0.95rem\"\r\n        }\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(-8.9),\r\n        padding: theme.spacing(6)\r\n    },\r\n\r\n    grid: {\r\n        paddingLeft: theme.spacing(2)\r\n    }\r\n})\r\n\r\n\r\n\r\nconst AddStockIn = ({ classes, ...props }) => {\r\n    //Toast message\r\n    const { addToast } = useToasts()\r\n    const [currentProductId, setCurrentProductId] = useState(0)\r\n    const [confirmDialog, setConfirmDialog] = useState(false)\r\n    const [currentId, setCurrentId] = useState(0)\r\n    useEffect(() => {\r\n        props.fetchAllStockIn()\r\n        props.fetchAllStoreProducts()\r\n        props.fetchAllSuppliers();\r\n        // props.fetchAllStores()\r\n    }, [])\r\n\r\n    const showToast = () => {\r\n        addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n        addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n        addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n        props.fetchAllStockIn()\r\n        \r\n        props.fetchAllProducts()\r\n    }\r\n    const onDelete = id => {\r\n        props.deleteStockIn(parseInt(id), showToast)\r\n        setConfirmDialog(false)\r\n        console.log(id);\r\n\r\n    }\r\n\r\n    const openInDialog = () => {\r\n        setConfirmDialog(true)\r\n\r\n\r\n\r\n    }\r\n\r\n    // Function to get supplier name based on supplier ID\r\n    const getSupplierName = (supplierId) => {\r\n    \r\n    var supplier = {...props.suppliersList.find(x => x.id == supplierId)}\r\n        console.log(supplier);\r\n            return supplier.name;\r\n    };\r\n\r\n    // Function to get product name based on product ID\r\n    const getProductName = (productId) => {\r\n        \r\n       var product = {...props.productsList.find(x => x.productId == productId)}\r\n    // setValues({\r\n    //     ...props.productsList.find(x => x.productId == props.currentProductId)\r\n        \r\n    // })\r\n    // console.log(product.name);\r\n        return product.name;\r\n    };\r\n\r\n    const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' });\r\n\r\n    const handleSort = (key) => {\r\n        let direction = 'ascending';\r\n        if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n            direction = 'descending';\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    const sortedList = props.stockInList.sort((a, b) => {\r\n        if (sortConfig.key && a[sortConfig.key] && b[sortConfig.key]) {\r\n            if (sortConfig.direction === 'ascending') {\r\n                return a[sortConfig.key].localeCompare(b[sortConfig.key]);\r\n            } else {\r\n                return b[sortConfig.key].localeCompare(a[sortConfig.key]);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n    return (\r\n        <>\r\n            <PageHeader\r\n                title=\"StockIn\"\r\n                //subTitle=\"Form design with validation\"\r\n                icon={<PeopleOutlineTwoToneIcon fontSize=\"large\" />}\r\n            />,\r\n            <Paper className={classes.paper} elevation={3}>\r\n\r\n\r\n                <AddStockInForm {...({ currentId, setCurrentId })} />\r\n\r\n\r\n                <div className={classes.grid}>\r\n                <table className=\"table table-bordered table-hover table-sm table-striped\">\r\n            <thead className=\"thead-dark\">\r\n                <tr>\r\n                    <th onClick={() => handleSort('dateIn')}>Date In</th>\r\n                    <th onClick={() => handleSort('productId')}>Product Id</th>\r\n                    <th >Supplier</th>\r\n                    <th >Product Name</th>\r\n                    <th onClick={() => handleSort('quantity')}>Quantity</th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {sortedList.map((record, index) => {\r\n                    return (\r\n                        <tr key={index}>\r\n                            <td>{record.dateIn}</td>\r\n                            <td>{record.productId}</td>\r\n                            <td>{getSupplierName(record.supplierId)}</td>\r\n                            <td>{getProductName(record.productId)}</td>\r\n                            <td>{record.quantity}</td>\r\n                            <td>\r\n                                <ButtonGroup variant=\"text\">\r\n                                    <Button>\r\n                                        <DeleteIcon color=\"secondary\"\r\n                                            onClick={() => {\r\n                                                openInDialog();\r\n                                                setConfirmDialog({\r\n                                                    onConfirm: () => { onDelete(record.id) }\r\n                                                });\r\n                                            }}\r\n                                        />\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n                </div>\r\n\r\n            </Paper>\r\n\r\n            <ConfirmDialog\r\n                title=\"Are you sure you want to delete this record?\"\r\n                subTitle=\"This operation can't be reversed\"\r\n                confirmDialog={confirmDialog}\r\n                setConfirmDialog={setConfirmDialog}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n    stockInList: state.stockIns.list,\r\n    productsList: state.products.list,\r\n    storeProductsList: state.storeProducts.list,\r\n    suppliersList: state.suppliers.list,\r\n\r\n\r\n})\r\n\r\nconst mapActionToProps = {\r\n    fetchAllStockIn: stockInActions.fetchAllStockIn,\r\n    deleteStockIn: stockInActions.DeleteStockIn,\r\n    fetchAllProducts: productActions.fetchAllProduct,\r\n    fetchAllStoreProducts: storeProductActions.fetchAllStoreProducts,\r\n    fetchAllSuppliers: supplierActions.fetchAllSupplier\r\n\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AddStockIn));\r\n\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport { alpha } from '../styles/colorManipulator';\nimport withStyles from '../styles/withStyles';\nimport Button from '../Button'; // Force a side effect so we don't have any override priority issue.\n// eslint-disable-next-line no-unused-expressions\n\nButton.styles;\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"`. */\n    contained: {\n      boxShadow: theme.shadows[2]\n    },\n\n    /* Styles applied to the root element if `disableElevation={true}`. */\n    disableElevation: {\n      boxShadow: 'none'\n    },\n\n    /* Pseudo-class applied to child elements if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: {\n      flexDirection: 'column'\n    },\n\n    /* Styles applied to the children. */\n    grouped: {\n      minWidth: 40\n    },\n\n    /* Styles applied to the children if `orientation=\"horizontal\"`. */\n    groupedHorizontal: {\n      '&:not(:first-child)': {\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0\n      },\n      '&:not(:last-child)': {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0\n      }\n    },\n\n    /* Styles applied to the children if `orientation=\"vertical\"`. */\n    groupedVertical: {\n      '&:not(:first-child)': {\n        borderTopRightRadius: 0,\n        borderTopLeftRadius: 0\n      },\n      '&:not(:last-child)': {\n        borderBottomRightRadius: 0,\n        borderBottomLeftRadius: 0\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"text\"`. */\n    groupedText: {},\n\n    /* Styles applied to the children if `variant=\"text\"` and `orientation=\"horizontal\"`. */\n    groupedTextHorizontal: {\n      '&:not(:last-child)': {\n        borderRight: \"1px solid \".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)')\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"text\"` and `orientation=\"vertical\"`. */\n    groupedTextVertical: {\n      '&:not(:last-child)': {\n        borderBottom: \"1px solid \".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)')\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"text\"` and `color=\"primary\"`. */\n    groupedTextPrimary: {\n      '&:not(:last-child)': {\n        borderColor: alpha(theme.palette.primary.main, 0.5)\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"text\"` and `color=\"secondary\"`. */\n    groupedTextSecondary: {\n      '&:not(:last-child)': {\n        borderColor: alpha(theme.palette.secondary.main, 0.5)\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"outlined\"`. */\n    groupedOutlined: {},\n\n    /* Styles applied to the children if `variant=\"outlined\"` and `orientation=\"horizontal\"`. */\n    groupedOutlinedHorizontal: {\n      '&:not(:first-child)': {\n        marginLeft: -1\n      },\n      '&:not(:last-child)': {\n        borderRightColor: 'transparent'\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"outlined\"` and `orientation=\"vertical\"`. */\n    groupedOutlinedVertical: {\n      '&:not(:first-child)': {\n        marginTop: -1\n      },\n      '&:not(:last-child)': {\n        borderBottomColor: 'transparent'\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"outlined\"` and `color=\"primary\"`. */\n    groupedOutlinedPrimary: {\n      '&:hover': {\n        borderColor: theme.palette.primary.main\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"outlined\"` and `color=\"secondary\"`. */\n    groupedOutlinedSecondary: {\n      '&:hover': {\n        borderColor: theme.palette.secondary.main\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"contained\"`. */\n    groupedContained: {\n      boxShadow: 'none'\n    },\n\n    /* Styles applied to the children if `variant=\"contained\"` and `orientation=\"horizontal\"`. */\n    groupedContainedHorizontal: {\n      '&:not(:last-child)': {\n        borderRight: \"1px solid \".concat(theme.palette.grey[400]),\n        '&$disabled': {\n          borderRight: \"1px solid \".concat(theme.palette.action.disabled)\n        }\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"contained\"` and `orientation=\"vertical\"`. */\n    groupedContainedVertical: {\n      '&:not(:last-child)': {\n        borderBottom: \"1px solid \".concat(theme.palette.grey[400]),\n        '&$disabled': {\n          borderBottom: \"1px solid \".concat(theme.palette.action.disabled)\n        }\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"contained\"` and `color=\"primary\"`. */\n    groupedContainedPrimary: {\n      '&:not(:last-child)': {\n        borderColor: theme.palette.primary.dark\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"contained\"` and `color=\"secondary\"`. */\n    groupedContainedSecondary: {\n      '&:not(:last-child)': {\n        borderColor: theme.palette.secondary.dark\n      }\n    }\n  };\n};\nvar ButtonGroup = /*#__PURE__*/React.forwardRef(function ButtonGroup(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableElevati = props.disableElevation,\n      disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      _props$disableRipple = props.disableRipple,\n      disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'outlined' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"disableElevation\", \"disableFocusRipple\", \"disableRipple\", \"fullWidth\", \"orientation\", \"size\", \"variant\"]);\n\n  var buttonClassName = clsx(classes.grouped, classes[\"grouped\".concat(capitalize(orientation))], classes[\"grouped\".concat(capitalize(variant))], classes[\"grouped\".concat(capitalize(variant)).concat(capitalize(orientation))], classes[\"grouped\".concat(capitalize(variant)).concat(color !== 'default' ? capitalize(color) : '')], disabled && classes.disabled);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"group\",\n    className: clsx(classes.root, className, fullWidth && classes.fullWidth, disableElevation && classes.disableElevation, variant === 'contained' && classes.contained, orientation === 'vertical' && classes.vertical),\n    ref: ref\n  }, other), React.Children.map(children, function (child) {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The ButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(buttonClassName, child.props.className),\n      color: child.props.color || color,\n      disabled: child.props.disabled || disabled,\n      disableElevation: child.props.disableElevation || disableElevation,\n      disableFocusRipple: disableFocusRipple,\n      disableRipple: disableRipple,\n      fullWidth: fullWidth,\n      size: child.props.size || size,\n      variant: child.props.variant || variant\n    });\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ButtonGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the button group.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the buttons will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, no elevation is used.\n   */\n  disableElevation: PropTypes.bool,\n\n  /**\n   * If `true`, the button keyboard focus ripple will be disabled.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the button ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the buttons will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The group orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['contained', 'outlined', 'text'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiButtonGroup'\n})(ButtonGroup);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"circle\", {\n  cx: \"9\",\n  cy: \"8.5\",\n  r: \"1.5\",\n  opacity: \".3\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M4.34 17h9.32c-.84-.58-2.87-1.25-4.66-1.25s-3.82.67-4.66 1.25z\",\n  opacity: \".3\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M9 12c1.93 0 3.5-1.57 3.5-3.5S10.93 5 9 5 5.5 6.57 5.5 8.5 7.07 12 9 12zm0-5c.83 0 1.5.67 1.5 1.5S9.83 10 9 10s-1.5-.67-1.5-1.5S8.17 7 9 7zm0 6.75c-2.34 0-7 1.17-7 3.5V19h14v-1.75c0-2.33-4.66-3.5-7-3.5zM4.34 17c.84-.58 2.87-1.25 4.66-1.25s3.82.67 4.66 1.25H4.34zm11.7-3.19c1.16.84 1.96 1.96 1.96 3.44V19h4v-1.75c0-2.02-3.5-3.17-5.96-3.44zM15 12c1.93 0 3.5-1.57 3.5-3.5S16.93 5 15 5c-.54 0-1.04.13-1.5.35.63.89 1 1.98 1 3.15s-.37 2.26-1 3.15c.46.22.96.35 1.5.35z\"\n})), 'PeopleOutlineTwoTone');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { FormControl, Grid, TextField, withStyles, InputLabel, Select, MenuItem, Button, FormHelperText, Checkbox, FormControlLabel, FormGroup } from \"@material-ui/core\";\r\nimport { useForm } from \"../../useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../../../actions/Staff/addStaff\";\r\nimport * as storeActions from \"../../../../../actions/Store/stores\";\r\nimport * as userLevelActions from \"../../../../../actions/UserLevel/userLevel\";\r\nimport * as supplierActions from \"../../../../../actions/Suppliers/suppliers\";\r\nimport * as productActions from \"../../../../../actions/Products/products\";\r\nimport * as storeProductActions from \"../../../../../actions/StoreProducts/storeProducts\";\r\nimport * as stockInActions from \"../../../../../actions/StockIn/stockIn\";\r\n\r\nimport { ToastConsumer, useToasts } from \"react-toast-notifications\";\r\nimport \"../../staffForm.css\";\r\nimport { string } from \"prop-types\";\r\nimport { RestoreSharp } from \"@material-ui/icons\";\r\nimport { createSelector, createStructuredSelector } from 'reselect';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { parse } from \"date-fns\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n})\r\n\r\nconst initialFieldValues = {\r\n\r\n    productId: '',\r\n    supplierId: '',\r\n    name: '',\r\n    quantity: '',\r\n    buyingPrice: '',\r\n    sellingPrice: '',\r\n    customPrice: true,\r\n    reorderLevel: '',\r\n    stockInHand: '',\r\n    mainstorePrice: true,\r\n    category: '',\r\n    size: '',\r\n    description: '',\r\n    userId: window.userId.toString(),\r\n\r\n    type: 'Normal',\r\n    storeId: ''\r\n\r\n}\r\n\r\n// //selectors\r\n// const storeList = state => state.stores.list;\r\n// const addStaff = state => state.addStaff.list;\r\n\r\n// //selectore function\r\n// export const selectStores = createSelector(\r\n//     storeList,\r\n// );\r\n// export const selectStaff = createSelector(\r\n//     addStaff,\r\n// );\r\n\r\n\r\n\r\n\r\nconst AddStockInForm = ({ classes, ...props }) => {\r\n    //const [addorEdit] = props;\r\n    //const [openPopup, setOpenPopup] = useState(false)\r\n    //toast message\r\n    const { addToast } = useToasts();\r\n    const [currentProductId, setCurrentProductId] = useState(0);\r\n    const [productId, setProductId] = useState(0);\r\n    const [value, setValue] = useState({});\r\n    const [selectedSupplier, setSelectedSupplier] = useState(null);\r\n    const [sId, setSId] = useState(0);\r\n    const [sHand, setSHand] = useState(0);\r\n    const [quant, setQuant] = useState(0);\r\n    const [stock, setStock] = useState(0);\r\n    const [selectedProduct, setSelectedProduct] = useState(0);\r\n    const [fProducts, setFProducts] = useState([]);\r\n    //validation for the whole form when you hit the submit value\r\n    /* const validate =() =>{\r\n        let temp ={}\r\n        temp.fullName = values.fullName?\"\":\"This field is required\"\r\n        temp.mobile = values.mobile?\"\":\"This field is required\"\r\n        temp.bloodGroup = values.bloodGroup?\"\":\"This field is required\"\r\n\r\n        temp.email = (/^&|.+@.+..+/ ).test(values.email)?\"\" : \"email is not valid\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x=> x==\"\")\r\n    }\r\n */\r\n    //const lStores = [];\r\n    //realtime validation for the whole form controls\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('productId' in fieldValues) {\r\n            temp.productId = fieldValues.productId ? \"\" : \"This field is required\"\r\n\r\n        }\r\n\r\n\r\n        if ('supplierId' in fieldValues) {\r\n            temp.supplierId = fieldValues.supplierId ? \"\" : \"This field is required\";\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        if ('quantity' in fieldValues) {\r\n            temp.quantity = fieldValues.quantity ? \"\" : \"This field is required\";\r\n            setQuant(fieldValues.quantity)\r\n\r\n\r\n        }\r\n        if ('stockInHand' in fieldValues) {\r\n            // temp.stockInHand = fieldValues.stockInHand ? \"\" : \"This field is required\"\r\n            setSHand(fieldValues.stockInHand);\r\n\r\n        }\r\n\r\n\r\n        if ('size' in fieldValues) {\r\n            temp.size = fieldValues.size ? \"\" : \"This field is required\"\r\n\r\n        }\r\n\r\n        if ('reorderLevel' in fieldValues) {\r\n            temp.reorderLevel = fieldValues.reorderLevel ? \"\" : \"This field is required\"\r\n\r\n        }\r\n\r\n\r\n        if ('description' in fieldValues) {\r\n            temp.description = fieldValues.description ? \"\" : \"This field is required\"\r\n\r\n        }\r\n\r\n        if ('buyingPrice' in fieldValues) {\r\n            temp.buyingPrice = fieldValues.buyingPrice ? \"\" : \"This field is required\"\r\n\r\n        }\r\n        if ('sellingPrice' in fieldValues) {\r\n            temp.sellingPrice = fieldValues.sellingPrice ? \"\" : \"This field is required\"\r\n\r\n        }\r\n        if ('storeId' in fieldValues) {\r\n            temp.storeId = fieldValues.storeId ? \"\" : \"This field is required\"\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const [\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    ] = useForm(initialFieldValues, validate, props.setCurrentId);\r\n\r\n    const showToast = () => {\r\n        addToast(\"StockIn data saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"StockIn data saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"StockIn data saved succeffuly\", { appearance: 'success' })\r\n\r\n        props.fetchAllStockIn();\r\n    }\r\n\r\n\r\n    // const setId = () => {\r\n    //     setCurrentId(record.productId)\r\n    // }\r\n    const getCId = (productId) => {\r\n\r\n        setCurrentProductId(productId);\r\n        setProductId(productId);\r\n        // console.log(productId)\r\n    }\r\n    const productByName = (name) => {\r\n        setFProducts([...props.productsList.filter(x => x.name === name)])\r\n    }\r\n    const getStockInHand = e => {\r\n        // const target = e.target;\r\n        // setSHand(target.value);\r\n        // console(\"this has been called\");\r\n    }\r\n\r\n    const getQuantity = e => {\r\n        const target = e.target;\r\n        setQuant(target.value);\r\n\r\n    }\r\n\r\n    const calculateStockInHand = () => {\r\n        setStock(sHand + quant);\r\n        console.log(sHand);\r\n        console.log(quant);\r\n        console.log(stock);\r\n\r\n    }\r\n\r\n    // const getStoreId = s => {\r\n\r\n    //     setSId(s);\r\n    // }\r\n\r\n    const clearField = () => {\r\n        setValue(props.productsList.clearField);\r\n\r\n        console.log(\"open = true\")\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        // console.log(\"handle sumbit has been called\")\r\n\r\n        if (validate()) {\r\n            // console.log(\"validation has occured\")\r\n\r\n\r\n\r\n            var stockInHand = parseInt(values.stockInHand) + parseInt(values.quantity);\r\n            values.stockInHand = stockInHand;\r\n            // console.log(values.stockInHand);\r\n\r\n            const onSuccess = () => {\r\n                resetForm();\r\n                showToast();\r\n                clearField();\r\n\r\n            }\r\n\r\n\r\n            if (props.currentId == 0) {\r\n\r\n\r\n                // using toast notification\r\n                values.type = \"Normal\"\r\n                props.createStockIns(values);\r\n                props.updateStockInHand(productId, values, onSuccess);\r\n\r\n            }\r\n            else {\r\n\r\n\r\n                //using toast notification\r\n                props.updateStockIn(props.currentId, values);\r\n                props.updateStockInHand(props.currentProductId, stock, onSuccess)\r\n\r\n            }\r\n            if (props.openPopup == true) {\r\n                props.setOpenPopup(false)\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.fetchAllProducts();\r\n\r\n        if (props.currentId != 0 || productId != 0)\r\n            setValues({\r\n\r\n                ...props.productsList.find(x => x.productId == productId)\r\n\r\n            })\r\n        setErrors({})\r\n        props.fetchAllStores();\r\n        props.fetchAllSuppliers();\r\n        props.fetchAllProducts();\r\n        props.fetchAllStoreProduct();\r\n        props.fetchAllStockIn();\r\n\r\n\r\n\r\n    }, [productId])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n        <section className=\"content\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    {/* left column */}\r\n                    <div className=\"col-md-12\">\r\n                        {/* jquery validation */}\r\n                        <div className=\"card card-primary\">\r\n                            <div className=\"card-header\">\r\n                                <h4 className=\"card-title\">Add Stock  <small> </small></h4>\r\n                            </div>\r\n                            {/* /.card-header */}\r\n                            {/* form start */}\r\n                            <form id=\"quickForm\" autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n\r\n\r\n                                <Grid container>\r\n                                    <Grid item xs={2.5}>\r\n                                        <FormControl className={classes.formControl}\r\n                                            {...(errors.storeId && { error: true })}\r\n                                        >\r\n                                            <InputLabel>Store</InputLabel>\r\n                                            <Select\r\n                                                className=\"form-ctr\"\r\n                                                name=\"storeId\"\r\n                                                label=\" Store\"\r\n                                                value={values.storeId}\r\n                                                //onFocus={fetchStores}\r\n                                                onChange={handleInputChange}\r\n                                                variant=\"outlined\"\r\n\r\n                                            >\r\n\r\n                                                <MenuItem value=\"\">Select Store</MenuItem>\r\n\r\n                                                {\r\n                                                    props.storesList.map((record, index) => {\r\n                                                        return (\r\n                                                            <MenuItem value={record.storeId}>{record.name}</MenuItem>\r\n\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </Select>\r\n                                            {errors.storeId && <FormHelperText>{errors.storeId}</FormHelperText>}\r\n                                        </FormControl>\r\n                                        <Autocomplete\r\n                                            //id=\"country-select-demo\"\r\n                                            className=\"form-ctr\"\r\n                                            sx={{ width: 30 }}\r\n\r\n                                            options={props.suppliersList}\r\n\r\n                                            autoHighlight\r\n                                            getOptionLabel={(option) => option.name}\r\n                                            //getOptionSelected ={}\r\n\r\n                                            onChange={(_event, newSupplier) => {\r\n                                                setSelectedSupplier(newSupplier.id);\r\n\r\n                                                console.log(newSupplier.id)\r\n                                            }}\r\n\r\n\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    style={{ width: '10%' }}\r\n                                                    {...params}\r\n                                                    label=\"Choose a supplier\"\r\n                                                    name=\"supplierId\"\r\n                                                    inputProps={{\r\n                                                        ...params.inputProps,\r\n                                                        autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                    }}\r\n                                                    variant=\"outlined\"\r\n                                                    className=\"form-ctr\"\r\n                                                    id=\"input-with-icon-textfield\"\r\n                                                    value={values.supplierId = selectedSupplier}\r\n                                                    onChange={handleInputChange}\r\n                                                    {...(errors.supplierId && { error: true, helperText: errors.supplierId })}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n\r\n                                    </Grid>\r\n                                    <Grid item xs={2.5}>\r\n\r\n\r\n                                        <Autocomplete\r\n                                            //id=\"country-select-demo\"\r\n                                            className=\"form-ctr\"\r\n                                            sx={{ width: 30 }}\r\n\r\n                                            options={props.productsList}\r\n\r\n                                            autoHighlight\r\n                                            getOptionLabel={(option) => option.name}\r\n                                            onSelect={handleInputChange}\r\n                                            //getOptionSelected ={}\r\n\r\n                                            onChange={(_event, newProduct) => {\r\n\r\n                                                setSelectedProduct(newProduct.productId);\r\n                                                // checkBalance(newCustomer.id);\r\n                                                // setCustomerData({ ...props.customersList.find(x => x.id == newCustomer.id), });\r\n                                                getCId(newProduct.productId);\r\n                                                productByName(newProduct.name);\r\n\r\n                                            }}\r\n\r\n\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    style={{ width: '10%' }}\r\n                                                    {...params}\r\n                                                    label=\"Select a product\"\r\n                                                    name=\"productId\"\r\n                                                    inputProps={{\r\n                                                        ...params.inputProps,\r\n                                                        autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                    }}\r\n                                                    variant=\"outlined\"\r\n                                                    className=\"form-ctr\"\r\n                                                    id=\"input-with-icon-textfield\"\r\n                                                    value={values.productId = selectedProduct}\r\n                                                    onChange={handleInputChange}\r\n                                                    {...(errors.productId && { error: true, helperText: errors.productId })}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                        <Autocomplete\r\n                                            //id=\"country-select-demo\"\r\n                                            className=\"form-ctr\"\r\n                                            sx={{ width: 30 }}\r\n\r\n                                            options={fProducts}\r\n\r\n                                            autoHighlight\r\n                                            getOptionLabel={(option) => option.size}\r\n                                            onSelect={handleInputChange}\r\n                                            //getOptionSelected ={}\r\n\r\n                                            onChange={(_event, newProduct) => {\r\n\r\n                                                setSelectedProduct(newProduct.productId);\r\n                                                // checkBalance(newCustomer.id);\r\n                                                // setCustomerData({ ...props.customersList.find(x => x.id == newCustomer.id), });\r\n                                                getCId(newProduct.productId);\r\n\r\n                                            }}\r\n\r\n\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    style={{ width: '10%' }}\r\n                                                    {...params}\r\n                                                    label=\"Select a Size\"\r\n                                                    name=\"productId\"\r\n                                                    inputProps={{\r\n                                                        ...params.inputProps,\r\n                                                        autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                    }}\r\n                                                    variant=\"outlined\"\r\n                                                    className=\"form-ctr\"\r\n                                                    id=\"input-with-icon-textfield\"\r\n                                                    value={values.productId = selectedProduct}\r\n                                                    onChange={handleInputChange}\r\n                                                    {...(errors.size && { error: true, helperText: errors.size })}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n\r\n\r\n\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"input-with-icon-textfield\"\r\n                                    variant=\"outlined\"\r\n                                    type=\"text\"\r\n                                    name=\"ProductId\"\r\n                                    label=\"Product Code\"\r\n                                    InputLabelProps={{\r\n                                        startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <AccountCircle />\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    value={values.productId}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.productId && { error: true, helperText: errors.productId })}\r\n                                />\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"input-with-icon-textfield\"\r\n                                    variant=\"outlined\"\r\n                                    type=\"text\"\r\n                                    name=\"Description\"\r\n                                    label=\"Description\"\r\n                                    InputLabelProps={{\r\n                                        startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <AccountCircle />\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    value={values.description}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.description && { error: true, helperText: errors.description })}\r\n                                />\r\n\r\n\r\n                                <TextField className=\"form-ctr\" name=\"size\" label=\"Size\" value={values.size}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n\r\n\r\n                                    {... (errors.size && { error: true, helperText: errors.size })}\r\n                                />\r\n\r\n\r\n\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    name=\"buyingPrice\"\r\n                                    label=\"Buying Price\" type=\"buyingPrice\" value={values.buyingPrice}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n\r\n                                    {...(errors.buyingPrice && { error: true, helperText: errors.buyingPrice })}\r\n                                />\r\n\r\n                                <TextField className=\"form-ctr\" name=\"sellingPrice\" label=\"Retail Price\" value={values.sellingPrice}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n\r\n                                    {... (errors.sellingPrice && { error: true, helperText: errors.sellingPrice })}\r\n                                />\r\n\r\n\r\n\r\n                                <TextField className=\"form-ctr\" name=\"stockInHand\" label=\"Stock In Hand\" value={values.stockInHand}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n                                    on\r\n\r\n                                    {... (errors.stockInHand && { error: true, helperText: errors.stockInHand })}\r\n                                />\r\n\r\n\r\n\r\n\r\n                                <TextField className=\"form-ctr\" name=\"reorderLevel\" label=\"Re-order Level\" value={values.reorderLevel}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n\r\n                                    {... (errors.reorderLevel && { error: true, helperText: errors.reorderLevel })}\r\n                                />\r\n\r\n                                <TextField className=\"form-ctr\" name=\"quantity\" label=\"Quantity\" value={values.quantity}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n\r\n                                    {... (errors.quantity && { error: true, helperText: errors.quantity })}\r\n\r\n                                />\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                {/* /.card-body */}\r\n                                <div className=\"card-footer\">\r\n                                    <div>\r\n                                        <button variant=\"contained\" type=\"submit\" className=\"btn btn-primary\"  >Save</button>\r\n                                        <button variant=\"contained\"\r\n                                            className=\"btn btn-secondary\"\r\n                                            onClick={resetForm} style={{ marginLeft: 3 }}>Reset</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </form>\r\n\r\n                        </div>\r\n                        {/* /.card */}\r\n                    </div>\r\n                    {/*/.col (left) */}\r\n                    {/* right column */}\r\n                    <div className=\"col-md-6\">\r\n                    </div>\r\n                    {/*/.col (right) */}\r\n                </div>\r\n                {/* /.row */}\r\n            </div>{/* /.container-fluid */}\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    addStaffList: state.addStaff.list,\r\n    storesList: state.stores.list,\r\n    userLevelList: state.userLevel.list,\r\n    suppliersList: state.suppliers.list,\r\n    productsList: state.products.list,\r\n    storeProductsList: state.storeProducts.list,\r\n    stockInList: state.stockIns.list,\r\n    storeIdNProductIdList: state.storeProducts.list,\r\n\r\n})\r\n\r\n\r\n\r\nconst mapActionToProps = {\r\n    createStockIns: stockInActions.createStockIn,\r\n    createStoreProduct: storeProductActions.createStoreProduct,\r\n    updateStockIn: stockInActions.updateStockIn,\r\n    updateStoreProducts: storeProductActions.updateStoreProducts,\r\n    fetchAllStores: storeActions.fetchAllStore,\r\n    fetchAllUserLevel: userLevelActions.fetchAllUserLevel,\r\n    fetchAllSuppliers: supplierActions.fetchAllSupplier,\r\n    updateStockInHand: productActions.updateStockInHand,\r\n    fetchAllProducts: productActions.fetchAllProduct,\r\n    fetchAllStoreProduct: storeProductActions.fetchAllStoreProducts,\r\n    fetchAllStockIn: stockInActions.fetchAllStockIn,\r\n    fetchByStoreIdNProductId: storeProductActions.fetchByStoreIdNProductId,\r\n    updateProducts: productActions.updateProduct,\r\n\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AddStockInForm));\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}