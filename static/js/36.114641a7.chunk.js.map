{"version":3,"sources":["views/Components/Forms/Products/AllProducts/AllProducts.js","views/Components/Forms/Products/AddProduct/AddNewProductForm.js","../node_modules/@material-ui/icons/Add.js","../node_modules/@material-ui/icons/DeleteForeverSharp.js"],"names":["headCells","id","label","disableSorting","mapActionToProps","fetchAllProducts","productActions","deleteProduct","connect","state","productsList","products","list","withStyles","theme","paper","margin","spacing","padding","searchInput","width","newButton","position","right","_ref","classes","props","_objectWithoutProperties","_excluded","_useState","useState","fn","items","_useState2","_slicedToArray","filterFn","setFilterFn","_useState3","_useState4","openPopup","setOpenPopup","_useState5","_useState6","currentProductId","setcurrentProductId","addToast","useToasts","_useState7","isOpen","message","type","notify","setNotify","_useState8","_useState9","confirmDialog","setConfirmDialog","_useState10","_useState11","showToast","appearance","useEffect","_useTable","useTable","TblContainer","TblHead","TblPagination","recordsAfterPagingAndSorting","_jsxs","_Fragment","children","_jsx","PageHeader","title","icon","AddShoppingCartTwoToneIcon","fontSize","Paper","className","elevation","Toolbar","Controls","Input","InputProps","startAdornment","InputAdornment","Search","onChange","e","target","value","filter","x","productId","toLowerCase","includes","name","description","size","Button","text","variant","startIcon","AddIcon","onClick","class","TableBody","map","record","index","TableRow","hover","TableCell","stockInHand","ActionButton","color","openInPopup","EditOutlinedIcon","onConfirm","DeleteIcon","Popup","AddNewProductForm","Notification","ConfirmDialog","subTitle","initialFieldValues","categoryId","buyingPrice","sellingPrice","reorderLevel","markup","discountLimit","taxId","storeId","fetchAllCategory","categActions","createProducts","updateProducts","fetchAllTaxes","TActions","fetchAllStores","storeActions","categoryList","category","taxList","tax","storesList","stores","root","minWidth","formControl","smMargin","validate","fieldValues","arguments","length","undefined","values","temp","_objectSpread","errors","setErrors","Object","every","_useForm","useForm","setCurrentProductId","_useForm2","setValues","handleInputChange","resetForm","find","autoComplete","noValidate","onSubmit","preventDefault","onSuccess","parseInt","parseFloat","TextField","error","helperText","FormControl","InputLabel","Select","MenuItem","FormHelperText","console","log","profit","sP3","sP4","Math","ceil","rate","style","marginLeft","_interopRequireDefault","require","_interopRequireWildcard","defineProperty","exports","default","React","_default","createElement","d"],"mappings":"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","file":"static/js/36.114641a7.chunk.js","sourcesContent":["import { Paper, TableBody, TableCell, TableRow, TextField, Toolbar, withStyles, InputAdornment } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n//import * as actions from \"../../../../../actions/Staff/addStaff\";\r\nimport * as productActions from \"../../../../../actions/Products/products\";\r\nimport { connect } from \"react-redux\";\r\nimport useTable from \"../../useTable\";\r\nimport Controls from \"../../../controls/Controls\";\r\nimport { EditOutlined, Search } from \"@material-ui/icons\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport PageHeader from \"../../../PageHeader\";\r\nimport AddShoppingCartTwoToneIcon from '@material-ui/icons/AddShoppingCartTwoTone';\r\nimport Popup from \"../../../Popup\";\r\nimport AddNewProductForm from \"../AddProduct/AddNewProductForm\";\r\n\r\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteIcon from \"@material-ui/icons/DeleteForeverSharp\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport Notification from \"../../../controls/Notification\";\r\nimport ConfirmDialog from \"../../../controls/ConfirmDialog\";\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n\r\n    paper: {\r\n        margin: theme.spacing(-8.9),\r\n        padding: theme.spacing(6),\r\n\r\n    },\r\n\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px '\r\n\r\n    },\r\n   \r\n})\r\n\r\nconst headCells = [\r\n    { id: 'productId', label: 'Product Id' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'description', label: 'Description' },\r\n    { id: 'size', label: 'Size' },\r\n    { id: 'stockInHand', label: 'StockInHand' },\r\n    { id: 'Actions', label: 'Actions', disableSorting: true },\r\n]\r\n\r\nconst AllProducts = ({ classes, ...props }) => {\r\n\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } })\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const [currentProductId, setcurrentProductId] = useState(0)\r\n    const { addToast } = useToasts()\r\n    const {notify, setNotify} = useState({isOpen:false, message:'', type:''})\r\n    const [confirmDialog, setConfirmDialog] = useState(false) \r\n    const [deleteRecord, setDeleteRecord] = useState(false)\r\n\r\n    const showToast= () =>{\r\n        addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n        addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n        addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n        props. fetchAllProducts();\r\n    }\r\n    const onDelete = id => {\r\n            props.deleteProduct(id, showToast )\r\n            setConfirmDialog(false)\r\n\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        props. fetchAllProducts();\r\n\r\n       \r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting,\r\n    } = useTable(props.productsList, headCells, filterFn)\r\n\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value == \"\")\r\n                    return items;\r\n                else {\r\n                    return items.filter(x =>\r\n                        x.productId.toLowerCase().includes(target.value.toLowerCase()) +\r\n                        x.name.toLowerCase().includes(target.value.toLowerCase()) +\r\n                        x.description.toLowerCase().includes(target.value.toLowerCase()) +\r\n                        x.size.toLowerCase().includes(target.value.toLowerCase())) //+\r\n                        //x.category.toLowerCase().includes(target.value.toLowerCase()))\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    const addorEdit = (employee, resetForm) => {\r\n\r\n        setOpenPopup(false)\r\n        setNotify({\r\n            isOpen:true,\r\n            message:'Submitted Successfully',\r\n            type: 'Success'\r\n        })\r\n    }\r\n\r\n    const openInPopup = record => {\r\n        setcurrentProductId(record)\r\n        setOpenPopup(true)\r\n    }\r\n\r\n    const openInDialog = () => {\r\n        setConfirmDialog(true)\r\n        \r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            <PageHeader\r\n                title=\"Products List\"\r\n                //subTitle=\"Form design with validation\"\r\n                icon={<AddShoppingCartTwoToneIcon   fontSize=\"large\" />}\r\n            />,\r\n            <Paper className={classes.paper} elevation={3}>\r\n\r\n                <Toolbar>\r\n                    <Controls.Input\r\n                        className={classes.searchInput}\r\n                        label=\"Search Products\"\r\n\r\n                        InputProps={{\r\n                            startAdornment: (<InputAdornment position=\"start\">\r\n                                <Search />\r\n                            </InputAdornment>)\r\n                        }}\r\n                        onChange={handleSearch}\r\n\r\n                    />\r\n                    <Controls.Button\r\n                        text=\"Add New\"\r\n                        variant=\"outlined\"\r\n                        startIcon={<AddIcon />}\r\n                        className={classes.newButton}\r\n                        onClick={() => {setOpenPopup(true); setcurrentProductId(0);}}\r\n                    />\r\n                </Toolbar>\r\n                <table class=\"table .table-responsive{-sm|-md|-lg|-xl|-xxl} table-hover \" >\r\n                    <thead >\r\n\r\n\r\n                    </thead>\r\n                    <tbody>\r\n                        <TblContainer >\r\n                            <TblHead />\r\n                            <TableBody>\r\n                                {\r\n                                    recordsAfterPagingAndSorting().map((record, index) => {\r\n                                        return (<TableRow key={index} hover>\r\n                                            <TableCell>{record.productId}</TableCell>\r\n                                            <TableCell>{record.name}</TableCell>\r\n                                            <TableCell>{record.description}</TableCell>\r\n                                            <TableCell>{record.size} </TableCell>\r\n                                            <TableCell>{record.stockInHand} </TableCell>\r\n                                        \r\n                                            <TableCell>\r\n                                                <Controls.ActionButton\r\n                                                    color=\"primary\"\r\n                                                    // onClick={()=>{setcurrentProductId(record.id)}}\r\n                                                    onClick={()=> {openInPopup(record.productId)}}\r\n                                                >\r\n                                                    <EditOutlinedIcon fontSize=\"small\" />\r\n                                                </Controls.ActionButton>\r\n                                                <Controls.ActionButton\r\n                                                    color=\"secondary\"\r\n                                                    onClick={() => {\r\n                                                        openInDialog()\r\n                                                        setConfirmDialog({\r\n                                                            onConfirm: () =>{onDelete(record.productId)}\r\n                                                        })\r\n                                                        \r\n                                                        //onDelete(record.id)\r\n                                                    }\r\n                                                    }\r\n                                                >\r\n                                                    <DeleteIcon fontSize=\"small\" />\r\n                                                </Controls.ActionButton>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                            </TableBody>\r\n                        </TblContainer>\r\n\r\n\r\n                    </tbody>\r\n                </table>\r\n\r\n                <TblPagination />\r\n            </Paper>\r\n            <Popup\r\n                title=\"Stores Form\"\r\n                openPopup={openPopup}\r\n                setOpenPopup={setOpenPopup}\r\n            >\r\n                <AddNewProductForm\r\n                {...({ currentProductId, setcurrentProductId, openPopup, setOpenPopup }) }\r\n                    //addorEdit={addorEdit}\r\n                />\r\n            </Popup>\r\n            <Notification\r\n            notify={notify}\r\n            setNotify ={setNotify} \r\n            />\r\n            <ConfirmDialog \r\n            title=\"Are you sure you want to delete this record?\"\r\n            subTitle=\"This operation can't be reversed\"\r\n            confirmDialog={confirmDialog}\r\n            setConfirmDialog = {setConfirmDialog}\r\n            />\r\n        </>\r\n        // {...({ currentProductId, setcurrentProductId }) }\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    productsList: state.products.list,\r\n    \r\n})\r\n\r\nconst mapActionToProps = {\r\n    fetchAllProducts: productActions.fetchAllProduct,\r\n    deleteProduct: productActions.DeleteProduct,\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AllProducts));","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { FormControl, Grid, TextField, withStyles, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\r\nimport { useForm } from \"../../useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as categActions from \"../../../../../actions/Category/categories\";\r\nimport * as productActions from \"../../../../../actions/Products/products\";\r\nimport * as storeActions from \"../../../../../actions/Store/stores\";\r\n//import * as userLevelActions from \"../../../../../actions/UserLevel/userLevel\";\r\nimport { ToastConsumer, useToasts } from \"react-toast-notifications\";\r\nimport \"../../staffForm.css\";\r\nimport { RestoreSharp } from \"@material-ui/icons\";\r\nimport * as TActions from \"../../../../../actions/Tax/tax\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n})\r\n\r\nconst initialFieldValues = {\r\n    productId: '',\r\n    name: '',\r\n    description: '',\r\n    size: '',\r\n    categoryId: '',\r\n    buyingPrice: '',\r\n    sellingPrice: '',\r\n    reorderLevel: '',\r\n    stockInHand: '',\r\n    markup: '',\r\n    discountLimit: '',\r\n    taxId: '',\r\n    storeId: 2\r\n    // userId: 1,\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst AddNewProductForm = ({ classes, ...props }) => {\r\n\r\n    //toast message\r\n    const { addToast } = useToasts()\r\n\r\n    //realtime validation for the whole form controls\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('name' in fieldValues) {\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required\"\r\n            // addToast(\"User data saved succeffuly\", {appearance:'success'})\r\n            // console.log(\"Tast has beeen displayed\")\r\n        }\r\n\r\n\r\n        if ('description' in fieldValues) {\r\n            temp.description = fieldValues.description ? \"\" : \"This field is required\"\r\n        }\r\n\r\n\r\n        // if ('productId' in fieldValues) {\r\n        //     temp.productId = fieldValues.productId ? \"\" : \"This field is required\"\r\n        // }\r\n\r\n\r\n        if ('size' in fieldValues) {\r\n            temp.size = fieldValues.size ? \"\" : \"This field is required\"\r\n        }\r\n        // }\r\n        if ('categoryId' in fieldValues) {\r\n            temp.categoryId = fieldValues.categoryId ? \"\" : \"This field is required\"\r\n        }\r\n\r\n        if ('stockInHand' in fieldValues) {\r\n            temp.stockInHand = fieldValues.stockInHand ? \"\" : \"This field is required\"\r\n        }\r\n\r\n        if ('buyingPrice' in fieldValues) {\r\n            temp.buyingPrice = fieldValues.buyingPrice ? \"\" : \"This field is required\"\r\n        }\r\n        // if ('sellingPrice' in fieldValues) {\r\n        //     temp.sellingPrice = fieldValues.sellingPrice ? \"\" : \"This field is required\"\r\n        // }\r\n        if ('markup' in fieldValues) {\r\n            temp.markup = fieldValues.markup ? \"\" : \"This field is required\"\r\n        }\r\n        if ('reorderLevel' in fieldValues) {\r\n            temp.reorderLevel = fieldValues.reorderLevel ? \"\" : \"This field is required\"\r\n        }\r\n\r\n        // if ('storeId' in fieldValues) {\r\n        //     temp.storeId = fieldValues.storeId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('companyDataId' in fieldValues) {\r\n        //     temp.companyDataId = fieldValues.companyDataId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('userLevelId' in fieldValues) {\r\n        //     temp.userLevelId = fieldValues.userLevelId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('storeId' in fieldValues) {\r\n        //     temp.storeId = fieldValues.storeId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('uName' in fieldValues) {\r\n        //     temp.uName = fieldValues.uName ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('password' in fieldValues) {\r\n        //     temp.password = fieldValues.password ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('cPswd' in fieldValues) {\r\n        //     temp.cPswd = fieldValues.cPswd ? \"\" : \"This field is required\"\r\n\r\n        // }\r\n\r\n\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const [\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    ] = useForm(initialFieldValues, validate, props.setCurrentProductId);\r\n\r\n    const showToast = () => {\r\n        addToast(\"Product data saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"Product data saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"Product data saved succeffuly\", { appearance: 'success' })\r\n        props.fetchAllProducts();\r\n    }\r\n\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n\r\n        if (validate()) {\r\n\r\n            const onSuccess = () => {\r\n                showToast();\r\n                resetForm();\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            if (props.currentProductId == 0) {\r\n\r\n                //using toast notification\r\n\r\n                props.createProducts({\r\n                    // productId: values.productId,\r\n                    name: values.name,\r\n                    description: values.description,\r\n                    size: values.size,\r\n                    categoryId: parseInt(values.categoryId),\r\n                    stockInHand: parseInt(values.stockInHand),\r\n                    reorderLevel: parseInt(values.reorderLevel),\r\n                    buyingPrice: parseFloat(values.buyingPrice),\r\n                    markup: parseFloat(values.markup),\r\n                    discountLimit: parseFloat(values.discountLimit),\r\n                    sellingPrice: parseFloat(values.sellingPrice),\r\n                    // storeId: parseInt(values.storeId),\r\n                    taxId: values.taxId\r\n                }, onSuccess)\r\n                //addorEdit(values, onSuccess)\r\n                // console.log(values);\r\n\r\n            }\r\n            else {\r\n                //using windows alert notification\r\n                //props.updateDCandidate(props.currentId, values, () => {window.alert('updated')})\r\n                //using toast notification\r\n                props.updateProducts(props.currentProductId,\r\n                    {\r\n                        // productId: values.productId,\r\n                        name: values.name,\r\n                        description: values.description,\r\n                        size: values.size,\r\n                        categoryId: parseInt(values.categoryId),\r\n                        stockInHand: parseInt(values.stockInHand),\r\n                        reorderLevel: parseInt(values.reorderLevel),\r\n                        buyingPrice: parseFloat(values.buyingPrice),\r\n                        markup: parseFloat(values.markup),\r\n                        discountLimit: parseFloat(values.discountLimit),\r\n                        sellingPrice: parseFloat(values.sellingPrice),\r\n                        // storeId: parseInt(values.storeId),\r\n                        taxId: values.taxId\r\n                    }, onSuccess)\r\n\r\n\r\n\r\n            }\r\n\r\n            if (props.openPopup == true) {\r\n                props.setOpenPopup(false)\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (props.currentProductId != 0)\r\n            setValues({\r\n                ...props.productsList.find(x => x.productId == props.currentProductId)\r\n            })\r\n        setErrors({})\r\n        props.fetchAllProducts();\r\n        props.fetchAllCategory();\r\n        props.fetchAllTaxes();\r\n        // props.fetchAllStores();\r\n\r\n\r\n    }, [props.currentProductId])\r\n\r\n\r\n    const calcMarkup = e => {\r\n        // console.log(\"Mark up has been called\");\r\n        console.log(e.target.value);\r\n        let profit = parseFloat(e.target.value);\r\n        let buyingPrice = parseFloat(values.buyingPrice);\r\n        let sP1 = profit / 100\r\n        let sP2 = sP1 * buyingPrice;\r\n        let sP3 = buyingPrice + sP2;\r\n\r\n        let sP4 = Math.ceil(sP3 / 10) * 10;\r\n        values.sellingPrice = sP4;\r\n        // console.log(sP4);\r\n        setValues({\r\n            ...values,\r\n            sellingPrice: values.sellingPrice\r\n        })\r\n        handleInputChange(e);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n\r\n        <section className=\"content\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    {/* left column */}\r\n                    <div className=\"col-md-12\">\r\n                        {/* jquery validation */}\r\n                        <div className=\"card card-primary\">\r\n                            <div className=\"card-header\">\r\n                                <h4 className=\"card-title\">Add Products<small> </small></h4>\r\n                            </div>\r\n                            {/* /.card-header */}\r\n                            {/* form start */}\r\n                            <form id=\"quickForm\" autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n\r\n                                {/* <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"standard-basic\"\r\n                                    type=\"text\"\r\n                                    name=\"productId\"\r\n                                    label=\"Product Id\"\r\n                                    value={values.productId}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.productId && { error: true, helperText: errors.productId })}\r\n                                /> */}\r\n                                {/* <FormControl className={classes.formControl}\r\n                                    {...(errors.storeId && { error: true })}\r\n                                >\r\n                                    <InputLabel>Store</InputLabel>\r\n                                    <Select\r\n                                        className=\"form-ctr\"\r\n                                        name=\"storeId\"\r\n                                        label=\" Store\"\r\n                                        value={values.storeId}\r\n                                        //onFocus={fetchStores}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n                                    >\r\n\r\n                                        <MenuItem value=\"\">Select Store</MenuItem>\r\n\r\n                                        {\r\n                                            props.storesList.map((record, index) => {\r\n                                                return (\r\n                                                    <MenuItem value={record.storeId}>{record.name}</MenuItem>\r\n\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Select>\r\n                                    {errors.storeId && <FormHelperText>{errors.storeId}</FormHelperText>}\r\n                                </FormControl> */}\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"standard-basic\"\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    label=\"Product Name\"\r\n                                    value={values.name}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.name && { error: true, helperText: errors.name })}\r\n                                />\r\n\r\n                                <TextField className=\"form-ctr\" name=\"description\" label=\"Description\" value={values.description}\r\n                                    onChange={handleInputChange}\r\n\r\n\r\n                                    {... (errors.description && { error: true, helperText: errors.description })}\r\n                                />\r\n\r\n                                <TextField className=\"form-ctr\" name=\"size\" label=\"Size\" value={values.size}\r\n                                    onChange={handleInputChange}\r\n\r\n\r\n                                    {... (errors.size && { error: true, helperText: errors.size })}\r\n                                />\r\n\r\n                                <FormControl className={classes.formControl}\r\n                                    {...(errors.categoryId && { error: true })}\r\n                                >\r\n                                    <InputLabel >Category</InputLabel>\r\n                                    <Select\r\n                                        className=\"form-ctr\"\r\n                                        name=\"categoryId\"\r\n                                        label=\"category\"\r\n                                        value={values.categoryId}\r\n                                        onChange={handleInputChange}\r\n\r\n                                    >\r\n                                        <MenuItem value=\"\">Select Category</MenuItem>\r\n                                        {\r\n                                            props.categoryList.map((record, index) => {\r\n                                                return (\r\n                                                    <MenuItem value={record.id}>{record.name}</MenuItem>\r\n\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Select>\r\n                                    {errors.categoryId && <FormHelperText>{errors.categoryId}</FormHelperText>}\r\n                                </FormControl>\r\n\r\n                                {/* <TextField className=\"form-ctr\" name=\"phone\" label=\"Categ Phone No\" value={values.phone}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {... (errors.phone && { error: true, helperText: errors.phone })}\r\n                                /> */}\r\n\r\n                                {/* <TextField\r\n                                    className=\"form-ctr\"\r\n                                    name=\"email\"\r\n                                    label=\"Email\" type=\"email\" value={values.email}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {...(errors.email && { error: true, helperText: errors.email })}\r\n                                /> */}\r\n\r\n                                {/* <TextField className=\"form-ctr\" name=\"location\" label=\"location\" value={values.location}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {... (errors.location && { error: true, helperText: errors.location })}\r\n                                />\r\n\r\n                               \r\n                             \r\n\r\n                             <FormControl className={classes.formControl}\r\n                                    {...(errors.userLevelId && { error: true })}\r\n                                >\r\n                                    <InputLabel >Company</InputLabel>\r\n                                    <Select\r\n                                        className=\"form-ctr\"\r\n                                        name=\"companyDataId\"\r\n                                        label=\"Company\"\r\n                                        value={values.companyDataId}\r\n                                        onChange={handleInputChange}\r\n\r\n                                    > */}\r\n                                {/* <MenuItem value=\"\">Select Company</MenuItem>\r\n                                        <MenuItem value=\"1\">{1}</MenuItem>\r\n                                        {/* {\r\n                                            props.userLevelList.map((record, index) => {\r\n                                                return (\r\n                                                    <MenuItem value={record.id}>{record.level}</MenuItem>\r\n\r\n                                                )\r\n                                            })\r\n                                        } */}\r\n                                {/* </Select>\r\n                                    {errors.companyDataId && <FormHelperText>{errors.companyDataId}</FormHelperText>}\r\n                                </FormControl>   */}\r\n\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"standard-basic\"\r\n                                    type=\"text\"\r\n                                    name=\"stockInHand\"\r\n                                    label=\"Stock In Hand\"\r\n                                    value={values.stockInHand}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.stockInHand && { error: true, helperText: errors.stockInHand })}\r\n                                />\r\n\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"standard-basic\"\r\n                                    type=\"text\"\r\n                                    name=\"reorderLevel\"\r\n                                    label=\"Re-order Level\"\r\n                                    value={values.reorderLevel}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.reorderLevel && { error: true, helperText: errors.reorderLevel })}\r\n                                />\r\n\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"standard-basic\"\r\n                                    type=\"text\"\r\n                                    name=\"buyingPrice\"\r\n                                    label=\"Buying Price\"\r\n                                    value={values.buyingPrice}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.buyingPrice && { error: true, helperText: errors.buyingPrice })}\r\n                                />\r\n\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"standard-basic\"\r\n                                    type=\"text\"\r\n                                    name=\"markup\"\r\n                                    label=\"Markup\"\r\n                                    value={values.markup}\r\n                                    onChange={calcMarkup}\r\n                                    {...(errors.markup && { error: true, helperText: errors.markup })}\r\n                                />\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"standard-basic\"\r\n                                    type=\"text\"\r\n                                    name=\"sellingPrice\"\r\n                                    label=\"Selling Price\"\r\n                                    value={values.sellingPrice}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.sellingPrice && { error: true, helperText: errors.sellingPrice })}\r\n                                />\r\n\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"standard-basic\"\r\n                                    type=\"text\"\r\n                                    name=\"discountLimit\"\r\n                                    label=\"Discount Limit \"\r\n                                    value={values.discountLimit}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.discountLimit && { error: true, helperText: errors.discountLimit })}\r\n                                />\r\n\r\n                                <FormControl className={classes.formControl}\r\n                                // {...(errors.categoryId && { error: true })}\r\n                                >\r\n                                    <InputLabel >Tax</InputLabel>\r\n                                    <Select\r\n                                        className=\"form-ctr\"\r\n                                        name=\"taxId\"\r\n                                        label=\"Tax\"\r\n                                        value={values.taxId}\r\n                                        onChange={handleInputChange}\r\n\r\n                                    >\r\n                                        <MenuItem value=\"\">Select Tax</MenuItem>\r\n                                        {\r\n                                            props.taxList.map((record, index) => {\r\n                                                return (\r\n                                                    <MenuItem value={record.taxId}>{record.rate}%</MenuItem>\r\n\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Select>\r\n                                    {/* {errors.categoryId && <FormHelperText>{errors.categoryId}</FormHelperText>} */}\r\n                                </FormControl>\r\n\r\n\r\n                                {/* /.card-body */}\r\n                                <div className=\"card-footer\">\r\n                                    <div>\r\n                                        <button type=\"submit\" className=\"btn btn-primary\" >Save</button>\r\n                                        <button variant=\"contained\"\r\n                                            className=\"btn btn-secondary\"\r\n                                            onClick={resetForm} style={{ marginLeft: 3 }}>Reset</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </form>\r\n\r\n                        </div>\r\n                        {/* /.card */}\r\n                    </div>\r\n                    {/*/.col (left) */}\r\n                    {/* right column */}\r\n                    <div className=\"col-md-6\">\r\n                    </div>\r\n                    {/*/.col (right) */}\r\n                </div>\r\n                {/* /.row */}\r\n            </div>{/* /.container-fluid */}\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    productsList: state.products.list,\r\n    categoryList: state.category.list,\r\n    taxList: state.tax.list,\r\n    storesList: state.stores.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n    fetchAllProducts: productActions.fetchAllProduct,\r\n    deleteProduct: productActions.DeleteProduct,\r\n    fetchAllCategory: categActions.fetchAllCategory,\r\n    createProducts: productActions.createProduct,\r\n    updateProducts: productActions.updateProduct,\r\n    fetchAllTaxes: TActions.fetchAllTaxes,\r\n    fetchAllStores: storeActions.fetchAllStore\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AddNewProductForm));","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 21h12V7H6v14zm2.46-9.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4h-3.5z\"\n}), 'DeleteForeverSharp');\n\nexports.default = _default;"],"sourceRoot":""}