{"version":3,"sources":["views/Components/Forms/Sales/CreditSale/CreditSale.js"],"names":["initialFieldValues","_initialFieldValues","productId","supplierId","name","quantity","buyingPrice","sellingPrice","customPrice","reorderLevel","stockInHand","mainstorePrice","category","size","description","userId","storeId","totalPrice","shells","deposit","diffShell","gTotalPrice","totalDeposit","gTotal","gDeposit","_defineProperty","mapActionToProps","createStockIns","stockInActions","createStoreProduct","storeProductActions","updateStockIn","updateStoreProducts","fetchAllStores","storeActions","fetchAllUserLevel","userLevelActions","fetchAllSuppliers","supplierActions","updateStockInHand","productActions","fetchAllProducts","fetchAllStoreProduct","fetchAllStockIn","fetchByStoreIdNProductId","updateProducts","createCreditSale","creditSalesActions","createCreditSaleDetails","fetchAllTransactions","fetchAllCompanyData","companyDataActions","fetchAllCustomers","customerActions","fetchAllDeposit","Dactions","fetchAllCategory","categActions","fetchAllTaxes","TActions","connect","state","addStaffList","addStaff","list","storesList","stores","userLevelList","userLevel","suppliersList","suppliers","productsList","products","storeProductsList","storeProducts","stockInList","stockIns","storeIdNProductIdList","creditSalesList","creditSale","companyDataList","companyData","customersList","customers","depositList","categoryList","taxList","tax","withStyles","theme","root","margin","spacing","minWidth","formControl","smMargin","_ref","classes","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","openRPopup","setOpenRPopup","_useState3","_useState4","openIPopup","setOpenIPopup","_useState5","_useState6","openDlPopup","setOpenDlPopup","addToast","useToasts","_useState7","_useState8","setCurrentProductId","_useState9","_useState10","_useState11","_useState12","setProductId","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","_useState19","_useState20","_useState21","_useState22","_useState23","_useState24","_useState25","_useState26","confirmDialog","setConfirmDialog","_useState27","_useState28","errorDialog","setErrorDialog","_useState29","_useState30","_useState31","_useState32","_useState33","_useState34","setProducts","_useState35","_useState36","_useState37","_useState38","_useState39","_useState40","transDetails","settransDetails","_useState41","_useState42","tCode","_useState43","_useState44","tittle","setTittle","_useState45","_useState46","recordList","setRecordList","_useState47","_useState48","trans","setTrans","_useState49","_useState50","setCompanyData","_useState51","_useState52","customerData","setCustomerData","_useState53","_useState54","selectedCustomer","setSelectedCustomer","_useState55","_useState56","setCreditTransList","_useState57","_useState58","selectedProduct","setSelectedProduct","_useState59","_useState60","setTax","_useState61","_useState62","fProducts","setFProducts","validate","fieldValues","arguments","length","undefined","values","temp","_objectSpread","errors","customerId","setErrors","Object","every","x","_useForm","useForm","_useForm2","setValues","handleInputChange","showToast","appearance","resetF","getCId","e","useEffect","console","log","find","balance","currentId","a","b","prd","CalcTax","taxId","tId","rate","taxRate","parseFloat","openInErrorDialog","reduce","currentItem","total","totalQnty","totalTax","onRemoveProduct","id","prod","i","splice","concat","_toConsumableArray","_jsxs","_Fragment","children","_jsx","className","autoComplete","noValidate","onSubmit","preventDefault","categoryId","onConfirm","discount","discountLimit","discountPrice","newProduct","parseInt","Math","round","newTDetail","transCode","newProducts","newTDetails","Grid","container","item","xs","Autocomplete","sx","width","options","autoHighlight","getOptionLabel","option","onSelect","onChange","_event","newCustomer","renderInput","params","TextField","style","label","inputProps","variant","value","error","helperText","filter","type","InputLabelProps","startAdornment","InputAdornment","position","AccountCircle","product","profit","markup","sP3","sP4","ceil","transaction","uuid","substring","toUpperCase","amnt","window","toString","forEach","transDetail","prods","grid","class","scope","map","ButtonGroup","Button","EditIcon","color","onClick","editItem","DeleteIcon","amntPaid","marginLeft","ConfirmDialog","title","ErrorDialog","RPopup","PrintReciept","IPopup","Invoice","DlPopup","DeliveryNote"],"mappings":"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","file":"static/js/56.3a878e24.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\n\r\nimport { FormControl, Grid, TextField, withStyles, InputLabel, Select, MenuItem, Button, FormHelperText, Checkbox, FormControlLabel, FormGroup, ButtonGroup, } from \"@material-ui/core\";\r\nimport { useForm } from \"../../useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../../../actions/Staff/addStaff\";\r\nimport * as storeActions from \"../../../../../actions/Store/stores\";\r\nimport * as userLevelActions from \"../../../../../actions/UserLevel/userLevel\";\r\nimport * as supplierActions from \"../../../../../actions/Suppliers/suppliers\";\r\nimport * as productActions from \"../../../../../actions/Products/products\";\r\nimport * as storeProductActions from \"../../../../../actions/StoreProducts/storeProducts\";\r\nimport * as creditSalesActions from \"../../../../../actions/CreditSale/creditSale\";\r\nimport * as stockInActions from \"../../../../../actions/StockIn/stockIn\";\r\nimport { ToastConsumer, useToasts } from \"react-toast-notifications\";\r\nimport \"../../staffForm.css\";\r\nimport { string } from \"prop-types\";\r\nimport { RestoreSharp } from \"@material-ui/icons\";\r\nimport { createSelector, createStructuredSelector } from 'reselect';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { parse, parseJSON } from \"date-fns\";\r\nimport ConfirmDialog from \"../../../controls/ConfirmDialog\";\r\nimport ErrorDialog from \"../../../controls/errorDialog\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { reset } from \"enzyme/build/configuration\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport PrintReciept from \"../printReciept\";\r\nimport RPopup from \"../../../RPopup \";\r\nimport * as companyDataActions from \"../../../../../actions/CompanyData/companyData\";\r\nimport * as customerActions from \"../../../../../actions/Customers/customers\";\r\nimport * as Dactions from \"../../../../../actions/Deposit/deposit\";\r\nimport * as categActions from \"../../../../../actions/Category/categories\";\r\nimport Invoice from \"../../../SaleDocuments/Invoice/Invoice\";\r\nimport IPopup from \"../../../IPopup\";\r\nimport DlPopup from \"../../../DlPopup\";\r\nimport DeliveryNote from \"../../../SaleDocuments/DeliveryNote/DeliveryNote\";\r\nimport * as TActions from \"../../../../../actions/Tax/tax\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n})\r\n\r\nconst initialFieldValues = {\r\n\r\n    productId: '',\r\n    supplierId: '',\r\n    name: '',\r\n    quantity: '',\r\n    buyingPrice: '',\r\n    sellingPrice: '',\r\n    customPrice: true,\r\n    reorderLevel: '',\r\n    stockInHand: '',\r\n    mainstorePrice: true,\r\n    category: '',\r\n    size: '',\r\n    description: '',\r\n    userId: '1',\r\n    storeId: '1',\r\n    totalPrice: '',\r\n    shells: '',\r\n    deposit: '',\r\n    diffShell: '',\r\n    gTotalPrice: '',\r\n    totalDeposit: '',\r\n    gTotal: '',\r\n    gDeposit: '',\r\n    userId: \"1\",\r\n    total: '',\r\n    change: 0,\r\n    amntPaid: \"\",\r\n    depVal: 0,\r\n    payMode: '',\r\n    customerId: '',\r\n    discount: 0,\r\n    discountPrice: 0,\r\n\r\n\r\n}\r\n\r\n// //selectors\r\n// const storeList = state => state.stores.list;\r\n// const addStaff = state => state.addStaff.list;\r\n\r\n// //selectore function\r\n// export const selectStores = createSelector(\r\n//     storeList,\r\n// );\r\n// export const selectStaff = createSelector(\r\n//     addStaff,\r\n// );\r\n\r\n\r\n\r\n\r\nconst CreditSale = ({ classes, ...props }) => {\r\n\r\n    const componentDidMount = () => {\r\n        setTCode(uuid());\r\n    }\r\n    //const [addorEdit] = props;\r\n    const [openRPopup, setOpenRPopup] = useState(false)\r\n    const [openIPopup, setOpenIPopup] = useState(false);\r\n    const [openDlPopup, setOpenDlPopup] = useState(false);\r\n    //toast message\r\n    const { addToast } = useToasts();\r\n    const [currentProductId, setCurrentProductId] = useState(0);\r\n    const [currentId, setCurrentId] = useState(0);\r\n    const [productId, setProductId] = useState(0);\r\n    const [value, setValue] = useState({});\r\n    const [selectedSupplier, setSelectedSupplier] = useState(null);\r\n    const [sId, setSId] = useState(0);\r\n    const [sHand, setSHand] = useState(0);\r\n    const [quant, setQuant] = useState(0);\r\n    const [stock, setStock] = useState(0);\r\n    const [confirmDialog, setConfirmDialog] = useState(false);\r\n    const [errorDialog, setErrorDialog] = useState(false);\r\n    const [uPrice, setUPrice] = useState(0);\r\n    const [tPrice, setTPrice] = useState(0);\r\n    const [products, setProducts] = useState([]);\r\n    const [totalDep, setTotalDep] = useState(0);\r\n    const [total, setTotal] = useState(0);\r\n    const [transDetails, settransDetails] = useState([]);\r\n    const [tCode, setTCode] = useState(0);\r\n    const [tittle, setTittle] = useState(\"\");\r\n    const [recordList, setRecordList] = useState([]);\r\n    const [trans, setTrans] = useState([]);\r\n    const [companyData, setCompanyData] = useState([]);\r\n    const [customerData, setCustomerData] = useState([]);\r\n    const [selectedCustomer, setSelectedCustomer] = useState(0);\r\n    const [creditTransList, setCreditTransList] = useState(0);\r\n    const [selectedProduct, setSelectedProduct] = useState(0);\r\n    const [tax, setTax] = useState(0);\r\n    const [fProducts, setFProducts] = useState([]);\r\n\r\n\r\n    //realtime validation for the whole form controls\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n\r\n\r\n\r\n        if ('quantity' in fieldValues) {\r\n            temp.quantity = fieldValues.quantity ? \"\" : \"This field is required\";\r\n        }\r\n        // if ('stockInHand' in fieldValues) {\r\n        //     temp.stockInHand = fieldValues.stockInHand ? \"\" : \"This field is required\"\r\n\r\n\r\n        // }\r\n\r\n\r\n        // if ('size' in fieldValues) {\r\n        //     temp.size = fieldValues.size ? \"\" : \"This field is required\"\r\n\r\n        // }\r\n\r\n        // if ('reorderLevel' in fieldValues) {\r\n        //     temp.reorderLevel = fieldValues.reorderLevel ? \"\" : \"This field is required\"\r\n\r\n        // }\r\n\r\n\r\n        // if ('description' in fieldValues) {\r\n        //     temp.description = fieldValues.description ? \"\" : \"This field is required\"\r\n\r\n        // }\r\n\r\n        if ('sellingPrice' in fieldValues) {\r\n            temp.sellingPrice = fieldValues.sellingPrice ? \"\" : \"This field is required\"\r\n\r\n        }\r\n\r\n        if ('name' in fieldValues) {\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required\"\r\n\r\n        }\r\n        // if ('shells' in fieldValues) {\r\n        //     temp.shells = fieldValues.shells ? \"\" : \"This field is required\"\r\n\r\n        // }\r\n\r\n        if ('customerId' in fieldValues) {\r\n            temp.customerId = fieldValues.customerId ? \"\" : \"This field is required\";\r\n\r\n        }\r\n\r\n\r\n        // if (fieldValues.shells == 0) {\r\n        //     if ('depVal' in fieldValues) {\r\n        //         temp.depVal = fieldValues.depVal ? \"\" : \"This field is required\"\r\n\r\n        //     }\r\n\r\n        // }\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const validate2 = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n\r\n\r\n\r\n        if ('totalDeposit' in fieldValues) {\r\n            temp.totalDeposit = fieldValues.totalDeposit ? \"\" : \"This field is required\";\r\n        }\r\n        if ('total' in fieldValues) {\r\n            temp.total = fieldValues.total ? \"\" : \"This field is required\"\r\n        }\r\n        // if ('grandDeposit' in fieldValues) {\r\n        //     temp.grandDeposit = fieldValues.grandDeposit ? \"\" : \"This field is required\"\r\n        // }\r\n        if ('payMode' in fieldValues) {\r\n            temp.payMode = fieldValues.payMode ? \"\" : \"This field is required\"\r\n        }\r\n        if ('amntPaid' in fieldValues) {\r\n            temp.amntPaid = fieldValues.amntPaid ? \"\" : \"This field is required\"\r\n        }\r\n        if ('change' in fieldValues) {\r\n            temp.change = fieldValues.change ? \"\" : \"This field is required\"\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const [\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    ] = useForm(initialFieldValues, validate);\r\n\r\n    const showToast = () => {\r\n        addToast(\"Transaction is Successful\", { appearance: 'success' })\r\n        addToast(\"Transaction is Successful\", { appearance: 'success' })\r\n        addToast(\"Transaction is Successful\", { appearance: 'success' })\r\n\r\n\r\n    }\r\n\r\n    const handleFormChange = (e) => {\r\n        e.preventDefault();\r\n\r\n\r\n        //pick Deposit according to category\r\n        var category = props.categoryList.find(x => x.id == values.categoryId);\r\n        //    var deposit = props.depositList.find(x => x.name == category.name);\r\n\r\n        //    deposit == undefined ? values.depVal = 0 : values.depVal = deposit.amount;\r\n        //    // values.depVal = 0;\r\n        //    if (values.shells == undefined) {\r\n        //        values.shells = 0;\r\n        //    }\r\n\r\n        if (values.stockInHand < values.quantity) {\r\n            console.log(\" oops soory \" + values.stockInHand);\r\n            setTittle(\"Ooops!! Sorry The requested quantity is not available, Available  stocks is: \" + values.stockInHand);\r\n            openInErrorDialog();\r\n            setErrorDialog({\r\n                onConfirm: () => { }\r\n            })\r\n            values.quantity = \"\";\r\n            // values.shells = \"\";\r\n        }\r\n        //console.log(values.quantity);\r\n\r\n        if (values.discount > values.discountLimit) {\r\n            // console.log(\" oops soory \" + values.stockInHand);\r\n            setTittle(\"Ooops!! Sorry, discount should be below: \" + values.discountLimit + \" KES\");\r\n            openInErrorDialog();\r\n            setErrorDialog({\r\n                onConfirm: () => { }\r\n            })\r\n            // values.quantity = \"\";\r\n            // values.shells = \"\";\r\n        } else {\r\n            if (validate()) {\r\n\r\n                const CalcDiscount = () => {\r\n                    // var dis = values.discount / 100;\r\n                    // var disAmount = dis * values.sellingPrice;\r\n                    values.discountPrice = parseFloat(values.sellingPrice - values.discount);\r\n                    values.sellingPrice = values.discountPrice;\r\n                    // console.log(values.discountPrice);\r\n                }\r\n                // if (creditTransList.balance > 0) {\r\n\r\n                //     setTittle(\"The customer has an outstanding balance of \" + creditTransList.balance + \" The balance must be cleared before any other credit transaction\");\r\n                //     openInErrorDialog();\r\n                //     setErrorDialog({\r\n                //         onConfirm: () => { }\r\n                //     })\r\n\r\n                //     resetF();\r\n\r\n                // } else {\r\n                if (values.quantity > 0) {\r\n\r\n                    if (values.discount > 0) {\r\n                        CalcDiscount();\r\n                    } else {\r\n                        values.discount = 0;\r\n                    }\r\n                    const newProduct = {\r\n\r\n                        productId: values.productId,\r\n                        name: values.name,\r\n                        size: values.size,\r\n                        sellingPrice: values.sellingPrice,\r\n                        quantity: parseInt(values.quantity),\r\n                        // shells: parseInt(values.shells),\r\n                        // diffShell: values.depVal !=0?parseInt(values.quantity) - parseInt(values.shells): 0,\r\n                        // deposit: Math.round(((parseInt(values.quantity) - parseInt(values.shells)) * parseInt(values.depVal))),\r\n                        totalPrice: Math.round(((parseFloat(values.quantity) * parseFloat(values.sellingPrice)))),\r\n                        // total: Math.round(((parseFloat(values.quantity) * parseFloat(values.sellingPrice)))) + Math.round(((parseInt(values.quantity) - parseInt(values.shells)) * parseInt(values.depVal))),\r\n                        discount: parseFloat(values.discount),\r\n                        total: parseFloat(values.quantity) * parseFloat(values.sellingPrice),\r\n                        tax: Math.round(((parseFloat(values.quantity) * parseFloat(values.sellingPrice) * parseFloat(tax))))\r\n                    };\r\n\r\n                    const newTDetail = {\r\n\r\n                        transCode: tCode,\r\n                        productId: values.productId,\r\n                        sellingPrice: values.sellingPrice,\r\n                        quantity: parseInt(values.quantity),\r\n                        // shells: parseInt(values.shells),\r\n                        // diffShell: values.depVal !=0?parseInt(values.quantity) - parseInt(values.shells): 0,\r\n                        // deposit: Math.round(((parseInt(values.quantity) - parseInt(values.shells)) * parseInt(values.depVal))),\r\n                        totalPrice: Math.round(((parseFloat(values.quantity) * parseFloat(values.sellingPrice)))),\r\n                        discount: parseFloat(values.discount),\r\n                        // total: Math.round(((parseFloat(values.quantity) * parseFloat(values.sellingPrice)))) + Math.round(((parseInt(values.quantity) - parseInt(values.shells)) * parseInt(values.depVal))),\r\n                        total: parseFloat(values.quantity) * parseFloat(values.sellingPrice),\r\n                        tax: Math.round(((parseFloat(values.quantity) * parseFloat(values.sellingPrice) * parseFloat(tax))))\r\n                    }\r\n\r\n\r\n\r\n                    const newProducts = [...products, newProduct];\r\n                    const newTDetails = [...transDetails, newTDetail];\r\n                    setProducts(newProducts);\r\n                    settransDetails(newTDetails);\r\n                    // setTotalDep(2000);\r\n                    // setTotal(3000);\r\n                    //  settransDetails(newProducts);\r\n                    // console.log(newProducts);\r\n                    resetF();\r\n\r\n                } else {\r\n\r\n                    setTittle(\"Please specify quantity and no of shells\");\r\n                    openInErrorDialog();\r\n                    setErrorDialog({\r\n                        onConfirm: () => { }\r\n                    })\r\n\r\n\r\n                }\r\n\r\n                // }\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n    const resetF = () => {\r\n        setValues({\r\n            ...initialFieldValues\r\n        })\r\n        setErrors({})\r\n\r\n    }\r\n\r\n\r\n    // const setId = () => {\r\n    //     setCurrentId(record.productId)\r\n    // }\r\n    const getCId = e => {\r\n        // const target = e.target;\r\n        setCurrentProductId(e);\r\n        setProductId(e);\r\n        // console.log(productId)\r\n    }\r\n    const getUnitPrice = e => {\r\n        const target = e.target;\r\n        setUPrice(target.value);\r\n        //console.log(setUPrice);\r\n\r\n    }\r\n    const productByName = (name) => {\r\n        setFProducts([...props.productsList.filter(x => x.name === name)])\r\n    }\r\n\r\n    const getQuantity = e => {\r\n        const target = e.target;\r\n        setQuant(target.value);\r\n        console.log(uPrice);\r\n\r\n\r\n    }\r\n\r\n    const calculateTotalPrice = () => {\r\n\r\n        var totalP = parseFloat(uPrice) * parseFloat(quant)\r\n        // setQuant(fieldValues.quantity)\r\n        //  setSHand(fieldValues.stockInHand);\r\n        console.log(totalP);\r\n\r\n\r\n    }\r\n\r\n    // const getStoreId = s => {\r\n\r\n    //     setSId(s);\r\n    // }\r\n\r\n    const clearField = () => {\r\n        setValue(props.productsList.clearField);\r\n\r\n        console.log(\"open = true\")\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        if (gTotal != 0) {\r\n            const onSuccess = () => {\r\n                showToast();\r\n                resetF();\r\n                // clearField();\r\n\r\n            }\r\n\r\n            const transaction = {\r\n                transCode: \"CS-\" + uuid().substring(0, 8).toUpperCase(),\r\n                customerId: values.customerId,\r\n                // gDeposit: gDeposit,\r\n                totalPrice: gTotalPrice,\r\n                gTotal: gTotal,\r\n                quantity: totalQnty,\r\n                amnt: parseFloat(gTotal),\r\n                balance: parseFloat(gTotal),\r\n                userId: window.userId.toString(),\r\n                totalTax: totalTax\r\n            };\r\n\r\n\r\n\r\n\r\n            transDetails.forEach((transDetail) => {\r\n\r\n                transDetail.transCode = transaction.transCode;\r\n                props.createCreditSaleDetails(transDetail);\r\n                //update stockinHand foreachItem\r\n                var prods = props.productsList.find(x => x.productId == transDetail.productId);\r\n                var stockInHand = parseInt(prods.stockInHand) - parseInt(transDetail.quantity);\r\n                props.updateStockInHand(transDetail.productId, { stockInHand: stockInHand });\r\n                console.log(transDetail);\r\n            });\r\n            props.createCreditSale(transaction, onSuccess);\r\n            console.log(transaction);\r\n            // openInPopup();\r\n            setOpenRPopup(true);\r\n            setRecordList(products);\r\n            setTrans(transaction);\r\n            setCompanyData(props.companyDataList);\r\n            setCustomerData(props.customersList);\r\n            resetF();\r\n            setProducts([]);\r\n\r\n            // if (props.openPopup == true) {\r\n            //     props.setOpenPopup(false)\r\n            // }\r\n        } else {\r\n            setTittle(\"Please choose products for sale.\");\r\n            openInErrorDialog();\r\n            setErrorDialog({\r\n                onConfirm: () => { }\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        props.fetchAllCompanyData();\r\n        props.fetchAllCustomers();\r\n        props.fetchAllProducts();\r\n        props.fetchAllStockIn();\r\n        props.fetchAllTransactions();\r\n        props.fetchAllDeposit();\r\n        props.fetchAllCategory();\r\n        props.fetchAllTaxes();\r\n        console.log(selectedCustomer);\r\n        if (selectedCustomer > 0) {\r\n            setCreditTransList({\r\n                //...props.addStaffList.find(x => x.id == props.currentId),\r\n                ...props.creditSalesList.find(x => x.customerId == selectedCustomer && x.balance > 0),\r\n\r\n\r\n            })\r\n            //console.log(creditTransList);\r\n\r\n\r\n        }\r\n\r\n        if (props.currentId != 0 || productId != 0) {\r\n            setValues({\r\n                //...props.addStaffList.find(x => x.id == props.currentId),\r\n                ...props.productsList.find(x => x.productId == productId),\r\n\r\n                ...props.storeProductsList.find(a => a.productId == productId) && props.storeProductsList.find(b => b.storeId == 2),\r\n            })\r\n            // calcUnitPrice();\r\n            const prd = { ...props.productsList.find(x => x.productId == productId) };\r\n            CalcTax(prd.taxId);\r\n        }\r\n\r\n        setErrors({})\r\n    }, [productId])\r\n\r\n    const CalcTax = (tId) => {\r\n        console.log(tId);\r\n        const tax = { ...props.taxList.find(x => x.taxId === tId) };\r\n        // setTaxId(tax.taxId);\r\n        if (tax.rate === undefined) {\r\n            tax.rate = 0;\r\n        }\r\n        let taxRate = parseFloat(tax.rate / 100);\r\n        setTax(taxRate);\r\n\r\n    }\r\n    // const calcUnitPrice = () => {\r\n    //     var product = { ...props.productsList.find(x => x.productId == productId) };\r\n    //     var profit = product.markup;\r\n    //     var buyingPrice = product.buyingPrice;\r\n    //     var sP1 = profit / 100\r\n    //     var sP2 = sP1 * buyingPrice;\r\n    //     var sP3 = buyingPrice + sP2;\r\n\r\n    //     var sP4 = Math.ceil(sP3 / 10) * 10;\r\n    //     if(product.markup !== 0){\r\n    //         values.sellingPrice = sP4;\r\n    //     }\r\n    //     // console.log(sP4);\r\n    //     setValues({\r\n    //         name: product.name,\r\n    //         sellingPrice: values.sellingPrice,\r\n    //         stockInHand: product.stockInHand,\r\n    //         discountLimit: product.discountLimit\r\n    //     })\r\n    //     // console.log(product.discountLimit);\r\n\r\n    // }\r\n\r\n    const calcUnitPrice = () => {\r\n        var product = { ...props.productsList.find(x => x.productId == productId) };\r\n        var profit = product.markup;\r\n        var buyingPrice = product.buyingPrice;\r\n        var sP1 = profit / 100\r\n        var sP2 = sP1 * buyingPrice;\r\n        var sP3 = buyingPrice + sP2;\r\n\r\n        var sP4 = Math.ceil(sP3 / 10) * 10;\r\n        \r\n\r\n        if(product.markup !== 0 || product.markup !== undefined){\r\n            values.sellingPrice = sP4;\r\n        }\r\n        console.log(product.markup);\r\n        setValues({\r\n            name: product.name,\r\n            sellingPrice: values.sellingPrice,\r\n            stockInHand: product.stockInHand,\r\n            discountLimit: product.discountLimit\r\n        })\r\n        // console.log(product.discountLimit);\r\n\r\n    }\r\n    const onDelete = id => {\r\n        props.deleteStockIn(id, showToast)\r\n        setConfirmDialog(false)\r\n\r\n    }\r\n\r\n    const openInDialog = () => {\r\n        setConfirmDialog(true)\r\n\r\n\r\n\r\n    }\r\n    const openInErrorDialog = () => {\r\n        setErrorDialog(true)\r\n\r\n\r\n\r\n    }\r\n\r\n    const getChange = e => {\r\n        const target = e.target;\r\n        setQuant(target.value);\r\n        console.log(uPrice);\r\n    }\r\n\r\n    var gTotal = (products.reduce((gTotal, currentItem) => gTotal = gTotal + currentItem.total, 0));\r\n    var gDeposit = (products.reduce((gDeposit, currentItem) => gDeposit = gDeposit + currentItem.deposit, 0));\r\n    var gTotalPrice = (products.reduce((gTotalPrice, currentItem) => gTotalPrice = gTotalPrice + currentItem.totalPrice, 0));\r\n    var totalQnty = (products.reduce((totalQnty, currentItem) => totalQnty = totalQnty + currentItem.quantity, 0));\r\n    var totalTax = (products.reduce((totalTax, currentItem) => totalTax = totalTax + currentItem.tax, 0));\r\n    const onRemoveProduct = (id) => {\r\n        var prod = products;\r\n        for (var i = 0; i < prod.length; i++) {\r\n            if (prod[i].productId == id) {\r\n                prod.splice(i, 1);\r\n                console.log(i);\r\n                const newProd = [...products, prod];\r\n                setProducts(prod);\r\n\r\n            }\r\n        }\r\n        setConfirmDialog(false);\r\n\r\n    }\r\n\r\n    const editItem=(productId)=>{\r\n        setValues({...products.find(x => x.productId == productId)});\r\n        onRemoveProduct(productId);\r\n    }\r\n\r\n    const openInPopup = () => {\r\n        //setRecordList(record);\r\n        setOpenRPopup(true);\r\n    }\r\n\r\n    const checkBalance = (id) => {\r\n\r\n\r\n        if (id > 0) {\r\n            setCreditTransList({\r\n                //...props.addStaffList.find(x => x.id == props.currentId),\r\n                ...props.creditSalesList.find(x => x.customerId == id && x.balance > 0),\r\n\r\n\r\n            })\r\n\r\n        }\r\n\r\n        console.log(\"Balance has been checked\");\r\n        console.log(selectedCustomer);\r\n        console.log(creditTransList);\r\n\r\n\r\n        if (creditTransList.balance > 0) {\r\n            setTittle(\"The customer has an outstanding balance of \" + creditTransList.balance + \" The balance must be cleared before any other credit transaction\");\r\n            openInErrorDialog();\r\n            setErrorDialog({\r\n                onConfirm: () => { }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n\r\n            <section className=\"content\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        {/* left column */}\r\n                        <div className=\"col-md-12\">\r\n                            {/* jquery validation */}\r\n                            <div className=\"card card-primary\">\r\n                                <div className=\"card-header\">\r\n                                    <h4 className=\"card-title\">Credit Sale <small> </small></h4>\r\n                                </div>\r\n                                {/* /.card-header */}\r\n                                {/* form start */}\r\n                                <form id=\"quickForm\" autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleFormChange}>\r\n\r\n\r\n                                    <Grid container>\r\n                                        <Grid item xs={2.5}>\r\n                                            <Autocomplete\r\n                                                //id=\"country-select-demo\"\r\n                                                className=\"form-ctr\"\r\n                                                sx={{ width: 30 }}\r\n\r\n                                                options={props.customersList}\r\n\r\n                                                autoHighlight\r\n                                                getOptionLabel={(option) => option.name}\r\n                                                onSelect={handleInputChange}\r\n                                                //getOptionSelected ={}\r\n\r\n                                                onChange={(_event, newCustomer) => {\r\n\r\n                                                    setSelectedCustomer(newCustomer.id);\r\n                                                    // checkBalance(newCustomer.id);\r\n                                                    setCustomerData({ ...props.customersList.find(x => x.id == newCustomer.id), });\r\n\r\n\r\n                                                }}\r\n\r\n\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        style={{ width: '10%' }}\r\n                                                        {...params}\r\n                                                        label=\"Choose a Customer\"\r\n                                                        name=\"customerId\"\r\n                                                        inputProps={{\r\n                                                            ...params.inputProps,\r\n                                                            autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                        }}\r\n                                                        variant=\"outlined\"\r\n                                                        className=\"form-ctr\"\r\n                                                        id=\"input-with-icon-textfield\"\r\n                                                        value={values.customerId = selectedCustomer}\r\n                                                        onChange={handleInputChange}\r\n                                                        {...(errors.customerId && { error: true, helperText: errors.customerId })}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n <Grid>\r\n                                         <Autocomplete\r\n                                                //id=\"country-select-demo\"\r\n                                                className=\"form-ctr\"\r\n                                                sx={{ width: 30 }}\r\n\r\n                                                options={fProducts}\r\n\r\n                                                autoHighlight\r\n                                                getOptionLabel={(option) => option.size}\r\n                                                onSelect={handleInputChange}\r\n                                                //getOptionSelected ={}\r\n\r\n                                                onChange={(_event, newProduct) => {\r\n\r\n                                                    setSelectedProduct(newProduct.productId);\r\n                                                    // checkBalance(newCustomer.id);\r\n                                                    // setCustomerData({ ...props.customersList.find(x => x.id == newCustomer.id), });\r\n                                                    getCId(newProduct.productId);\r\n\r\n                                                }}\r\n\r\n\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        style={{ width: '10%' }}\r\n                                                        {...params}\r\n                                                        label=\"Select a Size\"\r\n                                                        name=\"productId\"\r\n                                                        inputProps={{\r\n                                                            ...params.inputProps,\r\n                                                            autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                        }}\r\n                                                        variant=\"outlined\"\r\n                                                        className=\"form-ctr\"\r\n                                                        id=\"input-with-icon-textfield\"\r\n                                                        value={values.productId = selectedProduct}\r\n                                                        onChange={handleInputChange}\r\n                                                        {...(errors.size && { error: true, helperText: errors.size })}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                         </Grid>\r\n                                        </Grid>\r\n                                        <Grid item xs={2.5}>\r\n\r\n                                            <Autocomplete\r\n                                                //id=\"country-select-demo\"\r\n                                                className=\"form-ctr\"\r\n                                                sx={{ width: 30 }}\r\n\r\n                                                options={props.productsList}\r\n\r\n                                                autoHighlight\r\n                                                getOptionLabel={(option) => option.name}\r\n                                                onSelect={handleInputChange}\r\n                                                //getOptionSelected ={}\r\n\r\n                                                onChange={(_event, newProduct) => {\r\n\r\n                                                    setSelectedProduct(newProduct.productId);\r\n                                                    // checkBalance(newCustomer.id);\r\n                                                    // setCustomerData({ ...props.customersList.find(x => x.id == newCustomer.id), });\r\n                                                    getCId(newProduct.productId);\r\n                                                    productByName(newProduct.name);\r\n\r\n                                                }}\r\n\r\n\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        style={{ width: '10%' }}\r\n                                                        {...params}\r\n                                                        label=\"Select a product\"\r\n                                                        name=\"productId\"\r\n                                                        inputProps={{\r\n                                                            ...params.inputProps,\r\n                                                            autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                        }}\r\n                                                        variant=\"outlined\"\r\n                                                        className=\"form-ctr\"\r\n                                                        id=\"input-with-icon-textfield\"\r\n                                                        value={values.productId = selectedProduct}\r\n                                                        onChange={handleInputChange}\r\n                                                        {...(errors.productId && { error: true, helperText: errors.productId })}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        \r\n\r\n                                        </Grid>\r\n\r\n\r\n                                    </Grid>\r\n\r\n\r\n\r\n\r\n                                    <TextField\r\n                                        className=\"form-ctr\"\r\n                                        id=\"input-with-icon-textfield\"\r\n                                        variant=\"outlined\"\r\n                                        type=\"text\"\r\n                                        name=\"productId\"\r\n                                        label=\"Product Code\"\r\n                                        InputLabelProps={{\r\n                                            startAdornment: (\r\n                                                <InputAdornment position=\"start\">\r\n                                                    <AccountCircle />\r\n                                                </InputAdornment>\r\n                                            ),\r\n                                        }}\r\n                                        value={values.productId}\r\n                                        onChange={handleInputChange, calcUnitPrice}\r\n                                        {...(errors.productId && { error: true, helperText: errors.productId })}\r\n                                    />\r\n                                    {/* <TextField\r\n                                        className=\"form-ctr\"\r\n                                        id=\"input-with-icon-textfield\"\r\n                                        variant=\"outlined\"\r\n                                        type=\"text\"\r\n                                        name=\"Description\"\r\n                                        label=\"Description\"\r\n                                        InputLabelProps={{\r\n                                            startAdornment: (\r\n                                                <InputAdornment position=\"start\">\r\n                                                    <AccountCircle />\r\n                                                </InputAdornment>\r\n                                            ),\r\n                                        }}\r\n                                        value={values.description}\r\n                                        onChange={handleInputChange}\r\n                                        {...(errors.description && { error: true, helperText: errors.description })}\r\n                                    />\r\n\r\n\r\n                                    <TextField className=\"form-ctr\" name=\"size\" label=\"Size\" value={values.size}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n\r\n                                        {... (errors.size && { error: true, helperText: errors.size })}\r\n                                    /> */}\r\n\r\n                                    <TextField className=\"form-ctr\" name=\"sellingPrice\" label=\"Unit Price\" value={values.sellingPrice}\r\n                                        onChange={handleInputChange}\r\n\r\n                                        variant=\"outlined\"\r\n\r\n                                        {... (errors.sellingPrice && { error: true, helperText: errors.sellingPrice })}\r\n                                    />\r\n\r\n\r\n                                    <TextField className=\"form-ctr\" name=\"quantity\" label=\"Quantity\" value={values.quantity}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n                                        {... (errors.quantity && { error: true, helperText: errors.quantity })}\r\n\r\n                                    />\r\n                                    <TextField className=\"form-ctr\" name=\"discount\" label=\"Discount\" value={values.discount}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n                                        {... (errors.discount && { error: true, helperText: errors.discount })}\r\n\r\n                                    />\r\n                                    {/* <TextField className=\"form-ctr\" name=\"shells\" label=\"Shells\" value={values.shells}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n                                        {... (errors.shells && { error: true, helperText: errors.shells })}\r\n\r\n                                    /> */}\r\n\r\n\r\n                                    <br />\r\n                                    <br />\r\n                                    {/* /.card-body */}\r\n                                    <div className=\"card-footer\">\r\n                                        <div>\r\n                                            <button variant=\"contained\" type=\"submit\" className=\"btn btn-primary\"  >Add To Cart</button>\r\n                                            {/* <button variant=\"contained\"\r\n                                                className=\"btn btn-secondary\"\r\n                                                onClick={resetF} style={{ marginLeft: 3 }}>Reset</button> */}\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </form>\r\n                                <form id=\"quickForm\" autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n                                    <div className={classes.grid}>\r\n                                        <table class=\"table .table-responsive{-sm|-md|-lg|-xl|-xxl} table-bordered table-hover table-sm table-striped\" >\r\n\r\n                                            <thead class=\"thead-dark\">\r\n                                                <tr>\r\n                                                    {/* <th scope=\"col\">Product Id</th> */}\r\n                                                    <th scope=\"col\">Name</th>\r\n                                                    {/* <th scope=\"col\">Size</th>\r\n                                                    <th scope=\"col\">Category</th> */}\r\n                                                    <th scope=\"col\">Unit Price</th>\r\n                                                    <th scope=\"col\">Quantity</th>\r\n                                                    <th scope=\"col\">Discount</th>\r\n                                                    {/* <th scope=\"col\">Shells</th>\r\n                                                    <th scope=\"col\">- Shells</th>\r\n                                                    <th scope=\"col\">Deposit</th> */}\r\n                                                    <th scope=\"col\">Total Price</th>\r\n                                                    <th scope=\"col\">Total</th>\r\n                                                    {/* <th scope=\"col\">Actions</th> */}\r\n\r\n\r\n                                                    <th></th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {products.map((product) =>\r\n                                                (\r\n                                                    <tr>\r\n                                                        {/* <td>{product.productId}</td> */}\r\n                                                        <td>{product.name}</td>\r\n                                                        {/* <td>{product.size}</td>\r\n                                                        <td>{product.category}</td> */}\r\n                                                        <td>{product.sellingPrice}</td>\r\n                                                        <td>{product.quantity}</td>\r\n                                                        <td>{product.discount}</td>\r\n                                                        {/* <td>{product.diffShell}</td> */}\r\n                                                        {/* <td>{product.deposit}</td>  */}\r\n                                                        <td>{product.totalPrice}</td>\r\n                                                        <td>{product.total}</td>\r\n\r\n\r\n                                                        <td>\r\n                                                            <ButtonGroup variant=\"text\">\r\n                                                                <Button><EditIcon color=\"primary\"\r\n                                                                onClick={() => { editItem(product.productId) }} \r\n                                                                /></Button>\r\n                                                                <Button><DeleteIcon color=\"Secondary\"\r\n                                                                    onClick={() => {\r\n                                                                        openInDialog()\r\n                                                                        setConfirmDialog({\r\n                                                                            onConfirm: () => { onRemoveProduct(product.productId) }\r\n                                                                        })\r\n\r\n                                                                        // onRemoveProduct(product.productId)\r\n                                                                    }\r\n                                                                    }\r\n\r\n                                                                /></Button>\r\n                                                            </ButtonGroup>\r\n                                                        </td>\r\n                                                    </tr>\r\n\r\n                                                )\r\n\r\n\r\n                                                )}\r\n\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                    <br />\r\n\r\n                                    {/* <TextField className=\"form-ctr\" name=\"totalDeposit\" label=\"Total Depost\" value={gDeposit}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n\r\n                                        {... (errors.totaldeposit && { error: true, helperText: errors.totaldeposit })}\r\n                                    /> */}\r\n\r\n\r\n                                    <TextField className=\"form-ctr\" name=\"total\" label=\"Total Price\" value={gTotalPrice}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n\r\n                                        {... (errors.gTotalPrice && { error: true, helperText: errors.gTotalPrice })}\r\n                                    />\r\n\r\n                                    <TextField className=\"form-ctr\" name=\"grandTotal\" label=\"Grand Total\" value={gTotal}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n\r\n                                        {... (errors.gTotal && { error: true, helperText: errors.gTotal })}\r\n                                    />\r\n\r\n\r\n                                    <TextField className=\"form-ctr\" name=\"amntPaid\" label=\"Amount Paid\" value={gTotal}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n\r\n                                        {... (errors.amntPaid && { error: true, helperText: errors.amntPaid })}\r\n                                    />\r\n                                    {/* <TextField className=\"form-ctr\" name=\"change\" label=\"Change\" value={values.change}\r\n                                        onChange={handleInputChange}\r\n                                        variant=\"outlined\"\r\n\r\n\r\n                                        {... (errors.change && { error: true, helperText: errors.change })}\r\n                                    /> */}\r\n\r\n                                    <div className=\"card-footer\">\r\n                                        <div>\r\n                                            <button variant=\"contained\" type=\"submit\" className=\"btn btn-primary\"  >Credit</button>\r\n                                            {/* <button variant=\"contained\"\r\n                                                className=\"btn btn-secondary\"\r\n                                                style={{ marginLeft: 3 }}>Reset</button> */}\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </form>\r\n\r\n                                <div className=\"card-footer\">\r\n                                    <div>\r\n                                        <button variant=\"contained\" className=\"btn btn-primary\" onClick={() => { setOpenIPopup(true); }} >Print Invoice</button>\r\n                                        <button variant=\"contained\" className=\"btn btn-primary\" style={{ marginLeft: 5 }} onClick={() => { setOpenDlPopup(true); }}>Print Delivery Note</button>\r\n                                        {/* <button variant=\"contained\" className=\"btn btn-primary\" style={{ marginLeft: 5 }} onClick={() => { setOpenDlPopup(true); }}>Print Credit Note</button> */}\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* /.card */}\r\n                        </div>\r\n                        {/*/.col (left) */}\r\n                        {/* right column */}\r\n                        <div className=\"col-md-6\">\r\n                        </div>\r\n                        {/*/.col (right) */}\r\n                    </div>\r\n                    {/* /.row */}\r\n                </div>{/* /.container-fluid */}\r\n            </section>\r\n\r\n            <ConfirmDialog\r\n                title=\"Are you sure you want to remove this product from the cart?\"\r\n                // subTitle=\"This operation can't be reversed\"\r\n                confirmDialog={confirmDialog}\r\n                setConfirmDialog={setConfirmDialog}\r\n            />\r\n\r\n            <ErrorDialog\r\n                title={tittle}\r\n                // subTitle=\"This operation can't be reversed\"\r\n                errorDialog={errorDialog}\r\n                setErrorDialog={setErrorDialog}\r\n            />\r\n\r\n            <RPopup\r\n                title=\"Reciept\"\r\n                openRPopup={openRPopup}\r\n                setOpenRPopup={setOpenRPopup}\r\n            >\r\n                <PrintReciept\r\n                    {...({ customerData, companyData, trans, recordList, setRecordList, setOpenRPopup, totalTax })}\r\n                //addorEdit={addorEdit}\r\n                />\r\n            </RPopup>\r\n\r\n            <IPopup\r\n                title=\"Invoice\"\r\n                openIPopup={openIPopup}\r\n                setOpenIPopup={setOpenIPopup}\r\n            >\r\n                {/* <PrintReciept\r\n                    {...({ companyData, trans, recordList, setRecordList, setOpenRPopup })}\r\n                //addorEdit={addorEdit}\r\n                /> */}\r\n                <Invoice\r\n                    {...({ products, setOpenIPopup, gTotalPrice, customerData, totalTax })}\r\n                />\r\n            </IPopup>\r\n            <DlPopup\r\n                title=\"Delivery Note\"\r\n                openDlPopup={openDlPopup}\r\n                setOpenDlPopup={setOpenDlPopup}\r\n            >\r\n                {/* <PrintReciept\r\n                    {...({ companyData, trans, recordList, setRecordList, setOpenRPopup })}\r\n                //addorEdit={addorEdit}\r\n                /> */}\r\n                <DeliveryNote\r\n                    {...({ products, setOpenDlPopup, gTotalPrice, totalTax })}\r\n                />\r\n            </DlPopup>\r\n        </>\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    addStaffList: state.addStaff.list,\r\n    storesList: state.stores.list,\r\n    userLevelList: state.userLevel.list,\r\n    suppliersList: state.suppliers.list,\r\n    productsList: state.products.list,\r\n    storeProductsList: state.storeProducts.list,\r\n    stockInList: state.stockIns.list,\r\n    storeIdNProductIdList: state.storeProducts.list,\r\n    creditSalesList: state.creditSale.list,\r\n    companyDataList: state.companyData.list,\r\n    customersList: state.customers.list,\r\n    depositList: state.deposit.list,\r\n    categoryList: state.category.list,\r\n    taxList: state.tax.list\r\n\r\n})\r\n\r\n\r\n\r\nconst mapActionToProps = {\r\n    createStockIns: stockInActions.createStockIn,\r\n    createStoreProduct: storeProductActions.createStoreProduct,\r\n    updateStockIn: stockInActions.updateStockIn,\r\n    updateStoreProducts: storeProductActions.updateStoreProducts,\r\n    fetchAllStores: storeActions.fetchAllStore,\r\n    fetchAllUserLevel: userLevelActions.fetchAllUserLevel,\r\n    fetchAllSuppliers: supplierActions.fetchAllSupplier,\r\n    updateStockInHand: productActions.updateStockInHand,\r\n    fetchAllProducts: productActions.fetchAllProduct,\r\n    fetchAllStoreProduct: storeProductActions.fetchAllStoreProducts,\r\n    fetchAllStockIn: stockInActions.fetchAllStockIn,\r\n    fetchByStoreIdNProductId: storeProductActions.fetchByStoreIdNProductId,\r\n    updateProducts: productActions.updateProduct,\r\n    createCreditSale: creditSalesActions.createCreditSaleTransaction,\r\n    createCreditSaleDetails: creditSalesActions.createCreditSaleTransactionDetail,\r\n    fetchAllTransactions: creditSalesActions.fetchAllTransactions,\r\n    fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n    fetchAllCustomers: customerActions.fetchAllCustomer,\r\n    fetchAllDeposit: Dactions.fetchAllDeposit,\r\n    fetchAllCategory: categActions.fetchAllCategory,\r\n    fetchAllTaxes: TActions.fetchAllTaxes\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(CreditSale));\r\n\r\n"],"sourceRoot":""}