{"version":3,"sources":["views/Components/Forms/Tax/AddTax/AddTaxForm.js"],"names":["initialFieldValues","taxName","rate","mapActionToProps","createTax","TActions","fetchAllTaxes","DeleteTax","updateTax","connect","state","taxList","tax","list","withStyles","theme","root","margin","spacing","minWidth","formControl","smMargin","_ref","classes","props","_objectWithoutProperties","_excluded","addToast","useToasts","validate","fieldValues","arguments","length","undefined","values","temp","_objectSpread","errors","setErrors","Object","every","x","_useForm","useForm","setCurrentId","_useForm2","_slicedToArray","setValues","handleInputChange","resetForm","useEffect","currentId","find","id","_jsx","className","children","_jsxs","autoComplete","noValidate","onSubmit","e","preventDefault","onSuccess","appearance","fetchAllDeposit","openPopup","setOpenPopup","parseFloat","TextField","name","label","value","onChange","error","helperText","type","variant","onClick","style","marginLeft"],"mappings":"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","file":"static/js/60.ffbff298.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { FormControl, Grid, TextField, withStyles, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\r\nimport { useForm } from \"../../useForm\";\r\nimport { connect } from \"react-redux\";\r\n//import * as actions from \"../../../../../actions/Staff/addStaff\";\r\nimport * as TActions from \"../../../../../actions/Tax/tax\";\r\n//import * as userLevelActions from \"../../../../../actions/UserLevel/userLevel\";\r\nimport { ToastConsumer, useToasts } from \"react-toast-notifications\";\r\nimport \"../../staffForm.css\";\r\nimport { RestoreSharp } from \"@material-ui/icons\";\r\nimport * as categActions from \"../../../../../actions/Category/categories\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n})\r\n\r\nconst initialFieldValues = {\r\n\r\n   \r\n    taxName: '',\r\n    rate: '',\r\n    // phone: '',\r\n    // location: '',\r\n    // // email: '',\r\n    // // address: '',\r\n    // companyDataId: '',\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst AddTaxForm = ({ classes, ...props }) => {\r\n\r\n    //toast message\r\n    const { addToast } = useToasts()\r\n\r\n    //realtime validation for the whole form controls\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('taxName' in fieldValues) {\r\n            temp.taxName = fieldValues.taxName ? \"\" : \"This field is required\"\r\n            // addToast(\"User data saved succeffuly\", {appearance:'success'})\r\n            // console.log(\"Tast has beeen displayed\")\r\n        }\r\n\r\n\r\n        // if ('description' in fieldValues) {\r\n        //     temp.description = fieldValues.description ? \"\" : \"This field is required\"\r\n        // }\r\n        if ('rate' in fieldValues) {\r\n            temp.rate = fieldValues.rate ? \"\" : \"This field is required\"\r\n        }\r\n\r\n\r\n\r\n        // if ('location' in fieldValues) {\r\n        //     temp.location = fieldValues.location ? \"\" : \"This field is required\"\r\n        // }\r\n\r\n\r\n        // if ('email' in fieldValues) {\r\n        //     if (temp.email != \" \") {\r\n        //         temp.email = (/^&|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid\"\r\n        //     }\r\n        // }\r\n        // if ('phone' in fieldValues) {\r\n        //     temp.phone = fieldValues.phone ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('companyDataId' in fieldValues) {\r\n        //     temp.companyDataId = fieldValues.companyDataId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('userLevelId' in fieldValues) {\r\n        //     temp.userLevelId = fieldValues.userLevelId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('storeId' in fieldValues) {\r\n        //     temp.storeId = fieldValues.storeId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('uName' in fieldValues) {\r\n        //     temp.uName = fieldValues.uName ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('password' in fieldValues) {\r\n        //     temp.password = fieldValues.password ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('cPswd' in fieldValues) {\r\n        //     temp.cPswd = fieldValues.cPswd ? \"\" : \"This field is required\"\r\n\r\n        // }\r\n\r\n\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const [\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    ] = useForm(initialFieldValues, validate, props.setCurrentId);\r\n\r\n    const showToast = () => {\r\n\r\n        addToast(\"Tax  saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"Tax  saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"Tax  saved succeffuly\", { appearance: 'success' })\r\n        props.fetchAllDeposit();\r\n    }\r\n\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n\r\n        if (validate()) {\r\n\r\n            const onSuccess = () => {\r\n                showToast();\r\n                resetForm();\r\n\r\n                if (props.openPopup == true) {\r\n                    props.setOpenPopup(false)\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            if (props.currentId == 0) {\r\n\r\n                //using toast notification\r\n\r\n                props.createTax({taxName:values.taxName, rate:parseFloat(values.rate)}, onSuccess)\r\n                //addorEdit(values, onSuccess)\r\n\r\n            }\r\n            else {\r\n                //using windows alert notification\r\n                //props.updateDCandidate(props.currentId, values, () => {window.alert('updated')})\r\n                //using toast notification\r\n                props.updateTax(props.currentId, {taxName:values.taxName, rate:parseFloat(values.rate)}, onSuccess)\r\n\r\n            }\r\n\r\n           \r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (props.currentId != 0)\r\n            setValues({\r\n                ...props.taxList.find(x => x.id == props.currentId)\r\n            })\r\n        setErrors({})\r\n        props.fetchAllTaxes();\r\n       \r\n\r\n\r\n\r\n    }, [props.currentId])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n        <section className=\"content\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    {/* left column */}\r\n                    <div className=\"col-md-12\">\r\n                        {/* jquery validation */}\r\n                        <div className=\"card card-primary\">\r\n                            <div className=\"card-header\">\r\n                                <h4 className=\"card-title\">Add Tax <small> </small></h4>\r\n                            </div>\r\n                            {/* /.card-header */}\r\n                            {/* form start */}\r\n                            <form id=\"quickForm\" autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n                              \r\n\r\n                                <TextField className=\"form-ctr\" name=\"taxName\" label=\"Tax Name\" value={values.taxName}\r\n                                    onChange={handleInputChange}\r\n\r\n\r\n                                    {... (errors.taxName && { error: true, helperText: errors.taxName })}\r\n                                />\r\n\r\n                                <TextField className=\"form-ctr\" name=\"rate\" label=\"Rate%\" value={values.rate}\r\n                                    onChange={handleInputChange}\r\n\r\n\r\n                                    {... (errors.rate && { error: true, helperText: errors.rate })}\r\n                                />\r\n\r\n\r\n                               \r\n                             \r\n\r\n                           \r\n                               \r\n\r\n\r\n\r\n\r\n                                {/* /.card-body */}\r\n                                <div className=\"card-footer\">\r\n                                    <div>\r\n                                        <button type=\"submit\" className=\"btn btn-primary\" >Save</button>\r\n                                        <button variant=\"contained\"\r\n                                            className=\"btn btn-secondary\"\r\n                                            onClick={resetForm} style={{ marginLeft: 3 }}>Reset</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </form>\r\n\r\n                        </div>\r\n                        {/* /.card */}\r\n                    </div>\r\n                    {/*/.col (left) */}\r\n                    {/* right column */}\r\n                    <div className=\"col-md-6\">\r\n                    </div>\r\n                    {/*/.col (right) */}\r\n                </div>\r\n                {/* /.row */}\r\n            </div>{/* /.container-fluid */}\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n    taxList: state.tax.list,\r\n    \r\n})\r\n\r\n\r\n\r\nconst mapActionToProps = {\r\n    createTax: TActions.createTax,\r\n    fetchAllTaxes: TActions.fetchAllTaxes,\r\n    DeleteTax: TActions.DeleteTax,\r\n    updateTax: TActions.updateTax,\r\n    \r\n  \r\n\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AddTaxForm));"],"sourceRoot":""}