{"version":3,"sources":["views/Reports/StockReport/StockOut/StockReportData.js","views/Reports/StockReport/StockOut/StockReport.js","views/Reports/SalesReport/BySalesMan/SalesReportBySalesManData.js"],"names":["mapActionToProps","fetchAllProducts","productActions","fetchAllNSTransactions","cashSalesActions","fetchAllTCTransactions","TCActions","fetchAllCSTransactions","creditSalesActions","fetchAllTransactionDetails","fetchAllCSTransactionDetails","fetchAllTCTransactionDetails","fetchAllExpenses","Eactions","fetchAllCompanyData","companyDataActions","connect","state","productsList","products","list","creditSalesList","creditSale","tcTransactionsList","trucks_cadetes","nSTransactionDeatail","cash","salesList","cashSale","cSaleDetailsList","credit","tcTransDetailsList","trucks","expensesList","expenses","companyDataList","companyData","withStyles","theme","root","fontSize","paper","margin","spacing","padding","grid","paddingLeft","td","textIndent","tr","backgroundColor","color","_ref","classes","props","_objectWithoutProperties","_excluded","componentRef","useRef","saleData","useEffect","stock","getStock","prodId","stk","find","x","productId","undefined","stockInHand","totalValue","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","_jsxs","_Fragment","children","_jsx","ReactToPrint","trigger","Controls","Button","text","variant","className","newButton","content","current","ref","class","scope","fd","concat","_toConsumableArray","nSaleList","cSaleList","result","forEach","a","this","prodName","date","quantity","unitPrice","totalPrice","deposit","total","push","parseFloat","Object","create","reduce","gTotalPrice","currentItem","gTotal","gQuantity","getStockData","map","record","index","hover","name","size","sellingPrice","nSTransactionDetail","_useState","useToasts","addToast","useState","_useState2","_slicedToArray","currentId","setCurrentId","_useState3","_useState4","confirmDialog","setConfirmDialog","_useState5","_useState6","plList","setPlList","_useState7","_useState8","_useState9","_useState10","expD","setExpD","_useState11","_useState12","dateR","setDateR","_useState13","_useState14","compD","setCompD","_useState15","_useState16","clicked","_useState17","_useState18","setNSaleList","_useState19","_useState20","setCSaleList","_useState21","_useState22","cTSales","setCTSales","_useState23","_useState24","useReactToPrint","Paper","elevation","Grid","container","item","xs","Toolbar","StockReportData","ConfirmDialog","title","subTitle","t","width","array","key","groupedSales","hash","obj","assign","_defineProperty","src","logo","alt","height","style","marginTop","keys","sale","sDet","saleMan","salesMan","gDeposit"],"mappings":"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","file":"static/js/9.06425c13.chunk.js","sourcesContent":["\r\nimport \"../style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../../actions/Expenses/expenses\";\r\nimport { DateRangePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../../actions/CompanyData/companyData\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport SalesReportBySalesManData from \"../../SalesReport/BySalesMan/SalesReportBySalesManData\";\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td: {\r\n    textIndent: \"50px\",\r\n  },\r\n  tr: {\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nconst StockReportData = ({ classes, ...props }) => {\r\n  const group = () => {\r\n\r\n  }\r\n\r\n  const componentRef = useRef();\r\n  let saleData = [];\r\n  let gTotalPrice = 0;\r\n  let gTotal = 0;\r\n  let gQuantity = 0;\r\n  useEffect(() => {\r\n    props.fetchAllProducts();\r\n    // props.companyData();\r\n    props.fetchAllCompanyData();\r\n    // console.log(\"Stock report data loaded\")\r\n    // console.log(props.companyDataList);\r\n\r\n  }, []);\r\n\r\n  const getStockData = () => {\r\n    // console.log(\"stock data\");\r\n    // console.log(props.nSaleList);\r\n    // console.log(props.cSaleList);\r\n    let fd = [...props.nSaleList, ...props.cSaleList];\r\n    // console.log(fd);\r\n\r\n    var result = [];\r\n\r\n    fd.forEach(function (a) {\r\n      if (!this[a.prodName] && !this[a.date]) {\r\n        this[a.prodName] = { date: a.date, prodName: a.prodName, quantity: 0, unitPrice: a.unitPrice, productId: a.productId, totalPrice: 0, deposit: 0, total: 0 };\r\n        result.push(this[a.prodName]);\r\n      }\r\n      this[a.prodName].quantity += parseFloat(a.quantity);\r\n      this[a.prodName].totalPrice += parseFloat(a.totalPrice);\r\n      this[a.prodName].deposit += parseFloat(a.deposit);\r\n      this[a.prodName].total += parseFloat(a.total);\r\n    }, Object.create(null));\r\n    // setSaleData(result);\r\n    // console.log(result);\r\n    saleData = result;\r\n    gTotalPrice = (saleData.reduce((gTotalPrice, currentItem) => gTotalPrice = gTotalPrice + currentItem.totalPrice, 0));\r\n    gTotal = (saleData.reduce((gTotal, currentItem) => gTotal = gTotal + currentItem.total, 0));\r\n    gQuantity = (saleData.reduce((gQuantity, currentItem) => gQuantity = gQuantity + currentItem.quantity, 0));\r\n    // console.log(saleData);\r\n\r\n  }\r\n  let stock = 0;\r\n  const getStock = (prodId) => {\r\n    // console.log(prodId);\r\n    var stk = props.productsList.find(x => x.productId === prodId);\r\n    if (stk !== undefined) {\r\n      stock = stk.stockInHand;\r\n    }\r\n\r\n    // console.log(stock);\r\n  }\r\n  let totalValue = 0;\r\n  const getTotals = (unitPrice, stockInHand) => {\r\n    var value = unitPrice * stockInHand;\r\n    totalValue = value + totalValue;\r\n\r\n  }\r\n\r\n  var today = new Date();\r\n  var dd = String(today.getDate()).padStart(2, '0');\r\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n  var yyyy = today.getFullYear();\r\n\r\n  today = yyyy + '-' + mm + '-' + dd;\r\n  return (\r\n\r\n    <>\r\n\r\n      <ReactToPrint\r\n        trigger={() => <Controls.Button\r\n          text=\"Print\"\r\n          variant=\"outlined\"\r\n          // startIcon={<AddIcon />}\r\n          className={classes.newButton}\r\n        // onClick={handlePrint} \r\n        />\r\n        }\r\n        content={() => componentRef.current}\r\n\r\n      />\r\n\r\n\r\n      <div >\r\n        <div ref={componentRef} className='p-5'>\r\n          <header>\r\n\r\n            <div className=\"logo\">\r\n              {/* <img src={props.companyDataList[0].logo} alt=\"generic business logo\" height={100} width={100} style={{ marginTop: 50 }} />\r\n              <h5>{props.companyDataList[0].name}</h5> */}\r\n            </div>\r\n            <div className=\"invoiceNbr\">\r\n              STOCK REPORT\r\n              <br />\r\n              <h5> For Date: {today}</h5>\r\n            </div>\r\n          </header>\r\n          {/* <div className=\"fromto from\">\r\n          <div className=\"panel\">FROM:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Robert Crowley</span><br />\r\n            <span>123 My St.</span><br />\r\n            <span>Portland ME, 04101</span><br />\r\n          </div>\r\n        </div>\r\n        <div className=\"fromto to\">\r\n          <div className=\"panel\">TO:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Someone</span><br />\r\n            <span>123 Street St.</span><br />\r\n            <span>Portland ME, 04101</span>\r\n          </div>\r\n        </div> */}\r\n          <section >\r\n\r\n            {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n            <table class=\"table  .table-responsive{-sm|-md|-lg|-xl|-xxl} table-bordered table-hover table-sm table-striped\" >\r\n              <thead class=\"table-dark\" >\r\n                <tr >\r\n                  <th></th>\r\n                  <th scope=\"col\">Product Name</th>\r\n                  <th scope=\"col\">Size</th>\r\n                  {/* <th scope=\"col\">Unit Price</th>\r\n                  <th scope=\"col\">Value</th> */}\r\n                  {/* <th scope=\"col\">Deposit</th> */}\r\n                  <th scope=\"col\">Stock In Hand</th>\r\n                  <th scope=\"col\">Value</th>\r\n                  <tr>{getStockData()}</tr>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n\r\n\r\n\r\n\r\n                {\r\n                  // console.log(plList),\r\n                  props.productsList.map((record, index) => {\r\n                    return (<tr key={index} hover>\r\n                      <td>{getStock(record.productId)}</td>\r\n                      <td className={classes.td}>{record.name}</td>\r\n                      <td>{record.size}</td>\r\n                      {/* <td>{}</td> */}\r\n                      {/* <td>{record.totalPrice}</td> */}\r\n                      <td>{stock}</td>\r\n\r\n                      <td>{record.sellingPrice * stock}</td>\r\n                      <td>{getTotals(record.sellingPrice, stock)}</td>\r\n                    </tr>\r\n\r\n\r\n                    )\r\n                  })\r\n                }\r\n                <tr>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td className={classes.td}></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n                <tr>\r\n                  <td></td>\r\n                  <td>Totals</td>\r\n                  {/* <td>{gQuantity}</td> */}\r\n                  <td></td>\r\n                  {/* <td>{gTotalPrice}</td> */}\r\n                  <td>{ }</td>\r\n                  <td>{totalValue}</td>\r\n\r\n                </tr>\r\n\r\n\r\n\r\n\r\n\r\n              </tbody>\r\n            </table>\r\n\r\n\r\n          </section>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    </>\r\n\r\n\r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDeatail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails: TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(StockReportData));\r\n\r\n\r\n\r\n\r\n","\r\nimport \"../style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../../actions/Expenses/expenses\";\r\nimport { DateRangePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../../actions/CompanyData/companyData\";\r\nimport StockReportData from \"./StockReportData\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td: {\r\n    textIndent: \"50px\",\r\n  },\r\n  tr: {\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nconst StockReport = ({ classes, ...props }) => {\r\n  //Toast message\r\n  const { addToast } = useToasts();\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [confirmDialog, setConfirmDialog] = useState(false);\r\n  const [plList, setPlList] = useState([{}]);\r\n  const [nSCost, setNSCost] = useState([]);\r\n  const [expD, setExpD] = useState([]);\r\n  const [dateR, setDateR] = useState(null);\r\n  const [compD, setCompD] = useState(\"\");\r\n  const [clicked, setClicked] = useState(true);\r\n  const componentRef = useRef();\r\n  const [nSaleList, setNSaleList] = useState([]);\r\n  const [cSaleList, setCSaleList] = useState([{}]);\r\n  const [cTSales, setCTSales] = useState([{}]);\r\n  const [saleData, setSaleData] = useState({});\r\n  var dateRange = \"\";\r\n  var today = new Date();\r\n  var dd = String(today.getDate()).padStart(2, '0');\r\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n  var yyyy = today.getFullYear();\r\n\r\n  today = yyyy + '-' + mm + '-' + dd;\r\n  // console.log(today);\r\n\r\n  useEffect(() => {\r\n\r\n    props.fetchAllProducts();\r\n    props.fetchAllNSTransactions();\r\n    props.fetchAllTCTransactions();\r\n    props.fetchAllCSTransactions();\r\n    props.fetchAllTransactionDetails();\r\n    props.fetchAllCSTransactionDetails();\r\n    props.fetchAllTCTransactionDetails();\r\n    props.fetchAllExpenses();\r\n    props.fetchAllCompanyData();\r\n    // console.log(props.companyDataList);\r\n    setCompD(props.companyDataList[0]);\r\n\r\n  }, [])\r\n\r\n  const showToast = () => {\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n\r\n  }\r\n  const onDelete = id => {\r\n    props.deleteCategory(id, showToast);\r\n    setConfirmDialog(false)\r\n\r\n  }\r\n\r\n  const openInDialog = () => {\r\n    setConfirmDialog(true)\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  const calcPl = () => {\r\n\r\n\r\n\r\n    try {\r\n      //1. cash sale transactions\r\n      //filter transactions according to date\r\n      var transList = props.salesList.filter(x => x.dateIn.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.dateIn.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      var nScost = 0;\r\n      var transCode = \"\";\r\n      //deposits\r\n\r\n      var saleDetails = [];\r\n      var newNSaleDetails = [];\r\n\r\n      transList.forEach((sale) => {\r\n\r\n        transCode = sale.transCode;\r\n        //get transdetails by transcode\r\n        var transDetail = props.nSTransactionDetail.filter(x => x.transCode == transCode);\r\n        // console.log(transDetail);\r\n        transDetail.forEach((detail) => {\r\n          var prodId = detail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n\r\n          nScost = nScost + prod.buyingPrice * detail.quantity;\r\n          const nSaleDetails = {\r\n            transCode: transCode,\r\n            productId: prod.productId,\r\n            prodName: prod.name,\r\n            quantity: detail.quantity,\r\n            unitPrice: prod.sellingPrice,\r\n            totalPrice: detail.totalPrice,\r\n            deposit: detail.deposit,\r\n            total: detail.total,\r\n            date: sale.dateIn.toString().substring(0, 10)\r\n          }\r\n\r\n          newNSaleDetails = [...saleDetails, nSaleDetails];\r\n          // setNSaleList(newNSaleDetails);\r\n          saleDetails = newNSaleDetails;\r\n\r\n\r\n        });\r\n\r\n\r\n      });\r\n\r\n      //sum same products up\r\n\r\n      var result = [];\r\n\r\n      newNSaleDetails.forEach(function (a) {\r\n        if (!this[a.prodName] && !this[a.date]) {\r\n          this[a.prodName] = { date: a.date, prodName: a.prodName, quantity: 0, unitPrice: a.unitPrice,productId: a.productId, totalPrice: 0, deposit: 0, total: 0 };\r\n          result.push(this[a.prodName]);\r\n        }\r\n        this[a.prodName].quantity += a.quantity;\r\n        this[a.prodName].totalPrice += a.totalPrice;\r\n        this[a.prodName].deposit += a.deposit;\r\n        this[a.prodName].total += a.total;\r\n      }, Object.create(null));\r\n\r\n      // console.log(result);\r\n\r\n      // console.log(newNSaleDetails);\r\n      setNSaleList(result);\r\n\r\n      // \r\n\r\n\r\n      setNSCost(nScost);\r\n      var nSSales = (transList.reduce((nSSales, currentItem) => nSSales = nSSales + currentItem.totalPrice, 0));\r\n      var nSDepo = (transList.reduce((nSDepo, currentItem) => nSDepo = nSDepo + currentItem.gDeposit, 0));\r\n      // var profit = nSSales - nScost;\r\n\r\n\r\n      //2. Paid Credit sale transactions\r\n      //filter transactions by date\r\n      var cSTranslist = props.creditSalesList.filter(x => x.dateIn.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.dateIn.toString().substring(0, 10) <= dateR.toString().substring(13, 23) && x.datePaid.toString()== \"0001-01-01T00:00:00\" );\r\n      // console.log(cSTranslist);\r\n      var cScost = 0;\r\n      var csTransCode = \"\";\r\n\r\n      var CSaleDetails = [];\r\n      var  newCSaleDetails = [];\r\n\r\n      cSTranslist.forEach((cSale) => {\r\n\r\n        csTransCode = cSale.transCode;\r\n        //get transdetails by transcode\r\n        var cSTransDetail = props.cSaleDetailsList.filter(x => x.transCode == csTransCode);\r\n        // console.log(transDetail);\r\n        cSTransDetail.forEach((cSDetail) => {\r\n          var prodId = cSDetail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n\r\n          cScost = cScost + prod.buyingPrice * cSDetail.quantity;\r\n\r\n           //get products details\r\n           const nCSaleDetails = {\r\n            productId: prod.productId,\r\n            prodName: prod.name,\r\n            quantity: cSDetail.quantity,\r\n            unitPrice: prod.sellingPrice,\r\n            totalPrice: cSDetail.totalPrice,\r\n            deposit: cSDetail.deposit,\r\n            total: cSDetail.total\r\n          }\r\n          newCSaleDetails=[...CSaleDetails, nCSaleDetails];\r\n         CSaleDetails = newCSaleDetails;\r\n          // console.log(cSDetail.productId);\r\n          // console.log(cSDetail.quantity);\r\n      //  console.log(newCSaleDetails);\r\n        });\r\n      });\r\n     \r\n      var result = [];\r\n\r\n      newCSaleDetails.forEach(function (a) {\r\n        if ( !this[a.prodName] && !this[a.date] ) {\r\n            this[a.prodName] = { date: a.date, prodName: a.prodName, quantity: 0, unitPrice:a.unitPrice,totalPrice: 0,deposit:0,total:0};\r\n            result.push(this[a.prodName]);\r\n        } \r\n        this[a.prodName].quantity += a.quantity;\r\n        this[a.prodName].totalPrice += a.totalPrice;\r\n        this[a.prodName].deposit += a.deposit;\r\n        this[a.prodName].total += a.total;\r\n    }, Object.create(null));\r\n\r\n    // console.log(result);\r\n\r\n      // console.log(newNSaleDetails);\r\n     // setNSaleList(result);\r\n     var cSSales = (cSTranslist.reduce((cSSales, currentItem) => cSSales = cSSales + currentItem.totalPrice, 0));\r\n      setCSaleList(result);\r\n      setCSaleList(newCSaleDetails);\r\n      // console.log(newCSaleDetails);\r\n\r\n      //3. Truck and cadete transactions\r\n      //filter transactions by date\r\n      var tCTranslist = props.tcTransactionsList.filter(x => x.returnDate.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.returnDate.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      // console.log(cSTranslist);\r\n      var tCcost = 0;\r\n      var tCTransCode = \"\";\r\n\r\n      tCTranslist.forEach((tCSale) => {\r\n\r\n        tCTransCode = tCSale.transCode;\r\n        //get transdetails by transcode\r\n        var tCTransDetail = props.tcTransDetailsList.filter(x => x.transCode == tCTransCode);\r\n        // console.log(transDetail);\r\n        tCTransDetail.forEach((tCDetail) => {\r\n          var prodId = tCDetail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n\r\n          tCcost = tCcost + prod.buyingPrice * tCDetail.quantity;\r\n\r\n          //get products details\r\n          const tCSaleDetails = {\r\n            productId: prod.productId,\r\n            prodName: prod.name,\r\n            quantity: tCDetail.quantity,\r\n            unitPrice: prod.sellingPrice,\r\n            totalPrice: tCDetail.totalPrice,\r\n            deposit: tCDetail.deposit,\r\n            total: tCDetail.total\r\n          }\r\n          const newTCSaleDetails = [...cTSales, tCSaleDetails];\r\n          setCTSales(newTCSaleDetails);\r\n\r\n          // console.log(cSDetail.productId);\r\n          // console.log(cSDetail.quantity);\r\n          // console.log(prod.buyingPrice);\r\n        });\r\n      });\r\n      var tCSales = (tCTranslist.reduce((tCSales, currentItem) => tCSales = tCSales + currentItem.totalPrice, 0));\r\n      var tCDepo = (tCTranslist.reduce((tCDepo, currentItem) => tCDepo = tCDepo + currentItem.gDeposit, 0));\r\n      // console.log(tCSales);\r\n      // console.log(tCcost);\r\n      var totalSales = nSSales + cSSales + tCSales;\r\n      var totalCost = nScost + cScost + tCcost;\r\n      var totalDeposit = nSDepo  + tCDepo;\r\n      var totalIncome = totalSales;\r\n      var grossProfit = totalIncome - totalCost;\r\n      // console.log(totalSales + \" \" + totalCost + \" \" + totalDeposit);\r\n      // console.log(grossProfit);\r\n\r\n      // get all expenses\r\n      //get expenses by date\r\n\r\n      var expenses = props.expensesList.filter(x => x.date.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.date.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      var totaExpenses = (expenses.reduce((totaExpenses, currentItem) => totaExpenses = totaExpenses + currentItem.amount, 0));\r\n      var netProfit = grossProfit - totaExpenses;\r\n\r\n      const pl = {\r\n        Sales: totalSales,\r\n        Cost: totalCost,\r\n        GrossProfit: grossProfit,\r\n        Expenses: totaExpenses,\r\n        NetProfit: netProfit,\r\n        Deposits: totalDeposit,\r\n        TotalIncome: totalIncome,\r\n      }\r\n      const newP = [pl];\r\n      setPlList(newP);\r\n      // console.log(pl);\r\n      var expDetails = props.expensesList.filter(x => x.date.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.date.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      setExpD(expDetails);\r\n      setCompD(props.companyDataList[0]);\r\n\r\n    \r\n\r\n    } catch (error) {\r\n\r\n\r\n      console.log(error.message);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    dateRange = e.text;\r\n    setDateR(dateRange);\r\n  }; // the event handler\r\n\r\n  const startValue: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), dd));\r\n  const endValue: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth() + 1, dd));\r\n  const minDate: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), 8));\r\n  const maxDate: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), dd));\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current\r\n  });\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    // console.log(cSaleList );\r\n\r\n\r\n  }, []);\r\n  return (\r\n    <>\r\n      {/* <PageHeader\r\n        title=\"Categories\"\r\n        //subTitle=\"Form design with validation\"\r\n        icon={<CategoryTwoToneIcon fontSize=\"large\" />}\r\n      />, */}\r\n      <Paper className={classes.paper} elevation={3}  >\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n\r\n            {/* <AddNewCategoryForm {...({ currentId, setCurrentId })} /> */}\r\n            <Toolbar>\r\n              {/* <Controls.Input\r\n                className={classes.searchInput}\r\n                label=\"Search Customer\"\r\n\r\n                InputProps={{\r\n                  startAdornment: (<InputAdornment position=\"start\">\r\n                    <Search />\r\n                  </InputAdornment>)\r\n                }}\r\n                onChange={handleSearch}\r\n\r\n              /> */}\r\n            \r\n              {/* <Controls.Button\r\n                text=\"Load \"\r\n                variant=\"outlined\"\r\n                // startIcon={<AddIcon />}\r\n                className={classes.newButton}\r\n                onClick={() => { calcPl(); setClicked(true) }}\r\n              /> */}\r\n            </Toolbar>\r\n\r\n            <Toolbar>\r\n\r\n            </Toolbar>\r\n          </Grid>\r\n          <Grid>\r\n\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n            <div>\r\n\r\n              {clicked === true && <StockReportData {...({currentId, setCurrentId, plList, setPlList, expD, setExpD, dateR, setDateR, compD, setCompD, nSaleList, setNSaleList, cSaleList, setCSaleList, cTSales, setCTSales})} />}\r\n            </div>\r\n\r\n\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <ConfirmDialog\r\n        title=\"Are you sure you want to delete this record?\"\r\n        subTitle=\"This operation can't be reversed\"\r\n        confirmDialog={confirmDialog}\r\n        setConfirmDialog={setConfirmDialog}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDetail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails: TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(StockReport));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport \"./style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../../actions/Expenses/expenses\";\r\nimport { DateRangePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../../actions/CompanyData/companyData\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td: {\r\n    textIndent: \"50px\",\r\n  },\r\n  tr: {\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n  },\r\n  t: {\r\n    width: \"200px\"\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nconst SalesReportBySalesManData = ({ classes, ...props }) => {\r\n  const group = () => {\r\n\r\n  }\r\n  function groupByKey(array, key) {\r\n    return array\r\n      .reduce((hash, obj) => {\r\n        if (obj[key] === undefined) return hash;\r\n        return Object.assign(hash, { [obj[key]]: (hash[obj[key]] || []).concat(obj) })\r\n      }, {})\r\n  }\r\n\r\n\r\n\r\n\r\n  var groupedSales = groupByKey(props.nSaleList, 'salesMan');\r\n  //  console.log(groupedSales);\r\n\r\n  //var dateGSales = groupByDate(groupedSales, \"dateIn\");\r\n  // console.log(groupedSales);\r\n  // console.log(props.cSaleList);\r\n  var gTotalPrice = 0;\r\n  var gDeposit = 0;\r\n  var gTotal = 0;\r\n  var gQuantity = 0;\r\n\r\n  var result = [];\r\n  function groupNSum(sDet) {\r\n    //  console.log(sDet);\r\n\r\n    sDet.forEach(function (a) {\r\n      if (!this[a.prodName] && !this[a.saleMan]) {\r\n        this[a.prodName] = { date: a.date, prodName: a.prodName, quantity: 0, unitPrice: a.unitPrice, totalPrice: 0, deposit: 0, total: 0, salesMan: a.salesMan };\r\n        result.push(this[a.prodName]);\r\n      }\r\n      this[a.prodName].quantity += a.quantity;\r\n      this[a.prodName].totalPrice += a.totalPrice;\r\n      this[a.prodName].deposit += a.deposit;\r\n      this[a.prodName].total += a.total;\r\n    }, Object.create(null));\r\n    // console.log(result)\r\n    gTotalPrice = (result.reduce((gTotalPrice, currentItem) => gTotalPrice = gTotalPrice + currentItem.totalPrice, 0));\r\n    gDeposit = (result.reduce((gDeposit, currentItem) => gDeposit = gDeposit + currentItem.deposit, 0));\r\n    gTotal = (result.reduce((gTotal, currentItem) => gTotal = gTotal + currentItem.total, 0));\r\n    gQuantity = (result.reduce((gQuantity, currentItem) => gQuantity = gQuantity + currentItem.quantity, 0));\r\n   \r\n  }\r\n  \r\n  function resetR(){\r\n    result =[];\r\n  }\r\n\r\n\r\n  const componentRef = useRef();\r\n  return (\r\n\r\n    <>\r\n\r\n      <ReactToPrint\r\n        trigger={() => <Controls.Button\r\n          text=\"Print\"\r\n          variant=\"outlined\"\r\n          // startIcon={<AddIcon />}\r\n          className={classes.newButton}\r\n        // onClick={handlePrint} \r\n        />\r\n        }\r\n        content={() => componentRef.current}\r\n\r\n      />\r\n\r\n\r\n      <div >\r\n        <div ref={componentRef} className='p-5'>\r\n          <header>\r\n\r\n          <div className=\"logo\">\r\n            <img src={props.companyDataList[0].logo} alt=\"generic business logo\" height={100} width={100} style={{marginTop:50 }}/>\r\n              <h5>{props.companyDataList[0].name}</h5>\r\n            </div>\r\n            <div className=\"invoiceNbr\">\r\n              WALK IN SALES REPORT BY SALESMAN\r\n              <br />\r\n              <h5> For the period: {props.dateR}</h5>\r\n            </div>\r\n          </header>\r\n          {/* <div className=\"fromto from\">\r\n          <div className=\"panel\">FROM:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Robert Crowley</span><br />\r\n            <span>123 My St.</span><br />\r\n            <span>Portland ME, 04101</span><br />\r\n          </div>\r\n        </div>\r\n        <div className=\"fromto to\">\r\n          <div className=\"panel\">TO:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Someone</span><br />\r\n            <span>123 Street St.</span><br />\r\n            <span>Portland ME, 04101</span>\r\n          </div>\r\n        </div> */}\r\n          <section >\r\n\r\n            {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n            <table class=\"table  .table-responsive{-sm|-md|-lg|-xl|-xxl} table-bordered table-hover table-sm table-striped\" >\r\n              <thead class=\"table-dark\" >\r\n                <tr >\r\n                  <th scope=\"col\" className={classes.t}>Sales Person</th>\r\n\r\n                  <th scope=\"col\">Product Details</th>\r\n\r\n\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n\r\n\r\n\r\n\r\n                {/* {\r\n                                    // console.log(plList),\r\n                                    props.cSaleList.map((record, index) => {\r\n                                         return ( <tr key = {index} hover>\r\n                                             <td className={classes.td}>{record.prodName}</td>\r\n                                             <td>{record.quantity}</td>\r\n                                             <td>{record.unitPrice}</td>\r\n                                             <td>{record.totalPrice}</td>\r\n                                             <td>{record.deposit}</td>\r\n                                             <td>{record.total}</td>\r\n                                         </tr>\r\n                                        \r\n\r\n                                         )\r\n                                     })\r\n                                 }\r\n                                <tr>\r\n                                <td></td>\r\n                                   <td className={classes.td}></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                </tr>\r\n                                 <tr>\r\n                                   <td>Totals</td>\r\n                                   <td>{gQuantity}</td>\r\n                                   <td></td>\r\n                                   <td>{gTotalPrice}</td>\r\n                                   <td>{gDeposit}</td>\r\n                                   <td>{gTotal}</td>\r\n\r\n                                 </tr> */}\r\n\r\n                {\r\n                  // console.log(plList),\r\n                  Object.keys(groupedSales).map((sale, index) => {\r\n                    return (<tr key={index} hover>\r\n                      <td className={classes.td}>{sale}</td>\r\n\r\n                      <tr >\r\n                        <th className={classes.t}>Name</th>\r\n                        <th className={classes.t}>Quantity</th>\r\n                        <th className={classes.t}>Unit Price</th>\r\n                        <th className={classes.t}>Total Price</th>\r\n                        {/* <th className={classes.t}>Deposit</th> */}\r\n                        <th className={classes.t}>Total</th>\r\n                        <th > {groupNSum(groupedSales[sale])}</th>\r\n                      </tr>\r\n\r\n                      {result.map(sDet => (\r\n                        // groupNSum(sDet)\r\n                        <tr>\r\n\r\n                          <td className={classes.t}>{sDet.prodName}</td>\r\n                          <td className={classes.t}>{sDet.quantity}</td>\r\n                          <td className={classes.t}>{sDet.unitPrice}</td>\r\n                          <td className={classes.t}>{sDet.totalPrice}</td>\r\n                          {/* <td className={classes.t}>{sDet.deposit}</td> */}\r\n                          <td className={classes.t}>{sDet.total}</td>\r\n                        </tr>\r\n                      ))}\r\n\r\n                      {\r\n                        <tr>\r\n                          <th>Total</th>\r\n                          <td>{gQuantity}</td>\r\n                          <td></td>\r\n                          <td>{gTotalPrice}</td>\r\n                          {/* <td>{gDeposit}</td> */}\r\n                          <td>{gTotal}</td>\r\n                          <td>{resetR()}</td>\r\n                        </tr>\r\n                      }\r\n                    </tr>\r\n\r\n\r\n                    )\r\n\r\n                  })\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n              </tbody>\r\n            </table>\r\n\r\n\r\n          </section>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    </>\r\n\r\n\r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDeatail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails: TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(SalesReportBySalesManData));\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}