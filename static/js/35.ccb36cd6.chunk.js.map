{"version":3,"sources":["views/Reports/SalesReport/BySalesMan/SalesReportBySalesMan.js","views/Reports/SalesReport/BySalesMan/SalesReportBySalesManData.js"],"names":["mapActionToProps","fetchAllProducts","productActions","fetchAllNSTransactions","cashSalesActions","fetchAllTCTransactions","TCActions","fetchAllCSTransactions","creditSalesActions","fetchAllTransactionDetails","fetchAllCSTransactionDetails","fetchAllTCTransactionDetails","fetchAllExpenses","Eactions","fetchAllCompanyData","companyDataActions","fetchAllCustomers","customerActions","fetchAllAddStaff","actions","connect","state","productsList","products","list","creditSalesList","creditSale","tcTransactionsList","trucks_cadetes","nSTransactionDetail","cash","salesList","cashSale","cSaleDetailsList","credit","tcTransDetailsList","trucks","expensesList","expenses","companyDataList","companyData","customersList","customers","addStaffList","addStaff","withStyles","theme","root","fontSize","paper","margin","spacing","padding","grid","paddingLeft","td","textIndent","tr","backgroundColor","color","_ref","classes","props","_objectWithoutProperties","_excluded","_useState","useToasts","addToast","useState","_useState2","_slicedToArray","currentId","setCurrentId","_useState3","_useState4","confirmDialog","setConfirmDialog","_useState5","_useState6","plList","setPlList","_useState7","_useState8","_useState9","_useState10","expD","setExpD","_useState11","_useState12","dateR","setDateR","_useState13","_useState14","compD","setCompD","_useState15","_useState16","clicked","setClicked","componentRef","useRef","_useState17","_useState18","nSaleList","setNSaleList","_useState19","_useState20","cSaleList","setCSaleList","_useState21","_useState22","cTSales","setCTSales","dateRange","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","useEffect","maxDate","useReactToPrint","content","current","_jsxs","_Fragment","children","_jsx","Paper","className","elevation","Grid","container","item","xs","Toolbar","DateRangePickerComponent","placeholder","max","format","start","date","change","e","text","Controls","Button","variant","newButton","onClick","transList","filter","x","dateIn","toString","substring","transCode","saleDetails","newNSaleDetails","forEach","sale","transDetail","saleMan","find","id","userId","detail","prodId","productId","prod","buyingPrice","quantity","nSaleDetails","salesMan","fName","sName","prodName","name","unitPrice","sellingPrice","totalPrice","deposit","total","concat","_toConsumableArray","error","console","log","message","calcPl","AllPaidCreditSalesReportDataCus","ConfirmDialog","title","subTitle","nSTransactionDeatail","t","width","array","key","groupedSales","reduce","hash","obj","undefined","Object","assign","_defineProperty","gTotalPrice","gTotal","gQuantity","result","ReactToPrint","trigger","ref","src","logo","alt","height","style","marginTop","class","scope","keys","map","index","hover","sDet","a","this","push","create","currentItem","gDeposit"],"mappings":"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","file":"static/js/35.ccb36cd6.chunk.js","sourcesContent":["\r\nimport \"./style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../../actions/Expenses/expenses\";\r\nimport { DateRangePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../../actions/CompanyData/companyData\";\r\nimport AllPaidCreditSalesReportDataCus from \"./SalesReportBySalesManData\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport * as customerActions from \"../../../../actions/Customers/customers\";\r\nimport * as actions from \"../../../../actions/Staff/addStaff\";\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td: {\r\n    textIndent: \"50px\",\r\n  },\r\n  tr: {\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nconst SalesReportBySalesMan = ({ classes, ...props }) => {\r\n  //Toast message\r\n  const { addToast } = useToasts();\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [confirmDialog, setConfirmDialog] = useState(false);\r\n  const [plList, setPlList] = useState([{}]);\r\n  const [nSCost, setNSCost] = useState([]);\r\n  const [expD, setExpD] = useState([]);\r\n  const [dateR, setDateR] = useState(null);\r\n  const [compD, setCompD] = useState(\"\");\r\n  const [clicked, setClicked] = useState(false);\r\n  const componentRef = useRef();\r\n  const [nSaleList, setNSaleList] = useState([]);\r\n  const [cSaleList, setCSaleList] = useState([{}]);\r\n  const [cTSales, setCTSales] = useState([{}]);\r\n\r\n  var dateRange = \"\";\r\n  var today = new Date();\r\n  var dd = String(today.getDate()).padStart(2, '0');\r\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n  var yyyy = today.getFullYear();\r\n\r\n  today = yyyy + '-' + mm + '-' + dd;\r\n  // console.log(today);\r\n\r\n  useEffect(() => {\r\n\r\n    props.fetchAllProducts();\r\n    props.fetchAllNSTransactions();\r\n    props.fetchAllTCTransactions();\r\n    props.fetchAllCSTransactions();\r\n    props.fetchAllTransactionDetails();\r\n    props.fetchAllCSTransactionDetails();\r\n    props.fetchAllTCTransactionDetails();\r\n    props.fetchAllExpenses();\r\n    props.fetchAllCompanyData();\r\n    props. fetchAllCustomers();\r\n    props.fetchAllAddStaff();\r\n\r\n\r\n  }, [])\r\n\r\n  const showToast = () => {\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n\r\n  }\r\n  const onDelete = id => {\r\n    props.deleteCategory(id, showToast);\r\n    setConfirmDialog(false)\r\n\r\n  }\r\n\r\n  const openInDialog = () => {\r\n    setConfirmDialog(true)\r\n\r\n\r\n\r\n  }\r\n\r\n  const calcPl = () => {\r\n    try {\r\n      var transList = props.salesList.filter(x => x.dateIn.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.dateIn.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      var nScost = 0;\r\n      var transCode = \"\";\r\n      //deposits\r\n    \r\n      var saleDetails = [];\r\n      var  newNSaleDetails = [];\r\n      \r\n      transList.forEach((sale) => {\r\n\r\n        transCode = sale.transCode;\r\n        //get transdetails by transcode\r\n        var transDetail = props.nSTransactionDetail.filter(x => x.transCode == transCode);\r\n        var saleMan = props.addStaffList.find(x=> x.id == sale.userId )\r\n        // console.log(props.addStaffList);\r\n        transDetail.forEach((detail) => {\r\n          var prodId = detail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n\r\n          nScost = nScost + prod.buyingPrice * detail.quantity;\r\n           const nSaleDetails = {\r\n            salesMan: saleMan.fName + \" \" + saleMan.sName,\r\n            transCode: transCode,\r\n            productId: prod.productId,\r\n            prodName: prod.name,\r\n            quantity: detail.quantity,\r\n            unitPrice: prod.sellingPrice,\r\n            totalPrice: detail.totalPrice,\r\n            deposit: detail.deposit,\r\n            total: detail.total,\r\n            date:sale.dateIn.toString().substring(0, 10)\r\n          }\r\n          \r\n      newNSaleDetails=[...saleDetails,nSaleDetails];\r\n      // setNSaleList(newNSaleDetails);\r\n      saleDetails = newNSaleDetails;\r\n         \r\n          \r\n        });\r\n\r\n\r\n      });\r\n    // console.log(result);\r\n\r\n      // console.log(newNSaleDetails);\r\n     // setNSaleList(result);\r\n     setNSaleList(newNSaleDetails);\r\n     \r\n      setCompD(props.companyDataList);\r\n\r\n    } catch(error) {\r\n\r\n      console.log(error.message);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    dateRange = e.text;\r\n    setDateR(dateRange);\r\n  }; // the event handler\r\n\r\n  const startValue: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), dd));\r\n  const endValue: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth()+1 , dd));\r\n  const minDate: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), 8));\r\n  const maxDate: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), dd));\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {/* <PageHeader\r\n        title=\"Categories\"\r\n        //subTitle=\"Form design with validation\"\r\n        icon={<CategoryTwoToneIcon fontSize=\"large\" />}\r\n      />, */}\r\n      <Paper className={classes.paper} elevation={3}  >\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n\r\n            {/* <AddNewCategoryForm {...({ currentId, setCurrentId })} /> */}\r\n            <Toolbar>\r\n              {/* <Controls.Input\r\n                className={classes.searchInput}\r\n                label=\"Search Customer\"\r\n\r\n                InputProps={{\r\n                  startAdornment: (<InputAdornment position=\"start\">\r\n                    <Search />\r\n                  </InputAdornment>)\r\n                }}\r\n                onChange={handleSearch}\r\n\r\n              /> */}\r\n              <DateRangePickerComponent\r\n\r\n                placeholder=\"Enter Date Range\"\r\n                // startDate={startValue}\r\n                // endDate={endValue}\r\n                // min={minDate}\r\n                max={maxDate}\r\n                // minDays={3}\r\n                // maxDays={5}\r\n                format=\"yyyy-MM-dd\"\r\n                start=\"Year\"\r\n                date=\"Year\"\r\n                change={onChange}\r\n              // style={{ width: '50%' }}\r\n              >\r\n\r\n\r\n              </DateRangePickerComponent>\r\n              <Controls.Button\r\n                text=\"Load \"\r\n                variant=\"outlined\"\r\n                // startIcon={<AddIcon />}\r\n                className={classes.newButton}\r\n                onClick={() => { calcPl(); setClicked(true) }}\r\n              />\r\n            </Toolbar>\r\n\r\n            <Toolbar>\r\n\r\n\r\n              {/* <Controls.Button\r\n                text=\"Print\"\r\n                variant=\"outlined\"\r\n                startIcon={<AddIcon />}\r\n                className={classes.newButton}\r\n                onClick={handlePrint} /> */}\r\n\r\n              {/* <ReactToPrint\r\n                trigger={() => <Controls.Button\r\n                  text=\"Print\"\r\n                  variant=\"outlined\"\r\n                  startIcon={<AddIcon />}\r\n                  className={classes.newButton}\r\n                // onClick={handlePrint} \r\n                />\r\n                }\r\n                content={() => componentRef.current}\r\n\r\n              /> */}\r\n            </Toolbar>\r\n          </Grid>\r\n          <Grid>\r\n\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n            <div>\r\n\r\n              {clicked === true && <AllPaidCreditSalesReportDataCus {...({ currentId, setCurrentId, plList, setPlList, expD, setExpD, dateR, setDateR, compD, setCompD, nSaleList, setNSaleList,cSaleList, setCSaleList,cTSales, setCTSales })}  />}\r\n            </div>\r\n\r\n\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <ConfirmDialog\r\n        title=\"Are you sure you want to delete this record?\"\r\n        subTitle=\"This operation can't be reversed\"\r\n        confirmDialog={confirmDialog}\r\n        setConfirmDialog={setConfirmDialog}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDetail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n  customersList: state.customers.list,\r\n  addStaffList: state.addStaff.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails: TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n  fetchAllCustomers: customerActions.fetchAllCustomer,\r\n  fetchAllAddStaff: actions.fetchAll,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(SalesReportBySalesMan));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport \"./style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../../actions/Expenses/expenses\";\r\nimport { DateRangePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../../actions/CompanyData/companyData\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td: {\r\n    textIndent: \"50px\",\r\n  },\r\n  tr: {\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n  },\r\n  t: {\r\n    width: \"200px\"\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nconst SalesReportBySalesManData = ({ classes, ...props }) => {\r\n  const group = () => {\r\n\r\n  }\r\n  function groupByKey(array, key) {\r\n    return array\r\n      .reduce((hash, obj) => {\r\n        if (obj[key] === undefined) return hash;\r\n        return Object.assign(hash, { [obj[key]]: (hash[obj[key]] || []).concat(obj) })\r\n      }, {})\r\n  }\r\n\r\n\r\n\r\n\r\n  var groupedSales = groupByKey(props.nSaleList, 'salesMan');\r\n  //  console.log(groupedSales);\r\n\r\n  //var dateGSales = groupByDate(groupedSales, \"dateIn\");\r\n  // console.log(groupedSales);\r\n  // console.log(props.cSaleList);\r\n  var gTotalPrice = 0;\r\n  var gDeposit = 0;\r\n  var gTotal = 0;\r\n  var gQuantity = 0;\r\n\r\n  var result = [];\r\n  function groupNSum(sDet) {\r\n    //  console.log(sDet);\r\n\r\n    sDet.forEach(function (a) {\r\n      if (!this[a.prodName] && !this[a.saleMan]) {\r\n        this[a.prodName] = { date: a.date, prodName: a.prodName, quantity: 0, unitPrice: a.unitPrice, totalPrice: 0, deposit: 0, total: 0, salesMan: a.salesMan };\r\n        result.push(this[a.prodName]);\r\n      }\r\n      this[a.prodName].quantity += a.quantity;\r\n      this[a.prodName].totalPrice += a.totalPrice;\r\n      this[a.prodName].deposit += a.deposit;\r\n      this[a.prodName].total += a.total;\r\n    }, Object.create(null));\r\n    // console.log(result)\r\n    gTotalPrice = (result.reduce((gTotalPrice, currentItem) => gTotalPrice = gTotalPrice + currentItem.totalPrice, 0));\r\n    gDeposit = (result.reduce((gDeposit, currentItem) => gDeposit = gDeposit + currentItem.deposit, 0));\r\n    gTotal = (result.reduce((gTotal, currentItem) => gTotal = gTotal + currentItem.total, 0));\r\n    gQuantity = (result.reduce((gQuantity, currentItem) => gQuantity = gQuantity + currentItem.quantity, 0));\r\n   \r\n  }\r\n  \r\n  function resetR(){\r\n    result =[];\r\n  }\r\n\r\n\r\n  const componentRef = useRef();\r\n  return (\r\n\r\n    <>\r\n\r\n      <ReactToPrint\r\n        trigger={() => <Controls.Button\r\n          text=\"Print\"\r\n          variant=\"outlined\"\r\n          // startIcon={<AddIcon />}\r\n          className={classes.newButton}\r\n        // onClick={handlePrint} \r\n        />\r\n        }\r\n        content={() => componentRef.current}\r\n\r\n      />\r\n\r\n\r\n      <div >\r\n        <div ref={componentRef} className='p-5'>\r\n          <header>\r\n\r\n          <div className=\"logo\">\r\n            <img src={props.companyDataList[0].logo} alt=\"generic business logo\" height={100} width={100} style={{marginTop:50 }}/>\r\n              <h5>{props.companyDataList[0].name}</h5>\r\n            </div>\r\n            <div className=\"invoiceNbr\">\r\n              WALK IN SALES REPORT BY SALESMAN\r\n              <br />\r\n              <h5> For the period: {props.dateR}</h5>\r\n            </div>\r\n          </header>\r\n          {/* <div className=\"fromto from\">\r\n          <div className=\"panel\">FROM:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Robert Crowley</span><br />\r\n            <span>123 My St.</span><br />\r\n            <span>Portland ME, 04101</span><br />\r\n          </div>\r\n        </div>\r\n        <div className=\"fromto to\">\r\n          <div className=\"panel\">TO:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Someone</span><br />\r\n            <span>123 Street St.</span><br />\r\n            <span>Portland ME, 04101</span>\r\n          </div>\r\n        </div> */}\r\n          <section >\r\n\r\n            {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n            <table class=\"table  .table-responsive{-sm|-md|-lg|-xl|-xxl} table-bordered table-hover table-sm table-striped\" >\r\n              <thead class=\"table-dark\" >\r\n                <tr >\r\n                  <th scope=\"col\" className={classes.t}>Sales Person</th>\r\n\r\n                  <th scope=\"col\">Product Details</th>\r\n\r\n\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n\r\n\r\n\r\n\r\n                {/* {\r\n                                    // console.log(plList),\r\n                                    props.cSaleList.map((record, index) => {\r\n                                         return ( <tr key = {index} hover>\r\n                                             <td className={classes.td}>{record.prodName}</td>\r\n                                             <td>{record.quantity}</td>\r\n                                             <td>{record.unitPrice}</td>\r\n                                             <td>{record.totalPrice}</td>\r\n                                             <td>{record.deposit}</td>\r\n                                             <td>{record.total}</td>\r\n                                         </tr>\r\n                                        \r\n\r\n                                         )\r\n                                     })\r\n                                 }\r\n                                <tr>\r\n                                <td></td>\r\n                                   <td className={classes.td}></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                </tr>\r\n                                 <tr>\r\n                                   <td>Totals</td>\r\n                                   <td>{gQuantity}</td>\r\n                                   <td></td>\r\n                                   <td>{gTotalPrice}</td>\r\n                                   <td>{gDeposit}</td>\r\n                                   <td>{gTotal}</td>\r\n\r\n                                 </tr> */}\r\n\r\n                {\r\n                  // console.log(plList),\r\n                  Object.keys(groupedSales).map((sale, index) => {\r\n                    return (<tr key={index} hover>\r\n                      <td className={classes.td}>{sale}</td>\r\n\r\n                      <tr >\r\n                        <th className={classes.t}>Name</th>\r\n                        <th className={classes.t}>Quantity</th>\r\n                        <th className={classes.t}>Unit Price</th>\r\n                        <th className={classes.t}>Total Price</th>\r\n                        {/* <th className={classes.t}>Deposit</th> */}\r\n                        <th className={classes.t}>Total</th>\r\n                        <th > {groupNSum(groupedSales[sale])}</th>\r\n                      </tr>\r\n\r\n                      {result.map(sDet => (\r\n                        // groupNSum(sDet)\r\n                        <tr>\r\n\r\n                          <td className={classes.t}>{sDet.prodName}</td>\r\n                          <td className={classes.t}>{sDet.quantity}</td>\r\n                          <td className={classes.t}>{sDet.unitPrice}</td>\r\n                          <td className={classes.t}>{sDet.totalPrice}</td>\r\n                          {/* <td className={classes.t}>{sDet.deposit}</td> */}\r\n                          <td className={classes.t}>{sDet.total}</td>\r\n                        </tr>\r\n                      ))}\r\n\r\n                      {\r\n                        <tr>\r\n                          <th>Total</th>\r\n                          <td>{gQuantity}</td>\r\n                          <td></td>\r\n                          <td>{gTotalPrice}</td>\r\n                          {/* <td>{gDeposit}</td> */}\r\n                          <td>{gTotal}</td>\r\n                          <td>{resetR()}</td>\r\n                        </tr>\r\n                      }\r\n                    </tr>\r\n\r\n\r\n                    )\r\n\r\n                  })\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n              </tbody>\r\n            </table>\r\n\r\n\r\n          </section>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    </>\r\n\r\n\r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDeatail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails: TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(SalesReportBySalesManData));\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}