{"version":3,"sources":["views/notifications/toaster/Toaster.js"],"names":["Toaster","_useState","useState","position","autohide","_useState2","_slicedToArray","toasts","setToasts","_useState3","_useState4","setPosition","_useState5","_useState6","setAutohide","_useState7","_useState8","autohideValue","setAutohideValue","_useState9","_useState10","closeButton","setCloseButton","_useState11","_useState12","fade","setFade","toasters","reduce","toast","push","_jsxs","CCard","children","CCardHeader","_jsx","DocsLink","name","CCardBody","CContainer","CRow","CCol","sm","lg","CForm","CFormGroup","variant","className","CInputCheckbox","id","checked","onChange","e","target","custom","CLabel","htmlFor","CInput","type","value","Number","map","i","CButton","color","onClick","concat","_toConsumableArray","Object","keys","toasterKey","CToaster","key","CToast","show","CToastHeader","CToastBody"],"mappings":"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","file":"static/js/87.9973ce96.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CToast,\r\n  CToastBody,\r\n  CToastHeader,\r\n  CToaster,\r\n  CForm,\r\n  CInput,\r\n  CInputCheckbox,\r\n  CButton,\r\n  CContainer,\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CLabel\r\n} from '@coreui/react'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst Toaster = () => {\r\n\r\n  const positions = [\r\n    'static',\r\n    'top-left',\r\n    'top-center',\r\n    'top-right',\r\n    'top-full',\r\n    'bottom-left',\r\n    'bottom-center',\r\n    'bottom-right',\r\n    'bottom-full'\r\n  ]\r\n\r\n  const [toasts, setToasts] = useState([\r\n    { position: 'static'},\r\n    { position: 'static'},\r\n    { position: 'top-right', autohide: 3000 }\r\n  ])\r\n\r\n  const [position, setPosition] = useState('top-right')\r\n  const [autohide, setAutohide] = useState(true)\r\n  const [autohideValue, setAutohideValue] = useState(5000)\r\n  const [closeButton, setCloseButton] = useState(true)\r\n  const [fade, setFade] = useState(true)\r\n\r\n  const addToast = () => {\r\n    setToasts([\r\n      ...toasts, \r\n      { position, autohide: autohide && autohideValue, closeButton, fade }\r\n    ])\r\n  }\r\n\r\n\r\n  const toasters = (()=>{\r\n    return toasts.reduce((toasters, toast) => {\r\n      toasters[toast.position] = toasters[toast.position] || []\r\n      toasters[toast.position].push(toast)\r\n      return toasters\r\n    }, {})\r\n  })()\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        Toasts.\r\n        <DocsLink name=\"-Toast\"/>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CContainer>\r\n          <CRow>\r\n            <CCol sm=\"12\" lg=\"6\">\r\n              <CForm>\r\n                <h5>Add toast with following props:</h5>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2 mt-4\">\r\n                  <CInputCheckbox\r\n                    id=\"autohide\"\r\n                    checked={autohide}\r\n                    onChange={e => { setAutohide(e.target.checked) }}\r\n                    custom\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"autohide\">\r\n                    Autohide of the toast\r\n                  </CLabel>\r\n                </CFormGroup>\r\n                {\r\n                  autohide &&\r\n                  <CFormGroup className=\"my-2\">\r\n                    <CLabel htmlFor=\"ccyear\">Time to autohide</CLabel>\r\n                    <CInput\r\n                      type=\"number\"\r\n                      value={autohideValue}\r\n                      onChange={e => {\r\n                        setAutohideValue(Number(e.target.value))\r\n                      }}\r\n                    />\r\n                  </CFormGroup>\r\n                }\r\n\r\n                <CFormGroup className=\"my-2\">\r\n                  <CLabel htmlFor=\"ccyear\">Position</CLabel>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={position}\r\n                    onChange={e => {setPosition(e.target.value)}}\r\n                  >\r\n                    {\r\n                      positions.map((position, i)=>(\r\n                        <option key={i}>{position}</option>\r\n                      ))\r\n                    }\r\n                  </select>\r\n                </CFormGroup>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\r\n                  <CInputCheckbox\r\n                    id=\"fade\"\r\n                    checked={fade}\r\n                    onChange={e => { setFade(e.target.checked) }}\r\n                    custom\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"fade\">fade</CLabel>\r\n                </CFormGroup>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\r\n                  <CInputCheckbox\r\n                    id=\"close\"\r\n                    custom\r\n                    checked={closeButton}\r\n                    onChange={e=> { setCloseButton(e.target.checked) }}\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"close\">\r\n                    closeButton\r\n                  </CLabel>\r\n                </CFormGroup>\r\n\r\n                <CButton\r\n                  className=\"mr-1 w-25\"\r\n                  color=\"success\"\r\n                  onClick={addToast}\r\n                >\r\n                  Add toast\r\n                </CButton>\r\n\r\n              </CForm>\r\n            </CCol>\r\n            <CCol sm=\"12\" lg=\"6\">\r\n              {Object.keys(toasters).map((toasterKey) => (\r\n                <CToaster\r\n                  position={toasterKey}\r\n                  key={'toaster' + toasterKey}\r\n                >\r\n                  {\r\n                    toasters[toasterKey].map((toast, key)=>{\r\n                    return(\r\n                      <CToast\r\n                        key={'toast' + key}\r\n                        show={true}\r\n                        autohide={toast.autohide}\r\n                        fade={toast.fade}\r\n                      >\r\n                        <CToastHeader closeButton={toast.closeButton}>\r\n                          Toast title\r\n                        </CToastHeader>\r\n                        <CToastBody>\r\n                          {`This is a toast in ${toasterKey} positioned toaster number ${key + 1}.`}\r\n                        </CToastBody>\r\n                      </CToast>\r\n                    )\r\n                  })\r\n                  }\r\n                </CToaster>\r\n              ))}\r\n            </CCol>\r\n          </CRow>\r\n        </CContainer>\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Toaster\r\n"],"sourceRoot":""}