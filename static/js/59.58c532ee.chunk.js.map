{"version":3,"sources":["views/Components/Forms/StockIn/StockIn/AddStockInForm.js"],"names":["initialFieldValues","productId","supplierId","name","quantity","buyingPrice","sellingPrice","customPrice","reorderLevel","stockInHand","mainstorePrice","category","size","description","userId","window","toString","type","storeId","mapActionToProps","createStockIns","stockInActions","createStoreProduct","storeProductActions","updateStockIn","updateStoreProducts","fetchAllStores","storeActions","fetchAllUserLevel","userLevelActions","fetchAllSuppliers","supplierActions","updateStockInHand","productActions","fetchAllProducts","fetchAllStoreProduct","fetchAllStockIn","fetchByStoreIdNProductId","updateProducts","connect","state","addStaffList","addStaff","list","storesList","stores","userLevelList","userLevel","suppliersList","suppliers","productsList","products","storeProductsList","storeProducts","stockInList","stockIns","storeIdNProductIdList","withStyles","theme","root","margin","spacing","minWidth","formControl","smMargin","_ref","classes","props","_objectWithoutProperties","_excluded","addToast","useToasts","_useState","useState","_useState2","_slicedToArray","setCurrentProductId","_useState3","_useState4","setProductId","_useState5","_useState6","setValue","_useState7","_useState8","selectedSupplier","setSelectedSupplier","_useState9","_useState10","_useState11","_useState12","setSHand","_useState13","_useState14","setQuant","_useState15","_useState16","stock","_useState17","_useState18","selectedProduct","setSelectedProduct","_useState19","_useState20","fProducts","setFProducts","validate","fieldValues","arguments","length","undefined","values","temp","_objectSpread","errors","setErrors","Object","every","x","_useForm","useForm","setCurrentId","_useForm2","setValues","handleInputChange","resetForm","getCId","useEffect","currentId","find","_jsx","className","children","_jsxs","id","autoComplete","noValidate","onSubmit","e","preventDefault","parseInt","onSuccess","appearance","clearField","console","log","currentProductId","openPopup","setOpenPopup","Grid","container","item","xs","FormControl","error","InputLabel","Select","label","value","onChange","variant","MenuItem","map","record","index","FormHelperText","Autocomplete","sx","width","options","autoHighlight","getOptionLabel","option","_event","newSupplier","renderInput","params","TextField","style","inputProps","helperText","onSelect","newProduct","_toConsumableArray","filter","InputLabelProps","startAdornment","InputAdornment","position","AccountCircle","on","onClick","marginLeft"],"mappings":"6XA6CMA,EAAqB,CAEvBC,UAAW,GACXC,WAAY,GACZC,KAAM,GACNC,SAAU,GACVC,YAAa,GACbC,aAAc,GACdC,aAAa,EACbC,aAAc,GACdC,YAAa,GACbC,gBAAgB,EAChBC,SAAU,GACVC,KAAM,GACNC,YAAa,GACbC,OAAQC,OAAOD,OAAOE,WAEtBC,KAAM,SACNC,QAAS,IAokBPC,EAAmB,CACrBC,eAAgBC,IAChBC,mBAAoBC,IACpBC,cAAeH,IACfI,oBAAqBF,IACrBG,eAAgBC,IAChBC,kBAAmBC,IACnBC,kBAAmBC,IACnBC,kBAAmBC,IACnBC,iBAAkBD,IAClBE,qBAAsBZ,IACtBa,gBAAiBf,IACjBgB,yBAA0Bd,IAC1Be,eAAgBL,KAGLM,uBA9BS,SAAAC,GAAK,MAAK,CAC9BC,aAAcD,EAAME,SAASC,KAC7BC,WAAYJ,EAAMK,OAAOF,KACzBG,cAAeN,EAAMO,UAAUJ,KAC/BK,cAAeR,EAAMS,UAAUN,KAC/BO,aAAcV,EAAMW,SAASR,KAC7BS,kBAAmBZ,EAAMa,cAAcV,KACvCW,YAAad,EAAMe,SAASZ,KAC5Ba,sBAAuBhB,EAAMa,cAAcV,KAE9C,GAoBuCxB,EAAzBoB,CAA2CkB,aAxnB3C,SAAAC,GAAK,MAAK,CACrBC,KAAM,CACF,uBAAwB,CACpBC,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,MAIlBC,YAAa,CACTH,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,KAEdE,SAAU,CACNJ,OAAQF,EAAMG,QAAQ,IAG7B,GAwmByDJ,EAjkBnC,SAAHQ,GAA+B,IAAzBC,EAAOD,EAAPC,QAAYC,EAAKC,YAAAH,EAAAI,GAI/BC,EAAaC,sBAAbD,SACRE,EAAgDC,mBAAS,GAAEC,EAAAC,YAAAH,EAAA,GAAlCI,GAAFF,EAAA,GAAqBA,EAAA,IAC5CG,EAAkCJ,mBAAS,GAAEK,EAAAH,YAAAE,EAAA,GAAtC5E,EAAS6E,EAAA,GAAEC,EAAYD,EAAA,GAC9BE,EAA0BP,mBAAS,CAAC,GAAEQ,EAAAN,YAAAK,EAAA,GAAxBE,GAAFD,EAAA,GAAUA,EAAA,IACtBE,EAAgDV,mBAAS,MAAKW,EAAAT,YAAAQ,EAAA,GAAvDE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAC5CG,EAAsBd,mBAAS,GAAEe,EAAAb,YAAAY,EAAA,GACjCE,GADUD,EAAA,GAAQA,EAAA,GACQf,mBAAS,IAAEiB,EAAAf,YAAAc,EAAA,GAAvBE,GAAFD,EAAA,GAAUA,EAAA,IACtBE,EAA0BnB,mBAAS,GAAEoB,EAAAlB,YAAAiB,EAAA,GAAvBE,GAAFD,EAAA,GAAUA,EAAA,IACtBE,EAA0BtB,mBAAS,GAAEuB,EAAArB,YAAAoB,EAAA,GAA9BE,EAAKD,EAAA,GACZE,GADsBF,EAAA,GACwBvB,mBAAS,IAAE0B,EAAAxB,YAAAuB,EAAA,GAAlDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,EAAkC7B,mBAAS,IAAG8B,GAAA5B,YAAA2B,EAAA,GAAvCE,GAASD,GAAA,GAAEE,GAAYF,GAAA,GAiBxBG,GAAW,WAA2B,IAA1BC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,GACxBC,EAAIC,YAAA,GAAQC,IAkEhB,GAjEI,cAAeP,IACfK,EAAK/G,UAAY0G,EAAY1G,UAAY,GAAK,0BAK9C,eAAgB0G,IAChBK,EAAK9G,WAAayG,EAAYzG,WAAa,GAAK,0BAOhD,aAAcyG,IACdK,EAAK5G,SAAWuG,EAAYvG,SAAW,GAAK,yBAC5C0F,EAASa,EAAYvG,WAIrB,gBAAiBuG,GAEjBhB,EAASgB,EAAYlG,aAKrB,SAAUkG,IACVK,EAAKpG,KAAO+F,EAAY/F,KAAO,GAAK,0BAIpC,iBAAkB+F,IAClBK,EAAKxG,aAAemG,EAAYnG,aAAe,GAAK,0BAKpD,gBAAiBmG,IACjBK,EAAKnG,YAAc8F,EAAY9F,YAAc,GAAK,0BAIlD,gBAAiB8F,IACjBK,EAAK3G,YAAcsG,EAAYtG,YAAc,GAAK,0BAGlD,iBAAkBsG,IAClBK,EAAK1G,aAAeqG,EAAYrG,aAAe,GAAK,0BAGpD,YAAaqG,IACbK,EAAK9F,QAAUyF,EAAYzF,QAAU,GAAK,0BAU9CiG,GAASF,YAAC,CAAC,EACJD,IAEHL,GAAeI,GACf,OAAOK,OAAOL,OAAOC,GAAMK,OAAM,SAAAC,GAAC,MAAS,IAALA,CAAO,GAIrD,EAEAC,GAOIC,YAAQxH,EAAoB0G,GAAUvC,EAAMsD,cAAaC,GAAA/C,YAAA4C,GAAA,GANzDR,GAAMW,GAAA,GACNC,GAASD,GAAA,GACTR,GAAMQ,GAAA,GACNP,GAASO,GAAA,GACTE,GAAiBF,GAAA,GACjBG,GAASH,GAAA,GAePI,GAAS,SAAC7H,GAEZ2E,EAAoB3E,GACpB8E,EAAa9E,EAEjB,EA0GA,OAxBA8H,qBAAU,WACN5D,EAAMjC,mBAEiB,GAAnBiC,EAAM6D,WAA+B,GAAb/H,GACxB0H,GAASV,YAAC,CAAC,EAEJ9C,EAAMjB,aAAa+E,MAAK,SAAAX,GAAC,OAAIA,EAAErH,WAAaA,CAAS,MAGhEkH,GAAU,CAAC,GACXhD,EAAMzC,iBACNyC,EAAMrC,oBACNqC,EAAMjC,mBACNiC,EAAMhC,uBACNgC,EAAM/B,iBAIV,GAAG,CAACnC,IASAiI,cAAA,WAASC,UAAU,UAASC,SACxBF,cAAA,OAAKC,UAAU,kBAAiBC,SAC5BC,eAAA,OAAKF,UAAU,MAAKC,SAAA,CAEhBF,cAAA,OAAKC,UAAU,YAAWC,SAEtBC,eAAA,OAAKF,UAAU,oBAAmBC,SAAA,CAC9BF,cAAA,OAAKC,UAAU,cAAaC,SACxBC,eAAA,MAAIF,UAAU,aAAYC,SAAA,CAAC,cAAWF,cAAA,SAAAE,SAAO,WAIjDC,eAAA,QAAMC,GAAG,YAAYC,aAAa,MAAMC,YAAU,EAACL,UAAWjE,EAAQP,KAAM8E,SAtF/E,SAAAC,GAIjB,GAHAA,EAAEC,iBAGEjC,KAAY,CAKZ,IAAIjG,EAAcmI,SAAS7B,GAAOtG,aAAemI,SAAS7B,GAAO3G,UACjE2G,GAAOtG,YAAcA,EAGrB,IAAMoI,EAAY,WACdhB,KAjERvD,EAAS,gCAAiC,CAAEwE,WAAY,YACxDxE,EAAS,gCAAiC,CAAEwE,WAAY,YACxDxE,EAAS,gCAAiC,CAAEwE,WAAY,YAExD3E,EAAM/B,kBA0CN8C,EAASf,EAAMjB,aAAa6F,YAE5BC,QAAQC,IAAI,cAqBR,EAGuB,GAAnB9E,EAAM6D,WAINjB,GAAO9F,KAAO,SACdkD,EAAM/C,eAAe2F,IACrB5C,EAAMnC,kBAAkB/B,EAAW8G,GAAQ8B,KAO3C1E,EAAM3C,cAAc2C,EAAM6D,UAAWjB,IACrC5C,EAAMnC,kBAAkBmC,EAAM+E,iBAAkBjD,EAAO4C,IAGpC,GAAnB1E,EAAMgF,WACNhF,EAAMiF,cAAa,EAG3B,CAGJ,EAyC2HhB,SAAA,CAG/FC,eAACgB,IAAI,CAACC,WAAS,EAAAlB,SAAA,CACXC,eAACgB,IAAI,CAACE,MAAI,EAACC,GAAI,IAAIpB,SAAA,CACfC,eAACoB,IAAWxC,wBAAA,CAACkB,UAAWjE,EAAQH,aACvBmD,GAAOhG,SAAW,CAAEwI,OAAO,IAAM,IAAAtB,SAAA,CAEtCF,cAACyB,IAAU,CAAAvB,SAAC,UACZC,eAACuB,IAAM,CACHzB,UAAU,WACVhI,KAAK,UACL0J,MAAM,SACNC,MAAO/C,GAAO7F,QAEd6I,SAAUnC,GACVoC,QAAQ,WAAU5B,SAAA,CAIlBF,cAAC+B,IAAQ,CAACH,MAAM,GAAE1B,SAAC,iBAGfjE,EAAMvB,WAAWsH,KAAI,SAACC,EAAQC,GAC1B,OACIlC,cAAC+B,IAAQ,CAACH,MAAOK,EAAOjJ,QAAQkH,SAAE+B,EAAOhK,MAGjD,OAGP+G,GAAOhG,SAAWgH,cAACmC,IAAc,CAAAjC,SAAElB,GAAOhG,cAE/CgH,cAACoC,IACG,CACAnC,UAAU,WACVoC,GAAI,CAAEC,MAAO,IAEbC,QAAStG,EAAMnB,cAEf0H,eAAa,EACbC,eAAgB,SAACC,GAAM,OAAKA,EAAOzK,IAAI,EAGvC4J,SAAU,SAACc,EAAQC,GACfxF,EAAoBwF,EAAYxC,IAEhCU,QAAQC,IAAI6B,EAAYxC,GAC5B,EAGAyC,YAAa,SAACC,GAAM,OAChB9C,cAAC+C,IAAShE,wBAAA,CACNiE,MAAO,CAAEV,MAAO,QACZQ,GAAM,IACVnB,MAAM,oBACN1J,KAAK,aACLgL,WAAUlE,wBAAA,GACH+D,EAAOG,YAAU,IACpB5C,aAAc,iBAElByB,QAAQ,WACR7B,UAAU,WACVG,GAAG,4BACHwB,MAAO/C,GAAO7G,WAAamF,EAC3B0E,SAAUnC,IACLV,GAAOhH,YAAc,CAAEwJ,OAAO,EAAM0B,WAAYlE,GAAOhH,aAC9D,OAKdgI,cAACmB,IAAI,CAACE,MAAI,EAACC,GAAI,IAAIpB,SAGfF,cAACoC,IACG,CACAnC,UAAU,WACVoC,GAAI,CAAEC,MAAO,IAEbC,QAAStG,EAAMjB,aAEfwH,eAAa,EACbC,eAAgB,SAACC,GAAM,OAAKA,EAAOzK,IAAI,EACvCkL,SAAUzD,GAGVmC,SAAU,SAACc,EAAQS,GA/MrC,IAACnL,EAiNqBkG,EAAmBiF,EAAWrL,WAG9B6H,GAAOwD,EAAWrL,WApNvCE,EAqNmCmL,EAAWnL,KApNjEsG,GAAY8E,YAAKpH,EAAMjB,aAAasI,QAAO,SAAAlE,GAAC,OAAIA,EAAEnH,OAASA,CAAI,KAsN3B,EAGA4K,YAAa,SAACC,GAAM,OAChB9C,cAAC+C,IAAShE,wBAAA,CACNiE,MAAO,CAAEV,MAAO,QACZQ,GAAM,IACVnB,MAAM,mBACN1J,KAAK,YACLgL,WAAUlE,wBAAA,GACH+D,EAAOG,YAAU,IACpB5C,aAAc,iBAElByB,QAAQ,WACR7B,UAAU,WACVG,GAAG,4BACHwB,MAAO/C,GAAO9G,UAAYmG,EAC1B2D,SAAUnC,IACLV,GAAOjH,WAAa,CAAEyJ,OAAO,EAAM0B,WAAYlE,GAAOjH,YAC7D,MAIdiI,cAACmB,IAAI,CAAAjB,SACDF,cAACoC,IACG,CACAnC,UAAU,WACVoC,GAAI,CAAEC,MAAO,IAEbC,QAASjE,GAETkE,eAAa,EACbC,eAAgB,SAACC,GAAM,OAAKA,EAAOhK,IAAI,EACvCyK,SAAUzD,GAGVmC,SAAU,SAACc,EAAQS,GAEfjF,EAAmBiF,EAAWrL,WAG9B6H,GAAOwD,EAAWrL,UAEtB,EAGA8K,YAAa,SAACC,GAAM,OAChB9C,cAAC+C,IAAShE,wBAAA,CACNiE,MAAO,CAAEV,MAAO,QACZQ,GAAM,IACVnB,MAAM,gBACN1J,KAAK,YACLgL,WAAUlE,wBAAA,GACH+D,EAAOG,YAAU,IACpB5C,aAAc,iBAElByB,QAAQ,WACR7B,UAAU,WACVG,GAAG,4BACHwB,MAAO/C,GAAO9G,UAAYmG,EAC1B2D,SAAUnC,IACLV,GAAOtG,MAAQ,CAAE8I,OAAO,EAAM0B,WAAYlE,GAAOtG,OACxD,SAUlBsH,cAAC+C,IAAShE,YAAA,CACNkB,UAAU,WACVG,GAAG,4BACH0B,QAAQ,WACR/I,KAAK,OACLd,KAAK,YACL0J,MAAM,eACN4B,gBAAiB,CACbC,eACIxD,cAACyD,IAAc,CAACC,SAAS,QAAOxD,SAC5BF,cAAC2D,IAAa,OAI1B/B,MAAO/C,GAAO9G,UACd8J,SAAUnC,IACLV,GAAOjH,WAAa,CAAEyJ,OAAO,EAAM0B,WAAYlE,GAAOjH,aAE/DiI,cAAC+C,IAAShE,YAAA,CACNkB,UAAU,WACVG,GAAG,4BACH0B,QAAQ,WACR/I,KAAK,OACLd,KAAK,cACL0J,MAAM,cACN4B,gBAAiB,CACbC,eACIxD,cAACyD,IAAc,CAACC,SAAS,QAAOxD,SAC5BF,cAAC2D,IAAa,OAI1B/B,MAAO/C,GAAOlG,YACdkJ,SAAUnC,IACLV,GAAOrG,aAAe,CAAE6I,OAAO,EAAM0B,WAAYlE,GAAOrG,eAIjEqH,cAAC+C,IAAShE,YAAA,CAACkB,UAAU,WAAWhI,KAAK,OAAO0J,MAAM,OAAOC,MAAO/C,GAAOnG,KACnEmJ,SAAUnC,GACVoC,QAAQ,YAGF9C,GAAOtG,MAAQ,CAAE8I,OAAO,EAAM0B,WAAYlE,GAAOtG,QAK3DsH,cAAC+C,IAAShE,YAAA,CACNkB,UAAU,WACVhI,KAAK,cACL0J,MAAM,eAAe5I,KAAK,cAAc6I,MAAO/C,GAAO1G,YACtD0J,SAAUnC,GACVoC,QAAQ,YAEH9C,GAAO7G,aAAe,CAAEqJ,OAAO,EAAM0B,WAAYlE,GAAO7G,eAGjE6H,cAAC+C,IAAShE,YAAA,CAACkB,UAAU,WAAWhI,KAAK,eAAe0J,MAAM,eAAeC,MAAO/C,GAAOzG,aACnFyJ,SAAUnC,GACVoC,QAAQ,YAEF9C,GAAO5G,cAAgB,CAAEoJ,OAAO,EAAM0B,WAAYlE,GAAO5G,gBAKnE4H,cAAC+C,IAAShE,YAAA,CAACkB,UAAU,WAAWhI,KAAK,cAAc0J,MAAM,gBAAgBC,MAAO/C,GAAOtG,YACnFsJ,SAAUnC,GACVoC,QAAQ,WACR8B,IAAE,GAEI5E,GAAOzG,aAAe,CAAEiJ,OAAO,EAAM0B,WAAYlE,GAAOzG,eAMlEyH,cAAC+C,IAAShE,YAAA,CAACkB,UAAU,WAAWhI,KAAK,eAAe0J,MAAM,iBAAiBC,MAAO/C,GAAOvG,aACrFuJ,SAAUnC,GACVoC,QAAQ,YAEF9C,GAAO1G,cAAgB,CAAEkJ,OAAO,EAAM0B,WAAYlE,GAAO1G,gBAGnE0H,cAAC+C,IAAShE,YAAA,CAACkB,UAAU,WAAWhI,KAAK,WAAW0J,MAAM,WAAWC,MAAO/C,GAAO3G,SAC3E2J,SAAUnC,GACVoC,QAAQ,YAEF9C,GAAO9G,UAAY,CAAEsJ,OAAO,EAAM0B,WAAYlE,GAAO9G,YAU/D8H,cAAA,OAAKC,UAAU,cAAaC,SACxBC,eAAA,OAAAD,SAAA,CACIF,cAAA,UAAQ8B,QAAQ,YAAY/I,KAAK,SAASkH,UAAU,kBAAiBC,SAAG,SACxEF,cAAA,UAAQ8B,QAAQ,YACZ7B,UAAU,oBACV4D,QAASlE,GAAWqD,MAAO,CAAEc,WAAY,GAAI5D,SAAC,uBAYtEF,cAAA,OAAKC,UAAU,mBASnC,I","file":"static/js/59.58c532ee.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { FormControl, Grid, TextField, withStyles, InputLabel, Select, MenuItem, Button, FormHelperText, Checkbox, FormControlLabel, FormGroup } from \"@material-ui/core\";\r\nimport { useForm } from \"../../useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../../../actions/Staff/addStaff\";\r\nimport * as storeActions from \"../../../../../actions/Store/stores\";\r\nimport * as userLevelActions from \"../../../../../actions/UserLevel/userLevel\";\r\nimport * as supplierActions from \"../../../../../actions/Suppliers/suppliers\";\r\nimport * as productActions from \"../../../../../actions/Products/products\";\r\nimport * as storeProductActions from \"../../../../../actions/StoreProducts/storeProducts\";\r\nimport * as stockInActions from \"../../../../../actions/StockIn/stockIn\";\r\n\r\nimport { ToastConsumer, useToasts } from \"react-toast-notifications\";\r\nimport \"../../staffForm.css\";\r\nimport { string } from \"prop-types\";\r\nimport { RestoreSharp } from \"@material-ui/icons\";\r\nimport { createSelector, createStructuredSelector } from 'reselect';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { parse } from \"date-fns\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n})\r\n\r\nconst initialFieldValues = {\r\n\r\n    productId: '',\r\n    supplierId: '',\r\n    name: '',\r\n    quantity: '',\r\n    buyingPrice: '',\r\n    sellingPrice: '',\r\n    customPrice: true,\r\n    reorderLevel: '',\r\n    stockInHand: '',\r\n    mainstorePrice: true,\r\n    category: '',\r\n    size: '',\r\n    description: '',\r\n    userId: window.userId.toString(),\r\n\r\n    type: 'Normal',\r\n    storeId: ''\r\n\r\n}\r\n\r\n// //selectors\r\n// const storeList = state => state.stores.list;\r\n// const addStaff = state => state.addStaff.list;\r\n\r\n// //selectore function\r\n// export const selectStores = createSelector(\r\n//     storeList,\r\n// );\r\n// export const selectStaff = createSelector(\r\n//     addStaff,\r\n// );\r\n\r\n\r\n\r\n\r\nconst AddStockInForm = ({ classes, ...props }) => {\r\n    //const [addorEdit] = props;\r\n    //const [openPopup, setOpenPopup] = useState(false)\r\n    //toast message\r\n    const { addToast } = useToasts();\r\n    const [currentProductId, setCurrentProductId] = useState(0);\r\n    const [productId, setProductId] = useState(0);\r\n    const [value, setValue] = useState({});\r\n    const [selectedSupplier, setSelectedSupplier] = useState(null);\r\n    const [sId, setSId] = useState(0);\r\n    const [sHand, setSHand] = useState(0);\r\n    const [quant, setQuant] = useState(0);\r\n    const [stock, setStock] = useState(0);\r\n    const [selectedProduct, setSelectedProduct] = useState(0);\r\n    const [fProducts, setFProducts] = useState([]);\r\n    //validation for the whole form when you hit the submit value\r\n    /* const validate =() =>{\r\n        let temp ={}\r\n        temp.fullName = values.fullName?\"\":\"This field is required\"\r\n        temp.mobile = values.mobile?\"\":\"This field is required\"\r\n        temp.bloodGroup = values.bloodGroup?\"\":\"This field is required\"\r\n\r\n        temp.email = (/^&|.+@.+..+/ ).test(values.email)?\"\" : \"email is not valid\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x=> x==\"\")\r\n    }\r\n */\r\n    //const lStores = [];\r\n    //realtime validation for the whole form controls\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('productId' in fieldValues) {\r\n            temp.productId = fieldValues.productId ? \"\" : \"This field is required\"\r\n\r\n        }\r\n\r\n\r\n        if ('supplierId' in fieldValues) {\r\n            temp.supplierId = fieldValues.supplierId ? \"\" : \"This field is required\";\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        if ('quantity' in fieldValues) {\r\n            temp.quantity = fieldValues.quantity ? \"\" : \"This field is required\";\r\n            setQuant(fieldValues.quantity)\r\n\r\n\r\n        }\r\n        if ('stockInHand' in fieldValues) {\r\n            // temp.stockInHand = fieldValues.stockInHand ? \"\" : \"This field is required\"\r\n            setSHand(fieldValues.stockInHand);\r\n\r\n        }\r\n\r\n\r\n        if ('size' in fieldValues) {\r\n            temp.size = fieldValues.size ? \"\" : \"This field is required\"\r\n\r\n        }\r\n\r\n        if ('reorderLevel' in fieldValues) {\r\n            temp.reorderLevel = fieldValues.reorderLevel ? \"\" : \"This field is required\"\r\n\r\n        }\r\n\r\n\r\n        if ('description' in fieldValues) {\r\n            temp.description = fieldValues.description ? \"\" : \"This field is required\"\r\n\r\n        }\r\n\r\n        if ('buyingPrice' in fieldValues) {\r\n            temp.buyingPrice = fieldValues.buyingPrice ? \"\" : \"This field is required\"\r\n\r\n        }\r\n        if ('sellingPrice' in fieldValues) {\r\n            temp.sellingPrice = fieldValues.sellingPrice ? \"\" : \"This field is required\"\r\n\r\n        }\r\n        if ('storeId' in fieldValues) {\r\n            temp.storeId = fieldValues.storeId ? \"\" : \"This field is required\"\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const [\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    ] = useForm(initialFieldValues, validate, props.setCurrentId);\r\n\r\n    const showToast = () => {\r\n        addToast(\"StockIn data saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"StockIn data saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"StockIn data saved succeffuly\", { appearance: 'success' })\r\n\r\n        props.fetchAllStockIn();\r\n    }\r\n\r\n\r\n    // const setId = () => {\r\n    //     setCurrentId(record.productId)\r\n    // }\r\n    const getCId = (productId) => {\r\n\r\n        setCurrentProductId(productId);\r\n        setProductId(productId);\r\n        // console.log(productId)\r\n    }\r\n    const productByName = (name) => {\r\n        setFProducts([...props.productsList.filter(x => x.name === name)])\r\n    }\r\n    const getStockInHand = e => {\r\n        // const target = e.target;\r\n        // setSHand(target.value);\r\n        // console(\"this has been called\");\r\n    }\r\n\r\n    const getQuantity = e => {\r\n        const target = e.target;\r\n        setQuant(target.value);\r\n\r\n    }\r\n\r\n    const calculateStockInHand = () => {\r\n        setStock(sHand + quant);\r\n        console.log(sHand);\r\n        console.log(quant);\r\n        console.log(stock);\r\n\r\n    }\r\n\r\n    // const getStoreId = s => {\r\n\r\n    //     setSId(s);\r\n    // }\r\n\r\n    const clearField = () => {\r\n        setValue(props.productsList.clearField);\r\n\r\n        console.log(\"open = true\")\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        // console.log(\"handle sumbit has been called\")\r\n\r\n        if (validate()) {\r\n            // console.log(\"validation has occured\")\r\n\r\n\r\n\r\n            var stockInHand = parseInt(values.stockInHand) + parseInt(values.quantity);\r\n            values.stockInHand = stockInHand;\r\n            // console.log(values.stockInHand);\r\n\r\n            const onSuccess = () => {\r\n                resetForm();\r\n                showToast();\r\n                clearField();\r\n\r\n            }\r\n\r\n\r\n            if (props.currentId == 0) {\r\n\r\n\r\n                // using toast notification\r\n                values.type = \"Normal\"\r\n                props.createStockIns(values);\r\n                props.updateStockInHand(productId, values, onSuccess);\r\n\r\n            }\r\n            else {\r\n\r\n\r\n                //using toast notification\r\n                props.updateStockIn(props.currentId, values);\r\n                props.updateStockInHand(props.currentProductId, stock, onSuccess)\r\n\r\n            }\r\n            if (props.openPopup == true) {\r\n                props.setOpenPopup(false)\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.fetchAllProducts();\r\n\r\n        if (props.currentId != 0 || productId != 0)\r\n            setValues({\r\n\r\n                ...props.productsList.find(x => x.productId == productId)\r\n\r\n            })\r\n        setErrors({})\r\n        props.fetchAllStores();\r\n        props.fetchAllSuppliers();\r\n        props.fetchAllProducts();\r\n        props.fetchAllStoreProduct();\r\n        props.fetchAllStockIn();\r\n\r\n\r\n\r\n    }, [productId])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n        <section className=\"content\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    {/* left column */}\r\n                    <div className=\"col-md-12\">\r\n                        {/* jquery validation */}\r\n                        <div className=\"card card-primary\">\r\n                            <div className=\"card-header\">\r\n                                <h4 className=\"card-title\">Add Stock  <small> </small></h4>\r\n                            </div>\r\n                            {/* /.card-header */}\r\n                            {/* form start */}\r\n                            <form id=\"quickForm\" autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n\r\n\r\n                                <Grid container>\r\n                                    <Grid item xs={2.5}>\r\n                                        <FormControl className={classes.formControl}\r\n                                            {...(errors.storeId && { error: true })}\r\n                                        >\r\n                                            <InputLabel>Store</InputLabel>\r\n                                            <Select\r\n                                                className=\"form-ctr\"\r\n                                                name=\"storeId\"\r\n                                                label=\" Store\"\r\n                                                value={values.storeId}\r\n                                                //onFocus={fetchStores}\r\n                                                onChange={handleInputChange}\r\n                                                variant=\"outlined\"\r\n\r\n                                            >\r\n\r\n                                                <MenuItem value=\"\">Select Store</MenuItem>\r\n\r\n                                                {\r\n                                                    props.storesList.map((record, index) => {\r\n                                                        return (\r\n                                                            <MenuItem value={record.storeId}>{record.name}</MenuItem>\r\n\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </Select>\r\n                                            {errors.storeId && <FormHelperText>{errors.storeId}</FormHelperText>}\r\n                                        </FormControl>\r\n                                        <Autocomplete\r\n                                            //id=\"country-select-demo\"\r\n                                            className=\"form-ctr\"\r\n                                            sx={{ width: 30 }}\r\n\r\n                                            options={props.suppliersList}\r\n\r\n                                            autoHighlight\r\n                                            getOptionLabel={(option) => option.name}\r\n                                            //getOptionSelected ={}\r\n\r\n                                            onChange={(_event, newSupplier) => {\r\n                                                setSelectedSupplier(newSupplier.id);\r\n\r\n                                                console.log(newSupplier.id)\r\n                                            }}\r\n\r\n\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    style={{ width: '10%' }}\r\n                                                    {...params}\r\n                                                    label=\"Choose a supplier\"\r\n                                                    name=\"supplierId\"\r\n                                                    inputProps={{\r\n                                                        ...params.inputProps,\r\n                                                        autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                    }}\r\n                                                    variant=\"outlined\"\r\n                                                    className=\"form-ctr\"\r\n                                                    id=\"input-with-icon-textfield\"\r\n                                                    value={values.supplierId = selectedSupplier}\r\n                                                    onChange={handleInputChange}\r\n                                                    {...(errors.supplierId && { error: true, helperText: errors.supplierId })}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n\r\n                                    </Grid>\r\n                                    <Grid item xs={2.5}>\r\n\r\n\r\n                                        <Autocomplete\r\n                                            //id=\"country-select-demo\"\r\n                                            className=\"form-ctr\"\r\n                                            sx={{ width: 30 }}\r\n\r\n                                            options={props.productsList}\r\n\r\n                                            autoHighlight\r\n                                            getOptionLabel={(option) => option.name}\r\n                                            onSelect={handleInputChange}\r\n                                            //getOptionSelected ={}\r\n\r\n                                            onChange={(_event, newProduct) => {\r\n\r\n                                                setSelectedProduct(newProduct.productId);\r\n                                                // checkBalance(newCustomer.id);\r\n                                                // setCustomerData({ ...props.customersList.find(x => x.id == newCustomer.id), });\r\n                                                getCId(newProduct.productId);\r\n                                                productByName(newProduct.name);\r\n\r\n                                            }}\r\n\r\n\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    style={{ width: '10%' }}\r\n                                                    {...params}\r\n                                                    label=\"Select a product\"\r\n                                                    name=\"productId\"\r\n                                                    inputProps={{\r\n                                                        ...params.inputProps,\r\n                                                        autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                    }}\r\n                                                    variant=\"outlined\"\r\n                                                    className=\"form-ctr\"\r\n                                                    id=\"input-with-icon-textfield\"\r\n                                                    value={values.productId = selectedProduct}\r\n                                                    onChange={handleInputChange}\r\n                                                    {...(errors.productId && { error: true, helperText: errors.productId })}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                        <Autocomplete\r\n                                            //id=\"country-select-demo\"\r\n                                            className=\"form-ctr\"\r\n                                            sx={{ width: 30 }}\r\n\r\n                                            options={fProducts}\r\n\r\n                                            autoHighlight\r\n                                            getOptionLabel={(option) => option.size}\r\n                                            onSelect={handleInputChange}\r\n                                            //getOptionSelected ={}\r\n\r\n                                            onChange={(_event, newProduct) => {\r\n\r\n                                                setSelectedProduct(newProduct.productId);\r\n                                                // checkBalance(newCustomer.id);\r\n                                                // setCustomerData({ ...props.customersList.find(x => x.id == newCustomer.id), });\r\n                                                getCId(newProduct.productId);\r\n\r\n                                            }}\r\n\r\n\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    style={{ width: '10%' }}\r\n                                                    {...params}\r\n                                                    label=\"Select a Size\"\r\n                                                    name=\"productId\"\r\n                                                    inputProps={{\r\n                                                        ...params.inputProps,\r\n                                                        autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                    }}\r\n                                                    variant=\"outlined\"\r\n                                                    className=\"form-ctr\"\r\n                                                    id=\"input-with-icon-textfield\"\r\n                                                    value={values.productId = selectedProduct}\r\n                                                    onChange={handleInputChange}\r\n                                                    {...(errors.size && { error: true, helperText: errors.size })}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n\r\n\r\n\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"input-with-icon-textfield\"\r\n                                    variant=\"outlined\"\r\n                                    type=\"text\"\r\n                                    name=\"ProductId\"\r\n                                    label=\"Product Code\"\r\n                                    InputLabelProps={{\r\n                                        startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <AccountCircle />\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    value={values.productId}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.productId && { error: true, helperText: errors.productId })}\r\n                                />\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    id=\"input-with-icon-textfield\"\r\n                                    variant=\"outlined\"\r\n                                    type=\"text\"\r\n                                    name=\"Description\"\r\n                                    label=\"Description\"\r\n                                    InputLabelProps={{\r\n                                        startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <AccountCircle />\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    value={values.description}\r\n                                    onChange={handleInputChange}\r\n                                    {...(errors.description && { error: true, helperText: errors.description })}\r\n                                />\r\n\r\n\r\n                                <TextField className=\"form-ctr\" name=\"size\" label=\"Size\" value={values.size}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n\r\n\r\n                                    {... (errors.size && { error: true, helperText: errors.size })}\r\n                                />\r\n\r\n\r\n\r\n                                <TextField\r\n                                    className=\"form-ctr\"\r\n                                    name=\"buyingPrice\"\r\n                                    label=\"Buying Price\" type=\"buyingPrice\" value={values.buyingPrice}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n\r\n                                    {...(errors.buyingPrice && { error: true, helperText: errors.buyingPrice })}\r\n                                />\r\n\r\n                                <TextField className=\"form-ctr\" name=\"sellingPrice\" label=\"Retail Price\" value={values.sellingPrice}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n\r\n                                    {... (errors.sellingPrice && { error: true, helperText: errors.sellingPrice })}\r\n                                />\r\n\r\n\r\n\r\n                                <TextField className=\"form-ctr\" name=\"stockInHand\" label=\"Stock In Hand\" value={values.stockInHand}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n                                    on\r\n\r\n                                    {... (errors.stockInHand && { error: true, helperText: errors.stockInHand })}\r\n                                />\r\n\r\n\r\n\r\n\r\n                                <TextField className=\"form-ctr\" name=\"reorderLevel\" label=\"Re-order Level\" value={values.reorderLevel}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n\r\n                                    {... (errors.reorderLevel && { error: true, helperText: errors.reorderLevel })}\r\n                                />\r\n\r\n                                <TextField className=\"form-ctr\" name=\"quantity\" label=\"Quantity\" value={values.quantity}\r\n                                    onChange={handleInputChange}\r\n                                    variant=\"outlined\"\r\n\r\n                                    {... (errors.quantity && { error: true, helperText: errors.quantity })}\r\n\r\n                                />\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                {/* /.card-body */}\r\n                                <div className=\"card-footer\">\r\n                                    <div>\r\n                                        <button variant=\"contained\" type=\"submit\" className=\"btn btn-primary\"  >Save</button>\r\n                                        <button variant=\"contained\"\r\n                                            className=\"btn btn-secondary\"\r\n                                            onClick={resetForm} style={{ marginLeft: 3 }}>Reset</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </form>\r\n\r\n                        </div>\r\n                        {/* /.card */}\r\n                    </div>\r\n                    {/*/.col (left) */}\r\n                    {/* right column */}\r\n                    <div className=\"col-md-6\">\r\n                    </div>\r\n                    {/*/.col (right) */}\r\n                </div>\r\n                {/* /.row */}\r\n            </div>{/* /.container-fluid */}\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    addStaffList: state.addStaff.list,\r\n    storesList: state.stores.list,\r\n    userLevelList: state.userLevel.list,\r\n    suppliersList: state.suppliers.list,\r\n    productsList: state.products.list,\r\n    storeProductsList: state.storeProducts.list,\r\n    stockInList: state.stockIns.list,\r\n    storeIdNProductIdList: state.storeProducts.list,\r\n\r\n})\r\n\r\n\r\n\r\nconst mapActionToProps = {\r\n    createStockIns: stockInActions.createStockIn,\r\n    createStoreProduct: storeProductActions.createStoreProduct,\r\n    updateStockIn: stockInActions.updateStockIn,\r\n    updateStoreProducts: storeProductActions.updateStoreProducts,\r\n    fetchAllStores: storeActions.fetchAllStore,\r\n    fetchAllUserLevel: userLevelActions.fetchAllUserLevel,\r\n    fetchAllSuppliers: supplierActions.fetchAllSupplier,\r\n    updateStockInHand: productActions.updateStockInHand,\r\n    fetchAllProducts: productActions.fetchAllProduct,\r\n    fetchAllStoreProduct: storeProductActions.fetchAllStoreProducts,\r\n    fetchAllStockIn: stockInActions.fetchAllStockIn,\r\n    fetchByStoreIdNProductId: storeProductActions.fetchByStoreIdNProductId,\r\n    updateProducts: productActions.updateProduct,\r\n\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AddStockInForm));\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}