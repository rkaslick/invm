{"version":3,"sources":["views/Components/Forms/Deposit/ViewAll/ViewAllDeposit.js","../node_modules/@material-ui/icons/CategoryTwoTone.js","../node_modules/@material-ui/icons/Add.js","../node_modules/@material-ui/icons/DeleteForeverSharp.js","views/Components/Forms/Deposit/AddDeposit/AddDepositForm.js"],"names":["headCells","id","label","disableSorting","mapActionToProps","fetchAllDeposit","Dactions","DeleteDeposit","connect","state","depositList","deposit","list","withStyles","theme","paper","margin","spacing","padding","searchInput","width","newButton","position","right","_ref","classes","props","_objectWithoutProperties","_excluded","_useState","useState","fn","items","_useState2","_slicedToArray","filterFn","setFilterFn","_useState3","_useState4","openPopup","setOpenPopup","_useState5","_useState6","currentId","setCurrentId","addToast","useToasts","_useState7","isOpen","message","type","notify","setNotify","_useState8","_useState9","confirmDialog","setConfirmDialog","_useState10","_useState11","showToast","appearance","useEffect","_useTable","useTable","TblContainer","TblHead","TblPagination","recordsAfterPagingAndSorting","_jsxs","_Fragment","children","_jsx","PageHeader","title","icon","CategoryTwoToneIcon","fontSize","Paper","className","elevation","Toolbar","Controls","Input","InputProps","startAdornment","InputAdornment","Search","onChange","e","target","value","filter","x","name","toLowerCase","includes","description","amount","toString","Button","text","variant","startIcon","AddIcon","onClick","class","TableBody","map","record","index","TableRow","hover","TableCell","ActionButton","color","openInPopup","EditOutlinedIcon","onConfirm","DeleteIcon","Popup","AddDepositForm","addorEdit","employee","resetForm","Notification","ConfirmDialog","subTitle","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","React","_default","createElement","Fragment","cx","cy","r","opacity","d","initialFieldValues","createDeposit","DActions","updateDeposit","fetchAllCategs","categActions","expenseTypeList","expenseTypes","categoryList","category","root","minWidth","formControl","smMargin","validate","fieldValues","arguments","length","undefined","values","temp","_objectSpread","errors","setErrors","every","_useForm","useForm","_useForm2","setValues","handleInputChange","find","autoComplete","noValidate","onSubmit","preventDefault","onSuccess","parseFloat","FormControl","error","InputLabel","Select","MenuItem","FormHelperText","TextField","helperText","style","marginLeft"],"mappings":"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","file":"static/js/27.ff50d865.chunk.js","sourcesContent":["import { Paper, TableBody, TableCell, TableRow, TextField, Toolbar, withStyles, InputAdornment } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport * as Dactions from \"../../../../../actions/Deposit/deposit\";\r\nimport AddDepositForm from \"../AddDeposit/AddDepositForm\";\r\nimport { connect } from \"react-redux\";\r\nimport useTable from \"../../useTable\";\r\nimport Controls from \"../../../controls/Controls\";\r\nimport { EditOutlined, Search } from \"@material-ui/icons\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport PageHeader from \"../../../PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport Popup from \"../../../Popup\";\r\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteIcon from \"@material-ui/icons/DeleteForeverSharp\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport Notification from \"../../../controls/Notification\";\r\nimport ConfirmDialog from \"../../../controls/ConfirmDialog\";\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n\r\n    paper: {\r\n        margin: theme.spacing(-8.9),\r\n        padding: theme.spacing(6),\r\n\r\n    },\r\n\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px '\r\n\r\n    },\r\n\r\n})\r\n\r\nconst headCells = [\r\n    { id: 'name', label: 'Deposit' },\r\n    { id: 'description', label: 'Description' },\r\n    { id: 'amount', label: 'Amount' },\r\n    { id: 'Actions', label: 'Actions', disableSorting: true },\r\n]\r\n\r\nconst ViewAllDeposit = ({ classes, ...props }) => {\r\n\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } })\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const [currentId, setCurrentId] = useState(0)\r\n    const { addToast } = useToasts()\r\n    const { notify, setNotify } = useState({ isOpen: false, message: '', type: '' })\r\n    const [confirmDialog, setConfirmDialog] = useState(false)\r\n    const [deleteRecord, setDeleteRecord] = useState(false)\r\n\r\n    const showToast = () => {\r\n        addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n        addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n        addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n\r\n    }\r\n    const onDelete = id => {\r\n        props.DeleteDeposit(id, showToast)\r\n        setConfirmDialog(false)\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        props.fetchAllDeposit();\r\n\r\n\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting,\r\n    } = useTable(props.depositList, headCells, filterFn)\r\n\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value == \"\")\r\n                    return items;\r\n                else {\r\n                    return items.filter(x =>\r\n\r\n                        x.name.toLowerCase().includes(target.value.toLowerCase()) +\r\n                        x.description.toLowerCase().includes(target.value.toLowerCase()) +\r\n                        x.amount.toString().toLowerCase().includes(target.value.toLowerCase()))\r\n                }\r\n\r\n\r\n\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    const addorEdit = (employee, resetForm) => {\r\n\r\n        setOpenPopup(false)\r\n        setNotify({\r\n            isOpen: true,\r\n            message: 'Submitted Successfully',\r\n            type: 'Success'\r\n        })\r\n    }\r\n\r\n    const openInPopup = record => {\r\n        setCurrentId(record)\r\n        setOpenPopup(true)\r\n    }\r\n\r\n    const openInDialog = () => {\r\n        setConfirmDialog(true)\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            <PageHeader\r\n                title=\"Deposit List\"\r\n                //subTitle=\"Form design with validation\"\r\n                icon={<CategoryTwoToneIcon fontSize=\"large\" />}\r\n            />,\r\n            <Paper className={classes.paper} elevation={3}>\r\n\r\n                <Toolbar>\r\n                    <Controls.Input\r\n                        className={classes.searchInput}\r\n                        label=\"Search for Deposit\"\r\n\r\n                        InputProps={{\r\n                            startAdornment: (<InputAdornment position=\"start\">\r\n                                <Search />\r\n                            </InputAdornment>)\r\n                        }}\r\n                        onChange={handleSearch}\r\n\r\n                    />\r\n                    <Controls.Button\r\n                        text=\"Add New\"\r\n                        variant=\"outlined\"\r\n                        startIcon={<AddIcon />}\r\n                        className={classes.newButton}\r\n                        onClick={() => { setOpenPopup(true); setCurrentId(0); }}\r\n                    />\r\n                </Toolbar>\r\n                <table class=\"table .table-responsive{-sm|-md|-lg|-xl|-xxl} table-hover \" >\r\n                    <thead >\r\n\r\n\r\n                    </thead>\r\n                    <tbody>\r\n                        <TblContainer >\r\n                            <TblHead />\r\n                            <TableBody>\r\n                                {\r\n                                    recordsAfterPagingAndSorting().map((record, index) => {\r\n                                        return (<TableRow key={index} hover>\r\n                                            <TableCell>{record.name}</TableCell>\r\n                                            <TableCell>{record.description}</TableCell>\r\n                                            <TableCell>{record.amount}</TableCell>\r\n\r\n                                            <TableCell>\r\n                                                <Controls.ActionButton\r\n                                                    color=\"primary\"\r\n                                                    // onClick={()=>{setCurrentId(record.id)}}\r\n                                                    onClick={() => { openInPopup(record.id) }}\r\n                                                >\r\n                                                    <EditOutlinedIcon fontSize=\"small\" />\r\n                                                </Controls.ActionButton>\r\n                                                <Controls.ActionButton\r\n                                                    color=\"secondary\"\r\n                                                    onClick={() => {\r\n                                                        openInDialog()\r\n                                                        setConfirmDialog({\r\n                                                            onConfirm: () => { onDelete(record.id) }\r\n                                                        })\r\n\r\n                                                        //onDelete(record.id)\r\n                                                    }\r\n                                                    }\r\n                                                >\r\n                                                    <DeleteIcon fontSize=\"small\" />\r\n                                                </Controls.ActionButton>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                            </TableBody>\r\n                        </TblContainer>\r\n\r\n\r\n                    </tbody>\r\n                </table>\r\n\r\n                <TblPagination />\r\n            </Paper>\r\n            <Popup\r\n                title=\"Category Form\"\r\n                openPopup={openPopup}\r\n                setOpenPopup={setOpenPopup}\r\n            >\r\n                <AddDepositForm\r\n                    {...({ currentId, setCurrentId, openPopup, setOpenPopup })}\r\n                addorEdit={addorEdit}\r\n                />\r\n            </Popup>\r\n            <Notification\r\n                notify={notify}\r\n                setNotify={setNotify}\r\n            />\r\n            <ConfirmDialog\r\n                title=\"Are you sure you want to delete this record?\"\r\n                subTitle=\"This operation can't be reversed\"\r\n                confirmDialog={confirmDialog}\r\n                setConfirmDialog={setConfirmDialog}\r\n            />\r\n        </>\r\n        // {...({ currentId, setCurrentId }) }\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    depositList: state.deposit.list\r\n\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n    fetchAllDeposit: Dactions.fetchAllDeposit,\r\n    DeleteDeposit: Dactions.DeleteDeposit,\r\n\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(ViewAllDeposit));","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"circle\", {\n  cx: \"17.5\",\n  cy: \"17.5\",\n  r: \"2.5\",\n  opacity: \".3\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M5 15.5h4v4H5zm7-9.66L10.07 9h3.86z\",\n  opacity: \".3\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2l-5.5 9h11L12 2zm0 3.84L13.93 9h-3.87L12 5.84zM17.5 13c-2.49 0-4.5 2.01-4.5 4.5s2.01 4.5 4.5 4.5 4.5-2.01 4.5-4.5-2.01-4.5-4.5-4.5zm0 7c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM11 13.5H3v8h8v-8zm-2 6H5v-4h4v4z\"\n})), 'CategoryTwoTone');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 21h12V7H6v14zm2.46-9.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4h-3.5z\"\n}), 'DeleteForeverSharp');\n\nexports.default = _default;","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { FormControl, Grid, TextField, withStyles, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\r\nimport { useForm } from \"../../useForm\";\r\nimport { connect } from \"react-redux\";\r\n//import * as actions from \"../../../../../actions/Staff/addStaff\";\r\nimport * as DActions from \"../../../../../actions/Deposit/deposit\";\r\n//import * as userLevelActions from \"../../../../../actions/UserLevel/userLevel\";\r\nimport { ToastConsumer, useToasts } from \"react-toast-notifications\";\r\nimport \"../../staffForm.css\";\r\nimport { RestoreSharp } from \"@material-ui/icons\";\r\nimport * as categActions from \"../../../../../actions/Category/categories\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n})\r\n\r\nconst initialFieldValues = {\r\n\r\n    name: '',\r\n    description: '',\r\n    amount: '',\r\n    // phone: '',\r\n    // location: '',\r\n    // // email: '',\r\n    // // address: '',\r\n    // companyDataId: '',\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst AddDepositForm = ({ classes, ...props }) => {\r\n\r\n    //toast message\r\n    const { addToast } = useToasts()\r\n\r\n    //realtime validation for the whole form controls\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('name' in fieldValues) {\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required\"\r\n            // addToast(\"User data saved succeffuly\", {appearance:'success'})\r\n            // console.log(\"Tast has beeen displayed\")\r\n        }\r\n\r\n\r\n        if ('description' in fieldValues) {\r\n            temp.description = fieldValues.description ? \"\" : \"This field is required\"\r\n        }\r\n        if ('amount' in fieldValues) {\r\n            temp.amount = fieldValues.amount ? \"\" : \"This field is required\"\r\n        }\r\n\r\n\r\n\r\n        // if ('location' in fieldValues) {\r\n        //     temp.location = fieldValues.location ? \"\" : \"This field is required\"\r\n        // }\r\n\r\n\r\n        // if ('email' in fieldValues) {\r\n        //     if (temp.email != \" \") {\r\n        //         temp.email = (/^&|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid\"\r\n        //     }\r\n        // }\r\n        // if ('phone' in fieldValues) {\r\n        //     temp.phone = fieldValues.phone ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('companyDataId' in fieldValues) {\r\n        //     temp.companyDataId = fieldValues.companyDataId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('userLevelId' in fieldValues) {\r\n        //     temp.userLevelId = fieldValues.userLevelId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('storeId' in fieldValues) {\r\n        //     temp.storeId = fieldValues.storeId ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('uName' in fieldValues) {\r\n        //     temp.uName = fieldValues.uName ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('password' in fieldValues) {\r\n        //     temp.password = fieldValues.password ? \"\" : \"This field is required\"\r\n        // }\r\n        // if ('cPswd' in fieldValues) {\r\n        //     temp.cPswd = fieldValues.cPswd ? \"\" : \"This field is required\"\r\n\r\n        // }\r\n\r\n\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const [\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    ] = useForm(initialFieldValues, validate, props.setCurrentId);\r\n\r\n    const showToast = () => {\r\n\r\n        addToast(\"Deposit  saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"Deposit  saved succeffuly\", { appearance: 'success' })\r\n        addToast(\"Deposit  saved succeffuly\", { appearance: 'success' })\r\n        props.fetchAllDeposit();\r\n    }\r\n\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n\r\n        if (validate()) {\r\n\r\n            const onSuccess = () => {\r\n                showToast();\r\n                resetForm();\r\n\r\n                if (props.openPopup == true) {\r\n                    props.setOpenPopup(false)\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            if (props.currentId == 0) {\r\n\r\n                //using toast notification\r\n\r\n                props.createDeposit({name:values.name, description:values.description,amount:parseFloat(values.amount)}, onSuccess)\r\n                //addorEdit(values, onSuccess)\r\n\r\n            }\r\n            else {\r\n                //using windows alert notification\r\n                //props.updateDCandidate(props.currentId, values, () => {window.alert('updated')})\r\n                //using toast notification\r\n                props.updateDeposit(props.currentId, {name:values.name, description:values.description,amount:parseFloat(values.amount)}, onSuccess)\r\n\r\n\r\n\r\n            }\r\n\r\n           \r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (props.currentId != 0)\r\n            setValues({\r\n                ...props.depositList.find(x => x.id == props.currentId)\r\n            })\r\n        setErrors({})\r\n        props.fetchAllDeposit();\r\n        props. fetchAllCategs();\r\n       \r\n        // props.fetchAllUserLevel();\r\n\r\n\r\n\r\n    }, [props.currentId])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n        <section className=\"content\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    {/* left column */}\r\n                    <div className=\"col-md-12\">\r\n                        {/* jquery validation */}\r\n                        <div className=\"card card-primary\">\r\n                            <div className=\"card-header\">\r\n                                <h4 className=\"card-title\">Add Deposit <small> </small></h4>\r\n                            </div>\r\n                            {/* /.card-header */}\r\n                            {/* form start */}\r\n                            <form id=\"quickForm\" autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n                                <FormControl className={classes.formControl}\r\n                                    {...(errors.name && { error: true })}\r\n                                >\r\n                                    <InputLabel >Category</InputLabel>\r\n                                    <Select\r\n                                        className=\"form-ctr\"\r\n                                        name=\"name\"\r\n                                        label=\"Category\"\r\n                                        value={values.name}\r\n                                        onChange={handleInputChange}\r\n\r\n                                    >\r\n                                        <MenuItem value=\"\">Select Category</MenuItem>\r\n                                        {\r\n                                            props.categoryList.map((record, index) => {\r\n                                                return (\r\n                                                    <MenuItem value={record.name}>{record.name}</MenuItem>\r\n\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Select>\r\n                                    {errors.name && <FormHelperText>{errors.name}</FormHelperText>}\r\n                                </FormControl>\r\n\r\n                                <TextField className=\"form-ctr\" name=\"description\" label=\"Description\" value={values.description}\r\n                                    onChange={handleInputChange}\r\n\r\n\r\n                                    {... (errors.description && { error: true, helperText: errors.description })}\r\n                                />\r\n\r\n                                <TextField className=\"form-ctr\" name=\"amount\" label=\"Amount\" value={values.amount}\r\n                                    onChange={handleInputChange}\r\n\r\n\r\n                                    {... (errors.amount && { error: true, helperText: errors.amount })}\r\n                                />\r\n\r\n\r\n                                {/* <TextField className=\"form-ctr\" name=\"phone\" label=\"Categ Phone No\" value={values.phone}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {... (errors.phone && { error: true, helperText: errors.phone })}\r\n                                /> */}\r\n\r\n                                {/* <TextField\r\n                                    className=\"form-ctr\"\r\n                                    name=\"email\"\r\n                                    label=\"Email\" type=\"email\" value={values.email}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {...(errors.email && { error: true, helperText: errors.email })}\r\n                                /> */}\r\n\r\n                                {/* <TextField className=\"form-ctr\" name=\"location\" label=\"location\" value={values.location}\r\n                                    onChange={handleInputChange}\r\n\r\n                                    {... (errors.location && { error: true, helperText: errors.location })}\r\n                                />\r\n\r\n                               \r\n                             \r\n\r\n                             <FormControl className={classes.formControl}\r\n                                    {...(errors.userLevelId && { error: true })}\r\n                                >\r\n                                    <InputLabel >Company</InputLabel>\r\n                                    <Select\r\n                                        className=\"form-ctr\"\r\n                                        name=\"companyDataId\"\r\n                                        label=\"Company\"\r\n                                        value={values.companyDataId}\r\n                                        onChange={handleInputChange}\r\n\r\n                                    > */}\r\n                                {/* <MenuItem value=\"\">Select Company</MenuItem>\r\n                                        <MenuItem value=\"1\">{1}</MenuItem>\r\n                                        {/* {\r\n                                            props.userLevelList.map((record, index) => {\r\n                                                return (\r\n                                                    <MenuItem value={record.id}>{record.level}</MenuItem>\r\n\r\n                                                )\r\n                                            })\r\n                                        } */}\r\n                                {/* </Select>\r\n                                    {errors.companyDataId && <FormHelperText>{errors.companyDataId}</FormHelperText>}\r\n                                </FormControl>   */}\r\n\r\n\r\n\r\n\r\n                                {/* /.card-body */}\r\n                                <div className=\"card-footer\">\r\n                                    <div>\r\n                                        <button type=\"submit\" className=\"btn btn-primary\" >Save</button>\r\n                                        <button variant=\"contained\"\r\n                                            className=\"btn btn-secondary\"\r\n                                            onClick={resetForm} style={{ marginLeft: 3 }}>Reset</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </form>\r\n\r\n                        </div>\r\n                        {/* /.card */}\r\n                    </div>\r\n                    {/*/.col (left) */}\r\n                    {/* right column */}\r\n                    <div className=\"col-md-6\">\r\n                    </div>\r\n                    {/*/.col (right) */}\r\n                </div>\r\n                {/* /.row */}\r\n            </div>{/* /.container-fluid */}\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n    depositList: state.deposit.list,\r\n    expenseTypeList: state.expenseTypes.list,\r\n    categoryList: state.category.list\r\n})\r\n\r\n\r\n\r\nconst mapActionToProps = {\r\n    createDeposit: DActions.createDeposit,\r\n    fetchAllDeposit: DActions.fetchAllDeposit,\r\n    DeleteDeposit: DActions.DeleteDeposit,\r\n    updateDeposit: DActions.updateDeposit,\r\n    fetchAllCategs: categActions.fetchAllCategory,\r\n  \r\n\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AddDepositForm));"],"sourceRoot":""}