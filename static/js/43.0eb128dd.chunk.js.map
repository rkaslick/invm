{"version":3,"sources":["views/Reports/ProfitLoss/ProfitLossData.js","views/Reports/ProfitLoss/ProfitLoss.js"],"names":["mapActionToProps","fetchAllProducts","productActions","fetchAllNSTransactions","cashSalesActions","fetchAllTCTransactions","TCActions","fetchAllCSTransactions","creditSalesActions","fetchAllTransactionDetails","fetchAllCSTransactionDetails","fetchAllTCTransactionDetails","fetchAllExpenses","Eactions","fetchAllCompanyData","companyDataActions","connect","state","productsList","products","list","creditSalesList","creditSale","tcTransactionsList","trucks_cadetes","nSTransactionDeatail","cash","salesList","cashSale","cSaleDetailsList","credit","tcTransDetailsList","trucks","expensesList","expenses","companyDataList","companyData","withStyles","theme","root","fontSize","paper","margin","spacing","padding","grid","paddingLeft","td","textIndent","tr","backgroundColor","color","_ref","classes","props","_objectWithoutProperties","_excluded","componentRef","useRef","_jsxs","_Fragment","children","_jsx","ReactToPrint","trigger","Controls","Button","text","variant","className","newButton","content","current","ref","src","logo","alt","height","width","style","marginTop","name","dateR","class","scope","plList","Sales","TotalIncome","Cost","GrossProfit","expD","map","record","index","hover","amount","Expenses","NetProfit","_useState","useToasts","addToast","useState","_useState2","_slicedToArray","currentId","setCurrentId","_useState3","_useState4","confirmDialog","setConfirmDialog","_useState5","_useState6","setPlList","_useState7","_useState8","setNSCost","_useState9","_useState10","setExpD","_useState11","_useState12","setDateR","_useState13","_useState14","compD","setCompD","_useState15","_useState16","clicked","setClicked","dateRange","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","useEffect","maxDate","useReactToPrint","Paper","elevation","Grid","container","item","xs","Toolbar","DateRangePickerComponent","placeholder","max","format","start","date","change","e","onClick","transList","filter","x","dateIn","toString","substring","nScost","transCode","forEach","sale","detail","prodId","productId","prod","find","buyingPrice","quantity","nSSales","reduce","currentItem","totalPrice","nSDepo","gDeposit","cSTranslist","datePaid","cScost","csTransCode","cSale","cSDetail","cSSales","cSDepo","tCTranslist","returnDate","tCcost","tCTransCode","tCSale","tCDetail","tCSales","tCDepo","totalSales","totalCost","totalDeposit","totalIncome","grossProfit","totaExpenses","Deposits","expDetails","_unused","calcPl","ProfitLossData","ConfirmDialog","title","subTitle"],"mappings":"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","file":"static/js/43.0eb128dd.chunk.js","sourcesContent":["\r\nimport \"./style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef} from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../actions/Expenses/expenses\";\r\nimport {DateRangePickerComponent} from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../actions/CompanyData/companyData\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td:{\r\n    textIndent: \"50px\",\r\n  },\r\n  tr:{\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n} \r\n\r\n})\r\n\r\n\r\n\r\nconst ProfitLossData = ({ classes, ...props }) => {\r\n  \r\n  const componentRef = useRef();\r\n  return (\r\n    <>\r\n    <ReactToPrint\r\n                trigger={() => <Controls.Button\r\n                  text=\"Print\"\r\n                  variant=\"outlined\"\r\n                  // startIcon={<AddIcon />}\r\n                  className={classes.newButton}\r\n                // onClick={handlePrint} \r\n                />\r\n                }\r\n                content={() => componentRef.current}\r\n\r\n              />\r\n     \r\n\r\n          <div >\r\n      <div ref={componentRef} className='p-5'>\r\n        <header>\r\n          \r\n        <div className=\"logo\">\r\n            <img src={props.companyDataList[0].logo} alt=\"generic business logo\" height={100} width={100} style={{marginTop:50 }}/>\r\n              <h5>{props.companyDataList[0].name}</h5>\r\n            </div>\r\n          <div className=\"invoiceNbr\">\r\n           PROFIT AND LOSS\r\n            <br />\r\n          <h5> For the period: {props.dateR}</h5>\r\n          </div>\r\n        </header>\r\n        {/* <div className=\"fromto from\">\r\n          <div className=\"panel\">FROM:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Robert Crowley</span><br />\r\n            <span>123 My St.</span><br />\r\n            <span>Portland ME, 04101</span><br />\r\n          </div>\r\n        </div>\r\n        <div className=\"fromto to\">\r\n          <div className=\"panel\">TO:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Someone</span><br />\r\n            <span>123 Street St.</span><br />\r\n            <span>Portland ME, 04101</span>\r\n          </div>\r\n        </div> */}\r\n        <section >\r\n          {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n          <table class=\"table  .table-responsive{-sm|-md|-lg|-xl|-xxl} table-bordered table-hover table-sm table-striped\" >\r\n                        <thead class=\"table-dark\" >\r\n                            <tr >\r\n                                <th scope=\"col\"></th>\r\n                                <th scope=\"col\">Amount</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                                \r\n                                 <th scope=\"col\">INCOME</th>\r\n                               \r\n                            </tr>\r\n                        \r\n                            <tr>\r\n                                \r\n                                <td className={classes.td}>Sales</td>\r\n                                 <td>{props.plList[0].Sales}</td>\r\n                               \r\n                            </tr>\r\n{/*                     \r\n                            <tr>\r\n                                <td className={classes.td}> Deposits</td>\r\n                                <td>{props.plList[0].Deposits}</td>\r\n                            </tr> */}\r\n                             <tr>\r\n                               \r\n                                <th className={classes.td}>TOTAL INCOME</th>\r\n                                <td>{props.plList[0].TotalIncome}</td>\r\n                               \r\n                            </tr>\r\n                            <tr>\r\n                               \r\n                                <th>COST OF GOODS SOLD</th>\r\n                               \r\n                            </tr>\r\n                             <tr>\r\n                               \r\n                                <td className={classes.td}>Cost</td>\r\n                               <td>{props.plList[0].Cost}</td>\r\n                            </tr>\r\n                              <tr>\r\n                               \r\n                                <th>GROSS PROFIT</th>\r\n                                 <td>{props.plList[0].GrossProfit}</td>\r\n                               \r\n                            </tr>\r\n                            <tr>\r\n                               \r\n                                <th>EXPENSES</th>\r\n                               \r\n                            </tr>\r\n                         \r\n                          \r\n                            {\r\n                                    // console.log(plList),\r\n                                    props.expD.map((record, index) => {\r\n                                         return ( <tr key = {index} hover>\r\n                                             <td className={classes.td}>{record.name}</td>\r\n                                             <td>{record.amount}</td>\r\n                                         </tr>\r\n                                        \r\n\r\n                                         )\r\n                                     })\r\n                                 }\r\n\r\n                                    <tr>\r\n                               \r\n                                <th className={classes.td}>TOTAL EXPENSES</th>\r\n                                 <td>{props.plList[0].Expenses}</td>\r\n                               \r\n                            </tr>\r\n                             <tr>\r\n                               \r\n                                <th>NET PROFIT(lOSS)</th>\r\n                               <td>{props.plList[0].NetProfit}</td>\r\n                            </tr>\r\n                           \r\n                        </tbody>\r\n                    </table>\r\n         \r\n\r\n        </section>\r\n      </div>\r\n\r\n\r\n    </div>\r\n    </>\r\n    \r\n          \r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDeatail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails:TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(ProfitLossData));\r\n\r\n\r\n\r\n\r\n","\r\nimport \"./style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../actions/Expenses/expenses\";\r\nimport { DateRangePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../actions/CompanyData/companyData\";\r\nimport ProfitLossData from \"./ProfitLossData\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td: {\r\n    textIndent: \"50px\",\r\n  },\r\n  tr: {\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nconst ProfitLoss = ({ classes, ...props }) => {\r\n  //Toast message\r\n  const { addToast } = useToasts();\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [confirmDialog, setConfirmDialog] = useState(false);\r\n  const [plList, setPlList] = useState([{}]);\r\n  const [nSCost, setNSCost] = useState([]);\r\n  const [expD, setExpD] = useState([]);\r\n  const [dateR, setDateR] = useState(null);\r\n  const [compD, setCompD] = useState(\"\");\r\n  const [clicked, setClicked] = useState(false);\r\n  const componentRef = useRef();\r\n\r\n  var dateRange = \"\";\r\n  var today = new Date();\r\n  var dd = String(today.getDate()).padStart(2, '0');\r\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n  var yyyy = today.getFullYear();\r\n\r\n  today = yyyy + '-' + mm + '-' + dd;\r\n  // console.log(today);\r\n\r\n  useEffect(() => {\r\n\r\n    props.fetchAllProducts();\r\n    props.fetchAllNSTransactions();\r\n    props.fetchAllTCTransactions();\r\n    props.fetchAllCSTransactions();\r\n    props.fetchAllTransactionDetails();\r\n    props.fetchAllCSTransactionDetails();\r\n    props.fetchAllTCTransactionDetails();\r\n    props.fetchAllExpenses();\r\n    props.fetchAllCompanyData();\r\n\r\n\r\n  }, [])\r\n\r\n  const showToast = () => {\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n\r\n  }\r\n  const onDelete = id => {\r\n    props.deleteCategory(id, showToast);\r\n    setConfirmDialog(false)\r\n\r\n  }\r\n\r\n  const openInDialog = () => {\r\n    setConfirmDialog(true)\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  const calcPl = () => {\r\n\r\n\r\n\r\n    try {\r\n      //1. cash sale transactions\r\n      //filter transactions according to date\r\n      var transList = props.salesList.filter(x => x.dateIn.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.dateIn.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      var nScost = 0;\r\n      var transCode = \"\";\r\n      //deposits\r\n\r\n      // console.log(transList);\r\n      transList.forEach((sale) => {\r\n\r\n        transCode = sale.transCode;\r\n        //get transdetails by transcode\r\n        var transDetail = props.nSTransactionDeatail.filter(x => x.transCode == transCode);\r\n        // console.log(transDetail);\r\n        transDetail.forEach((detail) => {\r\n          var prodId = detail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n\r\n          nScost = nScost + prod.buyingPrice * detail.quantity;\r\n          // console.log(detail.productId);\r\n          // console.log(detail.quantity);\r\n        });\r\n\r\n\r\n      });\r\n\r\n      setNSCost(nScost);\r\n      var nSSales = (transList.reduce((nSSales, currentItem) => nSSales = nSSales + currentItem.totalPrice, 0));\r\n      var nSDepo = (transList.reduce((nSDepo, currentItem) => nSDepo = nSDepo + currentItem.gDeposit, 0));\r\n      // var profit = nSSales - nScost;\r\n      // console.log(costue);\r\n\r\n      //2. Paid Credit sale transactions\r\n      //filter transactions by date\r\n      var cSTranslist = props.creditSalesList.filter(x => x.datePaid.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.datePaid.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      // console.log(cSTranslist);\r\n      var cScost = 0;\r\n      var csTransCode = \"\";\r\n\r\n      cSTranslist.forEach((cSale) => {\r\n\r\n        csTransCode = cSale.transCode;\r\n        //get transdetails by transcode\r\n        var cSTransDetail = props.cSaleDetailsList.filter(x => x.transCode == csTransCode);\r\n        // console.log(transDetail);\r\n        cSTransDetail.forEach((cSDetail) => {\r\n          var prodId = cSDetail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n\r\n          cScost = cScost + prod.buyingPrice * cSDetail.quantity;\r\n          // console.log(cSDetail.productId);\r\n          // console.log(cSDetail.quantity);\r\n          // console.log(prod.buyingPrice);\r\n        });\r\n      });\r\n      var cSSales = (cSTranslist.reduce((cSSales, currentItem) => cSSales = cSSales + currentItem.totalPrice, 0));\r\n      var cSDepo = (cSTranslist.reduce((cSDepo, currentItem) => cSDepo = cSDepo + currentItem.gDeposit, 0));\r\n      // console.log(cSSales);\r\n\r\n\r\n      //3. Truck and cadete transactions\r\n      //filter transactions by date\r\n      var tCTranslist = props.tcTransactionsList.filter(x => x.returnDate.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.returnDate.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      // console.log(cSTranslist);\r\n      var tCcost = 0;\r\n      var tCTransCode = \"\";\r\n\r\n      tCTranslist.forEach((tCSale) => {\r\n\r\n        tCTransCode = tCSale.transCode;\r\n        //get transdetails by transcode\r\n        var tCTransDetail = props.tcTransDetailsList.filter(x => x.transCode == tCTransCode);\r\n        // console.log(transDetail);\r\n        tCTransDetail.forEach((tCDetail) => {\r\n          var prodId = tCDetail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n\r\n          tCcost = tCcost + prod.buyingPrice * tCDetail.quantity;\r\n          // console.log(cSDetail.productId);\r\n          // console.log(cSDetail.quantity);\r\n          // console.log(prod.buyingPrice);\r\n        });\r\n      });\r\n      var tCSales = (tCTranslist.reduce((tCSales, currentItem) => tCSales = tCSales + currentItem.totalPrice, 0));\r\n      var tCDepo = (tCTranslist.reduce((tCDepo, currentItem) => tCDepo = tCDepo + currentItem.gDeposit, 0));\r\n      // console.log(tCSales);\r\n      // console.log(tCcost);\r\n      var totalSales = nSSales + cSSales + tCSales;\r\n      var totalCost = nScost + cScost + tCcost;\r\n      var totalDeposit = nSDepo + cSDepo + tCDepo;\r\n      // var totalIncome = totalSales + totalDeposit;\r\n      var totalIncome = totalSales;\r\n\r\n      var grossProfit = totalIncome - totalCost;\r\n      // console.log(totalSales + \" \" + totalCost + \" \" + totalDeposit);\r\n      // console.log(grossProfit);\r\n\r\n      // get all expenses\r\n      //get expenses by date\r\n\r\n      var expenses = props.expensesList.filter(x => x.date.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.date.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      var totaExpenses = (expenses.reduce((totaExpenses, currentItem) => totaExpenses = totaExpenses + currentItem.amount, 0));\r\n      var netProfit = grossProfit - totaExpenses;\r\n\r\n      const pl = {\r\n        Sales: totalSales,\r\n        Cost: totalCost,\r\n        GrossProfit: grossProfit,\r\n        Expenses: totaExpenses,\r\n        NetProfit: netProfit,\r\n        Deposits: totalDeposit,\r\n        TotalIncome: totalIncome,\r\n      }\r\n      const newP = [pl];\r\n      setPlList(newP);\r\n      // console.log(pl);\r\n      var expDetails = props.expensesList.filter(x => x.date >= dateR.toString().substring(0, 10) && x.date.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      setExpD(expDetails);\r\n      setCompD(props.companyDataList);\r\n\r\n    } catch {\r\n\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    dateRange = e.text;\r\n    setDateR(dateRange);\r\n  }; // the event handler\r\n\r\n  const startValue: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), dd));\r\n  const endValue: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth() + 1, dd));\r\n  const minDate: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), 8));\r\n  const maxDate: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), dd));\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {/* <PageHeader\r\n        title=\"Categories\"\r\n        //subTitle=\"Form design with validation\"\r\n        icon={<CategoryTwoToneIcon fontSize=\"large\" />}\r\n      />, */}\r\n      <Paper className={classes.paper} elevation={3}  >\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n\r\n            {/* <AddNewCategoryForm {...({ currentId, setCurrentId })} /> */}\r\n            <Toolbar>\r\n              {/* <Controls.Input\r\n                className={classes.searchInput}\r\n                label=\"Search Customer\"\r\n\r\n                InputProps={{\r\n                  startAdornment: (<InputAdornment position=\"start\">\r\n                    <Search />\r\n                  </InputAdornment>)\r\n                }}\r\n                onChange={handleSearch}\r\n\r\n              /> */}\r\n              <DateRangePickerComponent\r\n\r\n                placeholder=\"Enter Date Range\"\r\n                // startDate={startValue}\r\n                // endDate={endValue}\r\n                // min={minDate}\r\n                max={maxDate}\r\n                // minDays={3}\r\n                // maxDays={5}\r\n                format=\"yyyy-MM-dd\"\r\n                start=\"Year\"\r\n                date=\"Year\"\r\n                change={onChange}\r\n              // style={{ width: '50%' }}\r\n              >\r\n\r\n\r\n              </DateRangePickerComponent>\r\n              <Controls.Button\r\n                text=\"Load \"\r\n                variant=\"outlined\"\r\n                // startIcon={<AddIcon />}\r\n                className={classes.newButton}\r\n                onClick={() => { calcPl(); setClicked(true) }}\r\n              />\r\n            </Toolbar>\r\n\r\n            <Toolbar>\r\n\r\n\r\n              {/* <Controls.Button\r\n                text=\"Print\"\r\n                variant=\"outlined\"\r\n                startIcon={<AddIcon />}\r\n                className={classes.newButton}\r\n                onClick={handlePrint} /> */}\r\n\r\n              {/* <ReactToPrint\r\n                trigger={() => <Controls.Button\r\n                  text=\"Print\"\r\n                  variant=\"outlined\"\r\n                  startIcon={<AddIcon />}\r\n                  className={classes.newButton}\r\n                // onClick={handlePrint} \r\n                />\r\n                }\r\n                content={() => componentRef.current}\r\n\r\n              /> */}\r\n            </Toolbar>\r\n          </Grid>\r\n          <Grid>\r\n\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n            <div>\r\n\r\n              {clicked === true && <ProfitLossData  {...({ currentId, setCurrentId, plList, setPlList, expD, setExpD, dateR, setDateR, compD, setCompD })}  />}\r\n            </div>\r\n\r\n\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <ConfirmDialog\r\n        title=\"Are you sure you want to delete this record?\"\r\n        subTitle=\"This operation can't be reversed\"\r\n        confirmDialog={confirmDialog}\r\n        setConfirmDialog={setConfirmDialog}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDeatail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails: TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(ProfitLoss));\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}