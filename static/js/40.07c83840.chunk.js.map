{"version":3,"sources":["views/Reports/CreditReports/AllByCustomers/Paid/AllPaidCreditSalesReportDataCus.js","views/Reports/CreditReports/AllByCustomers/Paid/AllPaidCreditSalesReportByCus.js"],"names":["mapActionToProps","fetchAllProducts","productActions","fetchAllNSTransactions","cashSalesActions","fetchAllTCTransactions","TCActions","fetchAllCSTransactions","creditSalesActions","fetchAllTransactionDetails","fetchAllCSTransactionDetails","fetchAllTCTransactionDetails","fetchAllExpenses","Eactions","fetchAllCompanyData","companyDataActions","connect","state","productsList","products","list","creditSalesList","creditSale","tcTransactionsList","trucks_cadetes","nSTransactionDeatail","cash","salesList","cashSale","cSaleDetailsList","credit","tcTransDetailsList","trucks","expensesList","expenses","companyDataList","companyData","withStyles","theme","root","fontSize","paper","margin","spacing","padding","grid","paddingLeft","td","textIndent","tr","backgroundColor","color","t","width","_ref","classes","props","_objectWithoutProperties","_excluded","array","key","groupedSales","cSaleList","reduce","hash","obj","undefined","Object","assign","_defineProperty","concat","gTotalPrice","gTotal","gQuantity","result","componentRef","useRef","_jsxs","_Fragment","children","_jsx","ReactToPrint","trigger","Controls","Button","text","variant","className","newButton","content","current","ref","src","logo","alt","height","style","marginTop","name","dateR","class","scope","keys","map","sale","index","hover","sDet","forEach","a","this","prodName","customer","date","quantity","unitPrice","totalPrice","deposit","total","push","create","currentItem","gDeposit","fetchAllCustomers","customerActions","nSTransactionDetail","customersList","customers","_useState","useToasts","addToast","useState","_useState2","_slicedToArray","currentId","setCurrentId","_useState3","_useState4","confirmDialog","setConfirmDialog","_useState5","_useState6","plList","setPlList","_useState7","_useState8","_useState9","_useState10","expD","setExpD","_useState11","_useState12","setDateR","_useState13","_useState14","compD","setCompD","_useState15","_useState16","clicked","setClicked","_useState17","_useState18","nSaleList","setNSaleList","_useState19","_useState20","setCSaleList","_useState21","_useState22","cTSales","setCTSales","dateRange","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","useEffect","maxDate","useReactToPrint","Paper","elevation","Grid","container","item","xs","Toolbar","DateRangePickerComponent","placeholder","max","format","start","change","e","onClick","cSTranslist","filter","x","datePaid","toString","substring","csTransCode","CSaleDetails","newCSaleDetails","cSale","transCode","cSTransDetail","find","id","customerId","cSDetail","prodId","productId","prod","buyingPrice","nCSaleDetails","sellingPrice","dateIn","_toConsumableArray","error","console","log","message","calcPl","AllPaidCreditSalesReportDataCus","ConfirmDialog","title","subTitle"],"mappings":"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","file":"static/js/40.07c83840.chunk.js","sourcesContent":["\r\nimport \"./style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../../../actions/Expenses/expenses\";\r\nimport { DateRangePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../../../actions/CompanyData/companyData\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td: {\r\n    textIndent: \"50px\",\r\n  },\r\n  tr: {\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n  },\r\n  t: {\r\n    width: \"200px\"\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nconst AllCreditSalesReportDataCus = ({ classes, ...props }) => {\r\n  const group = () => {\r\n\r\n  }\r\n  function groupByKey(array, key) {\r\n    return array\r\n      .reduce((hash, obj) => {\r\n        if (obj[key] === undefined) return hash;\r\n        return Object.assign(hash, { [obj[key]]: (hash[obj[key]] || []).concat(obj) })\r\n      }, {})\r\n  }\r\n\r\n\r\n\r\n\r\n  var groupedSales = groupByKey(props.cSaleList, 'customer');\r\n  //  console.log(groupedSales);\r\n\r\n  //var dateGSales = groupByDate(groupedSales, \"dateIn\");\r\n  // console.log(groupedSales);\r\n  // console.log(props.cSaleList);\r\n  var gTotalPrice = 0;\r\n  var gDeposit = 0;\r\n  var gTotal = 0;\r\n  var gQuantity = 0;\r\n\r\n  var result = [];\r\n  function groupNSum(sDet) {\r\n    //  console.log(sDet);\r\n\r\n    sDet.forEach(function (a) {\r\n      if (!this[a.prodName] && !this[a.customer]) {\r\n        this[a.prodName] = { date: a.date, prodName: a.prodName, quantity: 0, unitPrice: a.unitPrice, totalPrice: 0, deposit: 0, total: 0, customer: a.customer };\r\n        result.push(this[a.prodName]);\r\n      }\r\n      this[a.prodName].quantity += a.quantity;\r\n      this[a.prodName].totalPrice += a.totalPrice;\r\n      this[a.prodName].deposit += a.deposit;\r\n      this[a.prodName].total += a.total;\r\n    }, Object.create(null));\r\n    // console.log(result)\r\n    gTotalPrice = (result.reduce((gTotalPrice, currentItem) => gTotalPrice = gTotalPrice + currentItem.totalPrice, 0));\r\n    gDeposit = (result.reduce((gDeposit, currentItem) => gDeposit = gDeposit + currentItem.deposit, 0));\r\n    gTotal = (result.reduce((gTotal, currentItem) => gTotal = gTotal + currentItem.total, 0));\r\n    gQuantity = (result.reduce((gQuantity, currentItem) => gQuantity = gQuantity + currentItem.quantity, 0));\r\n   \r\n  }\r\n  \r\n  function resetR(){\r\n    result =[];\r\n  }\r\n\r\n\r\n  const componentRef = useRef();\r\n  return (\r\n\r\n    <>\r\n\r\n      <ReactToPrint\r\n        trigger={() => <Controls.Button\r\n          text=\"Print\"\r\n          variant=\"outlined\"\r\n          // startIcon={<AddIcon />}\r\n          className={classes.newButton}\r\n        // onClick={handlePrint} \r\n        />\r\n        }\r\n        content={() => componentRef.current}\r\n\r\n      />\r\n\r\n\r\n      <div >\r\n        <div ref={componentRef} className='p-5'>\r\n          <header>\r\n\r\n            <div className=\"logo\">\r\n            <img src={props.companyDataList[0].logo} alt=\"generic business logo\" height={100} width={100} style={{marginTop:50 }}/>\r\n              <h5>{props.companyDataList[0].name}</h5>\r\n            </div>\r\n            <div className=\"invoiceNbr\">\r\n              ALL PAID CREDIT SALES BY CUSTOMER REPORT\r\n              <br />\r\n              <h5> For the period: {props.dateR}</h5>\r\n            </div>\r\n          </header>\r\n          {/* <div className=\"fromto from\">\r\n          <div className=\"panel\">FROM:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Robert Crowley</span><br />\r\n            <span>123 My St.</span><br />\r\n            <span>Portland ME, 04101</span><br />\r\n          </div>\r\n        </div>\r\n        <div className=\"fromto to\">\r\n          <div className=\"panel\">TO:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Someone</span><br />\r\n            <span>123 Street St.</span><br />\r\n            <span>Portland ME, 04101</span>\r\n          </div>\r\n        </div> */}\r\n          <section >\r\n\r\n            {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n            <table class=\"table  .table-responsive{-sm|-md|-lg|-xl|-xxl} table-bordered table-hover table-sm table-striped\" >\r\n              <thead class=\"table-dark\" >\r\n                <tr >\r\n                  <th scope=\"col\" className={classes.t}>Customer</th>\r\n\r\n                  <th scope=\"col\">Product Details</th>\r\n\r\n\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n\r\n\r\n\r\n\r\n                {/* {\r\n                                    // console.log(plList),\r\n                                    props.cSaleList.map((record, index) => {\r\n                                         return ( <tr key = {index} hover>\r\n                                             <td className={classes.td}>{record.prodName}</td>\r\n                                             <td>{record.quantity}</td>\r\n                                             <td>{record.unitPrice}</td>\r\n                                             <td>{record.totalPrice}</td>\r\n                                             <td>{record.deposit}</td>\r\n                                             <td>{record.total}</td>\r\n                                         </tr>\r\n                                        \r\n\r\n                                         )\r\n                                     })\r\n                                 }\r\n                                <tr>\r\n                                <td></td>\r\n                                   <td className={classes.td}></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                </tr>\r\n                                 <tr>\r\n                                   <td>Totals</td>\r\n                                   <td>{gQuantity}</td>\r\n                                   <td></td>\r\n                                   <td>{gTotalPrice}</td>\r\n                                   <td>{gDeposit}</td>\r\n                                   <td>{gTotal}</td>\r\n\r\n                                 </tr> */}\r\n\r\n                {\r\n                  // console.log(plList),\r\n                  Object.keys(groupedSales).map((sale, index) => {\r\n                    return (<tr key={index} hover>\r\n                      <td className={classes.td}>{sale}</td>\r\n\r\n                      <tr >\r\n                        <th className={classes.t}>Name</th>\r\n                        <th className={classes.t}>Quantity</th>\r\n                        <th className={classes.t}>Unit Price</th>\r\n                        <th className={classes.t}>Total Price</th>\r\n                        {/* <th className={classes.t}>Deposit</th> */}\r\n                        <th className={classes.t}>Total</th>\r\n                        <th > {groupNSum(groupedSales[sale])}</th>\r\n                      </tr>\r\n\r\n                      {result.map(sDet => (\r\n                        // groupNSum(sDet)\r\n                        <tr>\r\n\r\n                          <td className={classes.t}>{sDet.prodName}</td>\r\n                          <td className={classes.t}>{sDet.quantity}</td>\r\n                          <td className={classes.t}>{sDet.unitPrice}</td>\r\n                          <td className={classes.t}>{sDet.totalPrice}</td>\r\n                          {/* <td className={classes.t}>{sDet.deposit}</td> */}\r\n                          <td className={classes.t}>{sDet.total}</td>\r\n                        </tr>\r\n                      ))}\r\n\r\n                      {\r\n                        <tr>\r\n                          <th>Total</th>\r\n                          <td>{gQuantity}</td>\r\n                          <td></td>\r\n                          <td>{gTotalPrice}</td>\r\n                          {/* <td>{gDeposit}</td> */}\r\n                          <td>{gTotal}</td>\r\n                          <td>{resetR()}</td>\r\n                        </tr>\r\n                      }\r\n                    </tr>\r\n\r\n\r\n                    )\r\n\r\n                  })\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n              </tbody>\r\n            </table>\r\n\r\n\r\n          </section>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    </>\r\n\r\n\r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDeatail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails: TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AllCreditSalesReportDataCus));\r\n\r\n\r\n\r\n\r\n","\r\nimport \"./style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../../../actions/Expenses/expenses\";\r\nimport { DateRangePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../../../actions/CompanyData/companyData\";\r\nimport AllPaidCreditSalesReportDataCus from \"./AllPaidCreditSalesReportDataCus\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport * as customerActions from \"../../../../../actions/Customers/customers\";\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td: {\r\n    textIndent: \"50px\",\r\n  },\r\n  tr: {\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nconst AllCreditSalesReportByCus = ({ classes, ...props }) => {\r\n  //Toast message\r\n  const { addToast } = useToasts();\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [confirmDialog, setConfirmDialog] = useState(false);\r\n  const [plList, setPlList] = useState([{}]);\r\n  const [nSCost, setNSCost] = useState([]);\r\n  const [expD, setExpD] = useState([]);\r\n  const [dateR, setDateR] = useState(null);\r\n  const [compD, setCompD] = useState(\"\");\r\n  const [clicked, setClicked] = useState(false);\r\n  const componentRef = useRef();\r\n  const [nSaleList, setNSaleList] = useState([]);\r\n  const [cSaleList, setCSaleList] = useState([{}]);\r\n  const [cTSales, setCTSales] = useState([{}]);\r\n\r\n  var dateRange = \"\";\r\n  var today = new Date();\r\n  var dd = String(today.getDate()).padStart(2, '0');\r\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n  var yyyy = today.getFullYear();\r\n\r\n  today = yyyy + '-' + mm + '-' + dd;\r\n  // console.log(today);\r\n\r\n  useEffect(() => {\r\n\r\n    props.fetchAllProducts();\r\n    props.fetchAllNSTransactions();\r\n    props.fetchAllTCTransactions();\r\n    props.fetchAllCSTransactions();\r\n    props.fetchAllTransactionDetails();\r\n    props.fetchAllCSTransactionDetails();\r\n    props.fetchAllTCTransactionDetails();\r\n    props.fetchAllExpenses();\r\n    props.fetchAllCompanyData();\r\n    props. fetchAllCustomers();\r\n\r\n\r\n  }, [])\r\n\r\n  const showToast = () => {\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n\r\n  }\r\n  const onDelete = id => {\r\n    props.deleteCategory(id, showToast);\r\n    setConfirmDialog(false)\r\n\r\n  }\r\n\r\n  const openInDialog = () => {\r\n    setConfirmDialog(true)\r\n\r\n\r\n\r\n  }\r\n\r\n  const calcPl = () => {\r\n    try {\r\n      //2. Paid Credit sale transactions\r\n      //filter transactions by date\r\n      var cSTranslist = props.creditSalesList.filter(x => x.datePaid.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.datePaid.toString().substring(0, 10) <= dateR.toString().substring(13, 23) );\r\n      // console.log(cSTranslist);\r\n      var cScost = 0;\r\n      var csTransCode = \"\";\r\n\r\n      var CSaleDetails = [];\r\n      var  newCSaleDetails = [];\r\n\r\n      cSTranslist.forEach((cSale) => {\r\n\r\n        csTransCode = cSale.transCode;\r\n        //get transdetails by transcode\r\n        var cSTransDetail = props.cSaleDetailsList.filter(x => x.transCode == csTransCode);\r\n        // console.log(transDetail);\r\n        var customers = props.customersList.find(x=> x.id ==cSale.customerId )\r\n        cSTransDetail.forEach((cSDetail) => {\r\n          var prodId = cSDetail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n         \r\n          cScost = cScost + prod.buyingPrice * cSDetail.quantity;\r\n\r\n           //get products details\r\n           const nCSaleDetails = {\r\n            customer: customers.name,\r\n            productId: prod.productId,\r\n            prodName: prod.name,\r\n            quantity: cSDetail.quantity,\r\n            unitPrice: prod.sellingPrice,\r\n            totalPrice: cSDetail.totalPrice,\r\n            deposit: cSDetail.deposit,\r\n            total: cSDetail.total,\r\n            date: cSale.dateIn\r\n          }\r\n          newCSaleDetails=[...CSaleDetails, nCSaleDetails];\r\n         CSaleDetails = newCSaleDetails;\r\n          // console.log(cSDetail.productId);\r\n          // console.log(cSDetail.quantity);\r\n      //  console.log(newCSaleDetails);\r\n        });\r\n      });\r\n     \r\n      var result = [];\r\n\r\n      newCSaleDetails.forEach(function (a) {\r\n        if ( !this[a.prodName] && !this[a.customer] ) {\r\n            this[a.customer] = { date: a.date, prodName: a.prodName, quantity: 0, unitPrice:a.unitPrice,totalPrice: 0,deposit:0,total:0,customer:a.customer};\r\n            result.push(this[a.customer]);\r\n        } \r\n        this[a.customer].quantity += a.quantity;\r\n        this[a.customer].totalPrice += a.totalPrice;\r\n        this[a.customer].deposit += a.deposit;\r\n        this[a.customer].total += a.total;\r\n    }, Object.create(null));\r\n\r\n    // console.log(result);\r\n\r\n      // console.log(result);\r\n     // setNSaleList(result);\r\n      setCSaleList(newCSaleDetails);\r\n     \r\n      setCompD(props.companyDataList);\r\n\r\n    } catch(error) {\r\n\r\n      console.log(error.message);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    dateRange = e.text;\r\n    setDateR(dateRange);\r\n  }; // the event handler\r\n\r\n  const startValue: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), dd));\r\n  const endValue: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth()+1 , dd));\r\n  const minDate: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), 8));\r\n  const maxDate: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), dd));\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {/* <PageHeader\r\n        title=\"Categories\"\r\n        //subTitle=\"Form design with validation\"\r\n        icon={<CategoryTwoToneIcon fontSize=\"large\" />}\r\n      />, */}\r\n      <Paper className={classes.paper} elevation={3}  >\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n\r\n            {/* <AddNewCategoryForm {...({ currentId, setCurrentId })} /> */}\r\n            <Toolbar>\r\n              {/* <Controls.Input\r\n                className={classes.searchInput}\r\n                label=\"Search Customer\"\r\n\r\n                InputProps={{\r\n                  startAdornment: (<InputAdornment position=\"start\">\r\n                    <Search />\r\n                  </InputAdornment>)\r\n                }}\r\n                onChange={handleSearch}\r\n\r\n              /> */}\r\n              <DateRangePickerComponent\r\n\r\n                placeholder=\"Enter Date Range\"\r\n                // startDate={startValue}\r\n                // endDate={endValue}\r\n                // min={minDate}\r\n                max={maxDate}\r\n                // minDays={3}\r\n                // maxDays={5}\r\n                format=\"yyyy-MM-dd\"\r\n                start=\"Year\"\r\n                date=\"Year\"\r\n                change={onChange}\r\n              // style={{ width: '50%' }}\r\n              >\r\n\r\n\r\n              </DateRangePickerComponent>\r\n              <Controls.Button\r\n                text=\"Load \"\r\n                variant=\"outlined\"\r\n                // startIcon={<AddIcon />}\r\n                className={classes.newButton}\r\n                onClick={() => { calcPl(); setClicked(true) }}\r\n              />\r\n            </Toolbar>\r\n\r\n            <Toolbar>\r\n\r\n\r\n              {/* <Controls.Button\r\n                text=\"Print\"\r\n                variant=\"outlined\"\r\n                startIcon={<AddIcon />}\r\n                className={classes.newButton}\r\n                onClick={handlePrint} /> */}\r\n\r\n              {/* <ReactToPrint\r\n                trigger={() => <Controls.Button\r\n                  text=\"Print\"\r\n                  variant=\"outlined\"\r\n                  startIcon={<AddIcon />}\r\n                  className={classes.newButton}\r\n                // onClick={handlePrint} \r\n                />\r\n                }\r\n                content={() => componentRef.current}\r\n\r\n              /> */}\r\n            </Toolbar>\r\n          </Grid>\r\n          <Grid>\r\n\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n            <div>\r\n\r\n              {clicked === true && <AllPaidCreditSalesReportDataCus {...({ currentId, setCurrentId, plList, setPlList, expD, setExpD, dateR, setDateR, compD, setCompD, nSaleList, setNSaleList,cSaleList, setCSaleList,cTSales, setCTSales })}  />}\r\n            </div>\r\n\r\n\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <ConfirmDialog\r\n        title=\"Are you sure you want to delete this record?\"\r\n        subTitle=\"This operation can't be reversed\"\r\n        confirmDialog={confirmDialog}\r\n        setConfirmDialog={setConfirmDialog}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDetail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n  customersList: state.customers.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails: TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n  fetchAllCustomers: customerActions.fetchAllCustomer,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AllCreditSalesReportByCus));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}