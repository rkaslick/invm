{"version":3,"sources":["views/Reports/SalesReport/SalesReportData.js","views/Reports/SalesReport/SalesReport.js"],"names":["mapActionToProps","fetchAllProducts","productActions","fetchAllNSTransactions","cashSalesActions","fetchAllTCTransactions","TCActions","fetchAllCSTransactions","creditSalesActions","fetchAllTransactionDetails","fetchAllCSTransactionDetails","fetchAllTCTransactionDetails","fetchAllExpenses","Eactions","fetchAllCompanyData","companyDataActions","connect","state","productsList","products","list","creditSalesList","creditSale","tcTransactionsList","trucks_cadetes","nSTransactionDeatail","cash","salesList","cashSale","cSaleDetailsList","credit","tcTransDetailsList","trucks","expensesList","expenses","companyDataList","companyData","withStyles","theme","root","fontSize","paper","margin","spacing","padding","grid","paddingLeft","td","textIndent","tr","backgroundColor","color","_ref","classes","props","_objectWithoutProperties","_excluded","console","log","nSaleList","gTotalPrice","reduce","currentItem","totalPrice","gTotal","gDeposit","deposit","total","gQuantity","quantity","componentRef","useRef","_jsxs","_Fragment","children","_jsx","ReactToPrint","trigger","Controls","Button","text","variant","className","newButton","content","current","ref","src","logo","alt","height","width","style","marginTop","name","dateR","class","scope","map","record","index","hover","prodName","unitPrice","nSTransactionDetail","_useState","useToasts","addToast","useState","_useState2","_slicedToArray","currentId","setCurrentId","_useState3","_useState4","confirmDialog","setConfirmDialog","_useState5","_useState6","plList","setPlList","_useState7","_useState8","setNSCost","_useState9","_useState10","expD","setExpD","_useState11","_useState12","setDateR","_useState13","_useState14","compD","setCompD","_useState15","_useState16","clicked","setClicked","_useState17","_useState18","setNSaleList","_useState19","_useState20","cSaleList","setCSaleList","_useState21","_useState22","cTSales","setCTSales","dateRange","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","useEffect","maxDate","useReactToPrint","Paper","elevation","Grid","container","item","xs","Toolbar","DateRangePickerComponent","placeholder","max","format","start","date","change","e","onClick","transList","filter","x","dateIn","toString","substring","transCode","saleDetails","newNSaleDetails","forEach","sale","detail","prodId","productId","prod","find","nSaleDetails","sellingPrice","concat","_toConsumableArray","result","a","this","push","Object","create","nSSales","nSDepo","cSTranslist","datePaid","csTransCode","cSale","cSDetail","nCSaleDetails","newCSaleDetails","cSSales","cSDepo","tCTranslist","returnDate","tCTransCode","tCSale","tCDetail","tCSaleDetails","newTCSaleDetails","tCSales","tCDepo","totalSales","totalDeposit","totalIncome","grossProfit","nScost","totaExpenses","amount","Sales","Cost","GrossProfit","Expenses","NetProfit","Deposits","TotalIncome","expDetails","error","calcPl","SalesReportData","ConfirmDialog","title","subTitle"],"mappings":"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","file":"static/js/44.82a1d9b2.chunk.js","sourcesContent":["\r\nimport \"./style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef} from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../actions/Expenses/expenses\";\r\nimport {DateRangePickerComponent} from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../actions/CompanyData/companyData\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td:{\r\n    textIndent: \"50px\",\r\n  },\r\n  tr:{\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n} \r\n\r\n})\r\n\r\n\r\n\r\nconst  SalesReportData = ({ classes, ...props }) => {\r\n  const group =() =>{\r\n    \r\n  }\r\n//   function groupByKey(array, key) {\r\n//     return array\r\n//       .reduce((hash, obj) => {\r\n//         if(obj[key] === undefined) return hash; \r\n//         return Object.assign(hash, { [obj[key]]:( hash[obj[key]] || [] ).concat(obj)})\r\n//       }, {})\r\n//  }\r\n\r\n\r\n\r\n \r\n//  var groupedSales = groupByKey(props.nSaleList, 'dae');\r\n\r\n //var dateGSales = groupByDate(groupedSales, \"dateIn\");\r\n  // console.log(groupedSales);\r\n  console.log(props.nSaleList);\r\n  var gTotalPrice = (props.nSaleList.reduce((gTotalPrice, currentItem) => gTotalPrice = gTotalPrice + currentItem.totalPrice, 0));\r\n  var gDeposit = (props.nSaleList.reduce((gDeposit, currentItem) => gDeposit = gDeposit + currentItem.deposit, 0));\r\n  var gTotal = (props.nSaleList.reduce((gTotal, currentItem) => gTotal = gTotal + currentItem.total, 0));\r\n  var gQuantity = (props.nSaleList.reduce((gQuantity, currentItem) => gQuantity = gQuantity + currentItem.quantity, 0));\r\n  \r\n  const componentRef = useRef();\r\n  return (\r\n    \r\n    <>\r\n \r\n    <ReactToPrint\r\n                trigger={() => <Controls.Button\r\n                  text=\"Print\"\r\n                  variant=\"outlined\"\r\n                  // startIcon={<AddIcon />}\r\n                  className={classes.newButton}\r\n                // onClick={handlePrint} \r\n                />\r\n                }\r\n                content={() => componentRef.current}\r\n\r\n              />\r\n     \r\n\r\n          <div >\r\n      <div ref={componentRef} className='p-5'>\r\n        <header>\r\n          \r\n        <div className=\"logo\">\r\n            <img src={props.companyDataList[0].logo} alt=\"generic business logo\" height={100} width={100} style={{marginTop:50 }}/>\r\n              <h5>{props.companyDataList[0].name}</h5>\r\n            </div>\r\n          <div className=\"invoiceNbr\">\r\n           ALL WALK IN SALES REPORT\r\n            <br />\r\n          <h5> For the period: {props.dateR}</h5>\r\n          </div>\r\n        </header>\r\n        {/* <div className=\"fromto from\">\r\n          <div className=\"panel\">FROM:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Robert Crowley</span><br />\r\n            <span>123 My St.</span><br />\r\n            <span>Portland ME, 04101</span><br />\r\n          </div>\r\n        </div>\r\n        <div className=\"fromto to\">\r\n          <div className=\"panel\">TO:</div>\r\n          <div className=\"fromtocontent\">\r\n            <span>Someone</span><br />\r\n            <span>123 Street St.</span><br />\r\n            <span>Portland ME, 04101</span>\r\n          </div>\r\n        </div> */}\r\n        <section >\r\n          \r\n          {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n          <table class=\"table  .table-responsive{-sm|-md|-lg|-xl|-xxl} table-bordered table-hover table-sm table-striped\" >\r\n                        <thead class=\"table-dark\" >\r\n                            <tr >\r\n                                <th scope=\"col\">Product Name</th>\r\n                                <th scope=\"col\">Quantity</th>\r\n                                <th scope=\"col\">Unit Price</th>\r\n                                <th scope=\"col\">Total Price</th>\r\n                                {/* <th scope=\"col\">Deposit</th> */}\r\n                                <th scope=\"col\">Total</th>\r\n                                \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                       \r\n                         \r\n                          \r\n                           \r\n                                 {\r\n                                    // console.log(plList),\r\n                                    props.nSaleList.map((record, index) => {\r\n                                         return ( <tr key = {index} hover>\r\n                                             <td className={classes.td}>{record.prodName}</td>\r\n                                             <td>{record.quantity}</td>\r\n                                             <td>{record.unitPrice}</td>\r\n                                             <td>{record.totalPrice}</td>\r\n                                             {/* <td>{record.deposit}</td> */}\r\n                                             <td>{record.total}</td>\r\n                                         </tr>\r\n                                        \r\n\r\n                                         )\r\n                                     })\r\n                                 }\r\n                                <tr>\r\n                                <td></td>\r\n                                   <td className={classes.td}></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                   <td></td>\r\n                                </tr>\r\n                                 <tr>\r\n                                   <td>Totals</td>\r\n                                   <td>{gQuantity}</td>\r\n                                   <td></td>\r\n                                   <td>{gTotalPrice}</td>\r\n                                   {/* <td>{gDeposit}</td> */}\r\n                                   <td>{gTotal}</td>\r\n\r\n                                 </tr>\r\n\r\n                                    {/* {\r\n                                    // console.log(plList),\r\n                                    Object.keys(groupedSales).map((sale,index) => {\r\n                                         return ( <tr key = {index} hover>\r\n                                             <td className={classes.td}>{sale}</td>\r\n                                             <td>{sale.productId}</td>\r\n                                             <tr>\r\n                                                 <th>Name</th>\r\n                                                 <th>Quantity</th>\r\n                                               </tr>\r\n                                              \r\n                                             {groupedSales[sale].map(sDet => (\r\n                                               \r\n                                               <tr>\r\n                                                 \r\n                                                 <td>{sDet.prodName}</td>\r\n                                                 <td>{sDet.quantity}</td>\r\n                                               </tr>\r\n                                             ))}\r\n                                         </tr>\r\n                                      \r\n\r\n                                         )\r\n                                     })\r\n                                 } */}\r\n\r\n                           \r\n                           \r\n                        </tbody>\r\n                    </table>\r\n         \r\n\r\n        </section>\r\n      </div>\r\n\r\n\r\n    </div>\r\n    </>\r\n    \r\n          \r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDeatail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails:TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(SalesReportData));\r\n\r\n\r\n\r\n\r\n","\r\nimport \"./style.css\";\r\nimport { Grid, Paper, Table, TableContainer, TableHead, TableRow, TableCell, Toolbar, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import * as Cactions from \"../../../../../actions/Category/categories\";\r\n//import * as storeActions from \"../../../../../actions/Store/stores\";\r\n// import AddNewCategoryForm from \"./AddNewCategoryForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n//import PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport PageHeader from \"../../Components/PageHeader\";\r\nimport CategoryTwoToneIcon from '@material-ui/icons/CategoryTwoTone';\r\nimport ConfirmDialog from \"../../Components/controls/ConfirmDialog\";\r\n//import Controls from \"./Controls\";\r\nimport NotListedLocation from '@material-ui/icons/NotListedLocation';\r\nimport * as productActions from \"../../../actions/Products/products\";\r\nimport * as cashSalesActions from \"../../../actions/CashSale/cashSale\";\r\nimport * as creditSalesActions from \"../../../actions/CreditSale/creditSale\";\r\nimport * as TCActions from \"../../../actions/Trucks_Cadetes/Trucks_Cadetes\";\r\nimport Controls from \"../../Components/controls/Controls\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { IoCalendarClearSharp } from \"react-icons/io5\";\r\nimport * as Eactions from \"../../../actions/Expenses/expenses\";\r\nimport { DateRangePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport * as companyDataActions from \"../../../actions/CompanyData/companyData\";\r\nimport SalesReportData from \"./SalesReportData\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { useReactToPrint } from 'react-to-print';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"0.95rem\"\r\n    }\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(-8.9),\r\n    padding: theme.spacing(6)\r\n  },\r\n\r\n  grid: {\r\n    paddingLeft: theme.spacing(2)\r\n  },\r\n  td: {\r\n    textIndent: \"50px\",\r\n  },\r\n  tr: {\r\n    backgroundColor: \"primary\",\r\n    color: \"white\"\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nconst SalesReport = ({ classes, ...props }) => {\r\n  //Toast message\r\n  const { addToast } = useToasts();\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [confirmDialog, setConfirmDialog] = useState(false);\r\n  const [plList, setPlList] = useState([{}]);\r\n  const [nSCost, setNSCost] = useState([]);\r\n  const [expD, setExpD] = useState([]);\r\n  const [dateR, setDateR] = useState(null);\r\n  const [compD, setCompD] = useState(\"\");\r\n  const [clicked, setClicked] = useState(false);\r\n  const componentRef = useRef();\r\n  const [nSaleList, setNSaleList] = useState([]);\r\n  const [cSaleList, setCSaleList] = useState([{}]);\r\n  const [cTSales, setCTSales] = useState([{}]);\r\n\r\n  var dateRange = \"\";\r\n  var today = new Date();\r\n  var dd = String(today.getDate()).padStart(2, '0');\r\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n  var yyyy = today.getFullYear();\r\n\r\n  today = yyyy + '-' + mm + '-' + dd;\r\n  // console.log(today);\r\n\r\n  useEffect(() => {\r\n\r\n    props.fetchAllProducts();\r\n    props.fetchAllNSTransactions();\r\n    props.fetchAllTCTransactions();\r\n    props.fetchAllCSTransactions();\r\n    props.fetchAllTransactionDetails();\r\n    props.fetchAllCSTransactionDetails();\r\n    props.fetchAllTCTransactionDetails();\r\n    props.fetchAllExpenses();\r\n    props.fetchAllCompanyData();\r\n\r\n\r\n  }, [])\r\n\r\n  const showToast = () => {\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n    addToast(\"Record was deleted succesffuly\", { appearance: 'error' })\r\n\r\n  }\r\n  const onDelete = id => {\r\n    props.deleteCategory(id, showToast);\r\n    setConfirmDialog(false)\r\n\r\n  }\r\n\r\n  const openInDialog = () => {\r\n    setConfirmDialog(true)\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  const calcPl = () => {\r\n\r\n\r\n\r\n    try {\r\n      //1. cash sale transactions\r\n      //filter transactions according to date\r\n      var transList = props.salesList.filter(x => x.dateIn.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.dateIn.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      var nScost = 0;\r\n      var transCode = \"\";\r\n      //deposits\r\n    \r\n      var saleDetails = [];\r\n      var  newNSaleDetails = [];\r\n      \r\n      transList.forEach((sale) => {\r\n\r\n        transCode = sale.transCode;\r\n        //get transdetails by transcode\r\n        var transDetail = props.nSTransactionDetail.filter(x => x.transCode == transCode);\r\n        // console.log(transDetail);\r\n        transDetail.forEach((detail) => {\r\n          var prodId = detail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n          // console.log(\"productid and buying price \" + prod.productId + \" \" + prod.buyingPrice);\r\n          // nScost = nScost + prod.buyingPrice * detail.quantity;\r\n          \r\n           const nSaleDetails = {\r\n            transCode: transCode,\r\n            productId: prod.productId,\r\n            prodName: prod.name,\r\n            quantity: detail.quantity,\r\n            unitPrice: prod.sellingPrice,\r\n            totalPrice: detail.totalPrice,\r\n            deposit: detail.deposit,\r\n            total: detail.total,\r\n            date:sale.dateIn.toString().substring(0, 10)\r\n          }\r\n          \r\n      newNSaleDetails=[...saleDetails,nSaleDetails];\r\n      // setNSaleList(newNSaleDetails);\r\n      saleDetails = newNSaleDetails;\r\n         \r\n          \r\n        });\r\n\r\n\r\n      });\r\n\r\n      //sum same products up\r\n     \r\n   var result = [];\r\n\r\n   newNSaleDetails.forEach(function (a) {\r\n        if ( !this[a.prodName] && !this[a.date] ) {\r\n            this[a.prodName] = { date: a.date, prodName: a.prodName, quantity: 0, unitPrice:a.unitPrice,totalPrice: 0,deposit:0,total:0};\r\n            result.push(this[a.prodName]);\r\n        } \r\n        this[a.prodName].quantity += a.quantity;\r\n        this[a.prodName].totalPrice += a.totalPrice;\r\n        this[a.prodName].deposit += a.deposit;\r\n        this[a.prodName].total += a.total;\r\n    }, Object.create(null));\r\n\r\n    console.log(result);\r\n\r\n      // console.log(newNSaleDetails);\r\n      setNSaleList(result);\r\n     \r\n      // \r\n   \r\n     \r\n      setNSCost(nScost);\r\n      var nSSales = (transList.reduce((nSSales, currentItem) => nSSales = nSSales + currentItem.totalPrice, 0));\r\n      var nSDepo = (transList.reduce((nSDepo, currentItem) => nSDepo = nSDepo + currentItem.gDeposit, 0));\r\n      // var profit = nSSales - nScost;\r\n     \r\n\r\n      //2. Paid Credit sale transactions\r\n      //filter transactions by date\r\n      var cSTranslist = props.creditSalesList.filter(x => x.datePaid.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.datePaid.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      // console.log(cSTranslist);\r\n      var cScost = 0;\r\n      var csTransCode = \"\";\r\n\r\n      cSTranslist.forEach((cSale) => {\r\n\r\n        csTransCode = cSale.transCode;\r\n        //get transdetails by transcode\r\n        var cSTransDetail = props.cSaleDetailsList.filter(x => x.transCode == csTransCode);\r\n        // console.log(transDetail);\r\n        cSTransDetail.forEach((cSDetail) => {\r\n          var prodId = cSDetail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n\r\n          // cScost = cScost + prod.buyingPrice * cSDetail.quantity;\r\n\r\n           //get products details\r\n           const nCSaleDetails = {\r\n            // productId: prod.productId,\r\n            // prodName: prod.name,\r\n            quantity: cSDetail.quantity,\r\n            unitPrice: prod.sellingPrice,\r\n            totalPrice: cSDetail.totalPrice,\r\n            deposit: cSDetail.deposit,\r\n            total: cSDetail.total\r\n          }\r\n          const newCSaleDetails=[...cSaleList, nCSaleDetails];\r\n          setCSaleList(newCSaleDetails);\r\n          // console.log(cSDetail.productId);\r\n          // console.log(cSDetail.quantity);\r\n      //  console.log(newCSaleDetails);\r\n        });\r\n      });\r\n      var cSSales = (cSTranslist.reduce((cSSales, currentItem) => cSSales = cSSales + currentItem.totalPrice, 0));\r\n      var cSDepo = (cSTranslist.reduce((cSDepo, currentItem) => cSDepo = cSDepo + currentItem.gDeposit, 0));\r\n      // console.log(cSSales);\r\n\r\n\r\n      //3. Truck and cadete transactions\r\n      //filter transactions by date\r\n      var tCTranslist = props.tcTransactionsList.filter(x => x.returnDate.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.returnDate.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      // console.log(cSTranslist);\r\n      var tCcost = 0;\r\n      var tCTransCode = \"\";\r\n\r\n      tCTranslist.forEach((tCSale) => {\r\n\r\n        tCTransCode = tCSale.transCode;\r\n        //get transdetails by transcode\r\n        var tCTransDetail = props.tcTransDetailsList.filter(x => x.transCode == tCTransCode);\r\n        // console.log(transDetail);\r\n        tCTransDetail.forEach((tCDetail) => {\r\n          var prodId = tCDetail.productId;\r\n          var prod = props.productsList.find(x => x.productId == prodId);\r\n\r\n          // tCcost = tCcost + prod.buyingPrice * tCDetail.quantity;\r\n\r\n            //get products details\r\n            const tCSaleDetails = {\r\n              // productId: prod.productId,\r\n              // prodName: prod.name,\r\n              quantity: tCDetail.quantity,\r\n              unitPrice: prod.sellingPrice,\r\n              totalPrice: tCDetail.totalPrice,\r\n              deposit: tCDetail.deposit,\r\n              total: tCDetail.total\r\n            }\r\n            const newTCSaleDetails=[...cTSales, tCSaleDetails];\r\n            setCTSales(newTCSaleDetails);\r\n           \r\n          // console.log(cSDetail.productId);\r\n          // console.log(cSDetail.quantity);\r\n          // console.log(prod.buyingPrice);\r\n        });\r\n      });\r\n      var tCSales = (tCTranslist.reduce((tCSales, currentItem) => tCSales = tCSales + currentItem.totalPrice, 0));\r\n      var tCDepo = (tCTranslist.reduce((tCDepo, currentItem) => tCDepo = tCDepo + currentItem.gDeposit, 0));\r\n      // console.log(tCSales);\r\n      // console.log(tCcost);\r\n      var totalSales = nSSales + cSSales + tCSales;\r\n      var totalCost = nScost + cScost + tCcost;\r\n      var totalDeposit = nSDepo + cSDepo + tCDepo;\r\n      var totalIncome = totalSales;\r\n      var grossProfit = totalIncome - totalCost;\r\n      // console.log(totalSales + \" \" + totalCost + \" \" + totalDeposit);\r\n      // console.log(grossProfit);\r\n\r\n      // get all expenses\r\n      //get expenses by date\r\n\r\n      var expenses = props.expensesList.filter(x => x.date.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.date.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      var totaExpenses = (expenses.reduce((totaExpenses, currentItem) => totaExpenses = totaExpenses + currentItem.amount, 0));\r\n      var netProfit = grossProfit - totaExpenses;\r\n\r\n      const pl = {\r\n        Sales: totalSales,\r\n        Cost: totalCost,\r\n        GrossProfit: grossProfit,\r\n        Expenses: totaExpenses,\r\n        NetProfit: netProfit,\r\n        Deposits: totalDeposit,\r\n        TotalIncome: totalIncome,\r\n      }\r\n      const newP = [pl];\r\n      setPlList(newP);\r\n      // console.log(pl);\r\n      var expDetails = props.expensesList.filter(x => x.date.toString().substring(0, 10) >= dateR.toString().substring(0, 10) && x.date.toString().substring(0, 10) <= dateR.toString().substring(13, 23));\r\n      setExpD(expDetails);\r\n      setCompD(props.companyDataList);\r\n\r\n    } catch(error) {\r\n\r\n      console.log(error);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    dateRange = e.text;\r\n    setDateR(dateRange);\r\n  }; // the event handler\r\n\r\n  const startValue: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), dd));\r\n  const endValue: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth()+1 , dd));\r\n  const minDate: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), 8));\r\n  const maxDate: Date = new Date(new Date(new Date().getFullYear(), new Date().getMonth(), dd));\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {/* <PageHeader\r\n        title=\"Categories\"\r\n        //subTitle=\"Form design with validation\"\r\n        icon={<CategoryTwoToneIcon fontSize=\"large\" />}\r\n      />, */}\r\n      <Paper className={classes.paper} elevation={3}  >\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n\r\n            {/* <AddNewCategoryForm {...({ currentId, setCurrentId })} /> */}\r\n            <Toolbar>\r\n              {/* <Controls.Input\r\n                className={classes.searchInput}\r\n                label=\"Search Customer\"\r\n\r\n                InputProps={{\r\n                  startAdornment: (<InputAdornment position=\"start\">\r\n                    <Search />\r\n                  </InputAdornment>)\r\n                }}\r\n                onChange={handleSearch}\r\n\r\n              /> */}\r\n              <DateRangePickerComponent\r\n\r\n                placeholder=\"Enter Date Range\"\r\n                // startDate={startValue}\r\n                // endDate={endValue}\r\n                // min={minDate}\r\n                max={maxDate}\r\n                // minDays={3}\r\n                // maxDays={5}\r\n                format=\"yyyy-MM-dd\"\r\n                start=\"Year\"\r\n                date=\"Year\"\r\n                change={onChange}\r\n              // style={{ width: '50%' }}\r\n              >\r\n\r\n\r\n              </DateRangePickerComponent>\r\n              <Controls.Button\r\n                text=\"Load \"\r\n                variant=\"outlined\"\r\n                // startIcon={<AddIcon />}\r\n                className={classes.newButton}\r\n                onClick={() => { calcPl(); setClicked(true) }}\r\n              />\r\n            </Toolbar>\r\n\r\n            <Toolbar>\r\n\r\n\r\n              {/* <Controls.Button\r\n                text=\"Print\"\r\n                variant=\"outlined\"\r\n                startIcon={<AddIcon />}\r\n                className={classes.newButton}\r\n                onClick={handlePrint} /> */}\r\n\r\n              {/* <ReactToPrint\r\n                trigger={() => <Controls.Button\r\n                  text=\"Print\"\r\n                  variant=\"outlined\"\r\n                  startIcon={<AddIcon />}\r\n                  className={classes.newButton}\r\n                // onClick={handlePrint} \r\n                />\r\n                }\r\n                content={() => componentRef.current}\r\n\r\n              /> */}\r\n            </Toolbar>\r\n          </Grid>\r\n          <Grid>\r\n\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            {/* your favorite templating/data-binding library would come in handy here to generate these rows dynamically !*/}\r\n            <div>\r\n\r\n              {clicked === true && <SalesReportData {...({ currentId, setCurrentId, plList, setPlList, expD, setExpD, dateR, setDateR, compD, setCompD, nSaleList, setNSaleList,cSaleList, setCSaleList,cTSales, setCTSales })}  />}\r\n            </div>\r\n\r\n\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <ConfirmDialog\r\n        title=\"Are you sure you want to delete this record?\"\r\n        subTitle=\"This operation can't be reversed\"\r\n        confirmDialog={confirmDialog}\r\n        setConfirmDialog={setConfirmDialog}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n//export default staff; \r\n\r\nconst mapStateToProps = state => ({\r\n  productsList: state.products.list,\r\n  creditSalesList: state.creditSale.list,\r\n  tcTransactionsList: state.trucks_cadetes.list,\r\n  nSTransactionDetail: state.cash.list,\r\n  salesList: state.cashSale.list,\r\n  cSaleDetailsList: state.credit.list,\r\n  tcTransDetailsList: state.trucks.list,\r\n  expensesList: state.expenses.list,\r\n  companyDataList: state.companyData.list,\r\n})\r\n\r\nconst mapActionToProps = {\r\n\r\n  fetchAllProducts: productActions.fetchAllProduct,\r\n  fetchAllNSTransactions: cashSalesActions.fetchAllTransactions,\r\n  fetchAllTCTransactions: TCActions.fetchAllTransactions,\r\n  fetchAllCSTransactions: creditSalesActions.fetchAllTransactions,\r\n  fetchAllTransactionDetails: cashSalesActions.fetchAllTransactionDetails,\r\n  fetchAllCSTransactionDetails: creditSalesActions.fetchAllTransactionDetails,\r\n  fetchAllTCTransactionDetails: TCActions.fetchAllTransactionDetails,\r\n  fetchAllExpenses: Eactions.fetchAllExpenses,\r\n  fetchAllCompanyData: companyDataActions.fetchAllCompanyData,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(SalesReport));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}